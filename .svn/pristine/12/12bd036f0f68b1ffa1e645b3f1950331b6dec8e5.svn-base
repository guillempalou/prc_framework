// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file zigzag.cpp
//!
//!  Implementation of ZigZagScan class
//!


#include <imageplus/math/transforms/zigzag.hpp>


using namespace imageplus;
using namespace imageplus::math::transforms;


ZigZagScan::ZigZagScan() : _N(0), _tl(0,0), _zz_coord(0)
{
}

ZigZagScan::ZigZagScan (uint64 width) : _N(width), _tl(0,0), _zz_coord(width*width)
{
    _zigzag_coords();
}

ZigZagScan::ZigZagScan (Coord2D<int64> top_left, uint64 width) : _N(width), _tl(top_left), _zz_coord(width*width)
{
    _zigzag_coords();
}


void ZigZagScan::update_block (Coord2D<int64> top_left)
{
    _tl = top_left;
}


const MultiArray<Coord2D<int64>,1> ZigZagScan::coords() const
{
    uint64 dim = _N * _N;
    MultiArray<Coord2D<int64>,1> out ( dim );

    for (uint64 i = 0; i < dim; i++)
    {
        out[i].x() = _zz_coord[i].x() + _tl.x();
        out[i].y() = _zz_coord[i].y() + _tl.y();
    }

    return out;
}

const MultiArray<Coord2D<int64>,1> ZigZagScan::coords(uint64 ncoefs) const
{
    MultiArray<Coord2D<int64>,1> out (ncoefs);

    for (uint64 i = 0; i < ncoefs; i++)
    {
        out[i].x() = _zz_coord[i].x() + _tl.x();
        out[i].y() = _zz_coord[i].y() + _tl.y();
    }

    return out;
}


template<typename T>
MultiArray<T,1> ZigZagScan::coefs(const MultiArray<T,2>& ma) const
{
    uint64 dim = _N * _N;
    MultiArray<T,1> out ( dim );

    for (uint64 i = 0; i < dim; i++)
    {
        out[i] = ma[_zz_coord[i].x() + _tl.x()][_zz_coord[i].y() + _tl.y()];
    }

    return out;
}


template<typename T>
MultiArray<T,1> ZigZagScan::coefs(const MultiArray<T,2>& ma, uint64 ncoefs) const
{
    MultiArray<T,1> out (ncoefs);

    for (uint64 i = 0; i < ncoefs; i++)
    {
        out[i] = ma[_zz_coord[i].x() + _tl.x()][_zz_coord[i].y() + _tl.y()];
    }

    return out;
}



template<typename T>
MultiArray<T,2> ZigZagScan::dezigzag(const MultiArray<T,1>& coeffs) const
{
    MultiArray<T,2> out ( _N, _N );

    uint64 k = 0;

    uint64 dim = _N * _N;
    for (uint64 i = 0; i < dim; i++)
    {
        out[_zz_coord[i].x()][_zz_coord[i].y()] = coeffs[k++];
    }

    return out;
}

template<typename T>
void ZigZagScan::dezigzag(const MultiArray<T,1>& coeffs, MultiArray<T,2>& out) const
{
    uint64 dim = _N * _N;
    uint64 k = 0;

    for (uint64 i = 0; i < dim; i++)
    {
        out[_zz_coord[i].x()+_tl.x()][_zz_coord[i].y()+_tl.y()] = coeffs[k++];
    }
}

void ZigZagScan::_zigzag_coords()
{
	uint64 m;
    uint64 n;
	uint64 order = 0;

	for(uint64 i = 0; i < _N; i++)    
	{
		uint64 sum = i;
		uint64 n_elements = sum + 1;

		if(i % 2)
		{
			m = sum; 
			n = 0;
			for (uint64 j = order; j < order + n_elements; j++)
			{
                _zz_coord[j].x() = m--;
                _zz_coord[j].y() = n++;
			}
			order += n_elements;
		}
		else
		{
			m = 0; 
			n = sum;
			for (uint64 j = order; j < order + n_elements; j++)
			{
                _zz_coord[j].x() = m++;
                _zz_coord[j].y() = n--;
			}
			order += n_elements;
		}
	}
	
	for (uint64 i = 0; i < _N - 1; i++)
	{
		// uint64 sum        = _N + i;
		uint64 sum1       = _N - 1;
		uint64 n_elements = _N - 1 - i;

		if(( i + _N + 1 ) % 2)
		{
			m = i + 1; 
			n = sum1;
			for (uint64 j = order; j < order + n_elements; j++)
			{
                _zz_coord[j].x() = m++;
                _zz_coord[j].y() = n--;
			}
			order += n_elements;
		}	
		else
		{
			m = sum1; 
			n = i + 1;
			for (uint64 j = order; j < order + n_elements; j++)
			{
                _zz_coord[j].x() = m--;
                _zz_coord[j].y() = n++;
			}
			order += n_elements;
		}
	}
}



namespace imageplus
{
    namespace math
    {
        namespace transforms
        {
            template MultiArray<float64,1> ZigZagScan::coefs(const MultiArray<float64,2>& ) const;
            template MultiArray<int64,1>   ZigZagScan::coefs(const MultiArray<int64,2>& ) const;
            template MultiArray<uint8,1>   ZigZagScan::coefs(const MultiArray<uint8,2>& ) const;


            template MultiArray<float64,1> ZigZagScan::coefs(const MultiArray<float64,2>& , uint64 ) const;
            template MultiArray<int64,1>   ZigZagScan::coefs(const MultiArray<int64,2>& , uint64 ) const;
            template MultiArray<uint8,1>   ZigZagScan::coefs(const MultiArray<uint8,2>& , uint64 ) const;


            template MultiArray<uint8,2>   ZigZagScan::dezigzag(const MultiArray<uint8,1>& coeffs) const;
            template MultiArray<int64,2>   ZigZagScan::dezigzag(const MultiArray<int64,1>& coeffs) const;
            template MultiArray<float64,2> ZigZagScan::dezigzag(const MultiArray<float64,1>& coeffs) const;

            template void ZigZagScan::dezigzag(const MultiArray<uint8,1>& coeffs,   MultiArray<uint8,2>& out ) const;
            template void ZigZagScan::dezigzag(const MultiArray<int64,1>& coeffs,   MultiArray<int64,2>& out ) const;
            template void ZigZagScan::dezigzag(const MultiArray<float64,1>& coeffs, MultiArray<float64,2>& out ) const;

        }
    }
}
