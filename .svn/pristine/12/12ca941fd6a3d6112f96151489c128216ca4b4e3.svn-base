// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file volumergb.cpp
//!
//! \author Javier Ruiz Hidalgo <j.ruiz@upc.edu>
//! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
//!
//!  Implementation for VolumeRGB class
//!

#include <imageplus/core/volumergb.hpp>

using namespace imageplus;


template<typename T>
VolumeRGB<T>::VolumeRGB()
        : Volume<T,3>()
{
}


template<typename T>
VolumeRGB<T>::VolumeRGB(uint64 x, uint64 y, uint64 z)
        : Volume<T,3>(x,y,z)
{
}


template<typename T>
VolumeRGB<T>::VolumeRGB(const ImaVol<T,3,3>& copy)
        : Volume<T,3>(copy)
{
}


template<typename T>
VolumeRGB<T>::VolumeRGB(const Volume<T,3>& copy)
        : Volume<T,3>(copy)
{
}


template<typename T>
VolumeRGB<T>::VolumeRGB(const VolumeRGB<T>& copy)
        : Volume<T,3>(copy)
{
}


template<typename T>
VolumeRGB<T>::VolumeRGB(const std::vector< std::vector<uint64> >& dims)
        : Volume<T,3>(dims)
{
}


template<typename T>
VolumeRGB<T>::~VolumeRGB()
{
}


template<typename T>
const VolumeRGB<T>& VolumeRGB<T>::operator=( const ImaVol<T,3,3>& copy )
{
    (*this).Volume<T,3>::operator=( copy );

    return *this;
}

template<typename T>
const VolumeRGB<T>& VolumeRGB<T>::operator=( const Volume<T,3>& copy )
{
    (*this).Volume<T,3>::operator=( copy );

    return *this;
}

template<typename T>
const VolumeRGB<T>& VolumeRGB<T>::operator=( const VolumeRGB<T>& copy )
{
    (*this).Volume<T,3>::operator=( copy );

    return *this;
}


template<typename T>
const T& VolumeRGB<T>::operator=(const T& val)
{
    (*this).Volume<T,3>::operator=( val );

    return val;
}


// VolumeRGB instantiations
namespace imageplus
{

    template class VolumeRGB<uint8>;
    template class VolumeRGB<int64>;
    template class VolumeRGB<float64>;
}
