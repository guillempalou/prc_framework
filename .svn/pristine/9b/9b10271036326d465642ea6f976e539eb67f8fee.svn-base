##############################################################################
#                                                                            #
# Copyright (C) 2007 UPC All Rights Reserved.                                #
#                                                                            #
# See COPYRIGHT file enclosed with this distribution.                        #
#                                                                            #
##############################################################################

##############################################################################
#                                                                            #
#  ImagePlus Build System - Environment Configuration                        #
#                                                                            #
# This file configures the main build environment used for SCons.            #
#                                                                            #
#  CREATED BY :  Albert Gil, UPC (agil@gps.tsc.upc.edu)                      #
#                                                                            #
##############################################################################

Import('*')

import os

##
## Default build environment
##
## Once configured, this should be exported.
##
env = Environment(
	options  = opts,
	
	# to able to launch external commands (i.e. doxygen)
	# Hack: Moved outside the Environment constructor to avoid errors 
	#       in MinGW platform
	# ENV = {'PATH' : os.environ['PATH']},
	
	# Paths and libs
	CPPPATH    = ['#include'],
	LIBPATH    = [],
	LIBS       = [],
	#GFXLIBS    = [],
	# Needed for win32 platform
	# TODO: Change compiler check for win32	
	CXXVERSION = '',
	
	# Flags and defines
	CPPFLAGS   = [],
	CCFLAGS    = [],
	LINKFLAGS  = [],	
	CPPDEFINES = [],
	
	NVCCFLAGS  = '',
	
	# Verbose control
	CXXCOMSTR        = 'Compiling  ${TARGET} ...',
	LINKCOMSTR       = 'Linking    ${TARGET} ...',
	ARCOMSTR         = 'Archiving  ${TARGET} ...',
	RANLIBCOMSTR     = 'Indexing   ${TARGET} ...',
	INSTALLSTR       = 'Installing ${TARGET} ...',
	STATICNVCCCMDSTR = 'Compiling with CUDA ${TARGET} ...',
	
	toolpath = [sconstoolsPath],
	
	LD_LIBRARY_PATH = '',
	
)

##
## User configuration script
##
if os.path.exists(str(userBuildFile)):
	SConscript(userBuildFile, 'env')

# Add environemnt path except for mingw
# TODO: it should be moved to environment creation
if env['msvc'] or env[ 'PLATFORM' ] != 'win32':
    env['ENV']['PATH']    += ";"+os.environ['PATH']
    
##
## Add MSVC environment variables
##
if env['msvc']:
    if 'INCLUDE' in os.environ:
    	env['ENV']['INCLUDE'] += ";"+os.environ['INCLUDE']
    if 'LIB' in os.environ:
        env['ENV']['LIB']     += ";"+os.environ['LIB']
    if 'TMP' in os.environ:
        env['ENV']['TMP']     = os.environ['TMP']


# Add LD_LIBRARY_PATH variable to the environment
# TODO: should be moved to environment creation once mingw fix its PATH variable
if 'LD_LIBRARY_PATH' in os.environ:
    env['ENV'].update( {'LD_LIBRARY_PATH' : os.environ['LD_LIBRARY_PATH']} )
else:
    env['ENV'].update( {'LD_LIBRARY_PATH' : ''} )


##
## Configure the build environment and check it:
## 
##  - Read the user configuration to override the default values
##  - Check release/debug mode
##  - Check verbose mode
##  - Platform dependent configuration
##
##  - Check the build environment (ContextChecks)
##

# Platform dependent configuration
SConscript( platformFile, 'env')


##
## Add other scons-tools
##
if env['USE_CUDA']:	
	env.Tool('cuda')


##
## HACK to update CXXVERSION correctly (scons bug)
##
## (from /usr/lib/scons/SCons/Tool/g++.py
##
import re
if env['CXX']:
	line = os.popen(env['CXX'] + ' --version').readline()
	match = re.search(r'[0-9]+(\.[0-9]+)+', line)
	if match:
		env['CXXVERSION'] = match.group(0)


        
##    
## Boost C++ Libraries
##
boost_libs = []

if env[ 'debug' ]:
    if not env['msvc']:    	
    	if env['static']:
    		boost_libs += [ 'boost_program_options-mt-sd', 'boost_date_time-mt-sd', 'boost_filesystem-mt-sd', 'boost_system-mt-sd', 'boost_thread-mt-sd', 'boost_serialization-mt-sd' ] 
    	else:
    		boost_libs += [ 'boost_program_options-mt-d',  'boost_date_time-mt-d',  'boost_filesystem-mt-d',  'boost_system-mt-d',  'boost_thread-mt-d',  'boost_serialization-mt-s' ]
    else:
        if env['static']:
            boost_libs += [ 'boost_program_options-mt-sgd', 'boost_date_time-mt-sgd', 'boost_filesystem-mt-sgd', 'boost_system-mt-sgd', 'boost_thread-mt-sgd', 'boost_serialization-mt-sgd' ] 
        else:
            boost_libs += [ 'boost_program_options-mt-gd',  'boost_date_time-mt-gd',  'boost_filesystem-mt-gd',  'boost_system-mt-gd',  'boost_thread-mt-gd',  'boost_serialization-mt-gd' ]
else:
	if env['static']:
		boost_libs     += [ 'boost_program_options-mt-s', 'boost_date_time-mt-s', 'boost_filesystem-mt-s', 'boost_system-mt-s', 'boost_thread-mt-s', 'boost_serialization-mt-s' ] 
	else:
		boost_libs     += [ 'boost_program_options-mt',   'boost_date_time-mt',   'boost_filesystem-mt',   'boost_system-mt',   'boost_thread-mt',   'boost_serialization-mt' ]
		

##
## Adding dependences of Boost C++ Libraries
##
if not env['msvc']:
	boost_dependences = [   'tiff',    'jpeg',    'png', 'z',  'pthread' ]
else:
    if not env['static']:
        boost_dependences = ['libtiff', 'libjpeg', 'libpng', 'zlib']
    else:
        boost_dependences = ['libtiff-s', 'libjpeg', 'libpng-s', 'zlib-s']

boost_libs += boost_dependences

##
## Debug/Release modes
## 
if env[ 'debug' ] == True:
    env['buildsuffix']  = 'debug/'
    env['NVCCFLAGS']   += ' -g -G'
else:
	env['buildsuffix']  = 'release/'
	env['CPPDEFINES' ] += ['NDEBUG', 'BOOST_DISABLE_ASSERTS',]

##
## Profiling
##
if env['profile']:
	env['buildsuffix'] = 'profile_' + env['buildsuffix']


##
## Verbose mode
## 
if env[ 'verbose' ] == True:
	env['CXXCOMSTR']    = '' 
	env['LINKCOMSTR']   = ''
	env['ARCOMSTR']     = ''
	env['RANLIBCOMSTR'] = ''
	env['INSTALLSTR']   = ''
	env['STATICNVCCCMDSTR']   = ''


##
## Static linking limitations
##
if env['static']:
    if env['USE_IMAGEMAGICK'] == True:
        print "\nImageMagick can NOT be statically linked."
        print   "Forced USE_IMAGEMAGICK=False\n"
        env['USE_IMAGEMAGICK'] = False
        
    if env['USE_SMARTFLOW'] == True:
        print "\nSmartFlow can NOT be statically linked."
        print   "Forced USE_SMARTFLOW=False\n"
        env['USE_SMARTFLOW'] = False
        
    if env['USE_OPENMESH'] == True:
        print "\nOpenMesh can NOT be statically linked."
        print   "Forced USE_OPENMESH=False\n"
        env['USE_OPENMESH'] = False
        
    if env['USE_OPENNI'] == True:
        print "\nOpenNI can NOT be statically linked."
        print   "Forced USE_OPENNI=False\n"
        env['USE_OPENNI'] = False

    if env['USE_OPENGL'] == True:
        print "\nOpenGL can NOT be statically linked."
        print   "Forced USE_OPENGL=False\n"
        env['USE_OPENGL'] = False
        
    if env['USE_OPENCL'] == True:
        print "\nOpenCL can NOT be statically linked."
        print   "Forced USE_OPENCL=False\n"
        env['USE_OPENCL'] = False

##
## External Libs / Context Checks
##
if not env.GetOption('clean'):
	SConscript( contextFile, ['env', 'boost_libs'])

##
## External dependences:
##
if env['USE_IMAGEMAGICK']:
	env['CPPDEFINES'] += ['USE_IMAGEMAGICK']

if env['USE_FFTW3']:
	env['CPPDEFINES'] += ['USE_FFTW3']

if env['USE_FFMPEG']:
	env['CPPDEFINES'] += ['USE_FFMPEG']

if env['USE_VIDEO4LINUX']:
    env['CPPDEFINES'] += ['USE_VIDEO4LINUX']
    
if env['USE_XML']:
    env['CPPDEFINES'] += ['USE_XML']
    
if env['USE_SMARTFLOW']:
    env['CPPDEFINES'] += ['USE_SMARTFLOW']

if env['USE_OPENGL']:
    env['CPPDEFINES'] += ['USE_OPENGL']

if env['USE_OPENCL']:
    env['CPPDEFINES'] += ['USE_OPENCL']

if env['USE_OPENMESH']:
    env['CPPDEFINES'] += ['USE_OPENMESH']

if env['USE_OPENNI']:
    env['CPPDEFINES'] += ['USE_OPENNI']
    
if env['USE_CUDA']:
    env['CPPDEFINES'] += ['USE_CUDA']

if env['USE_WT']:
    env['CPPDEFINES'] += ['USE_WT']

##
## Link with precompiled library
##
## (This setup should be done after after the context checks to avoid linking errors)
##
if env['precompiled']:
    env['LIBPATH'] += [mainlibPath + env['buildsuffix']]
    env['LIBS' ]    = ['imageplus-upc', 'imageplus'] + env['LIBS' ]
    
##
## Run command
##
if env['valgrind']:
    env['run_cmd'] += 'valgrind --leak-check=full --show-reachable=yes --undef-value-errors=yes --suppressions=builder/valgrind.supp'
     

##
## Exporting environments and variables
##
validationEnv = env.Clone()
Export('env', 'validationEnv', 'boost_libs' )
