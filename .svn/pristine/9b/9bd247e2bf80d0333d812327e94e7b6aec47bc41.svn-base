##############################################################################
#                                                                            #
# Copyright (C) 2007 UPC All Rights Reserved.                                #
#                                                                            #
# See COPYRIGHT file enclosed with this distribution.                        #
#                                                                            #
##############################################################################

##############################################################################
#                                                                            #
#  ImagePlus Build System - Running Tests                                    #
#                                                                            #
# This script executes all the tests in the given list and the global ones.  #
# It also checks if run tests is allowed by the build variable 'runTests'.   #
#                                                                            #
# The build system is based on SCons (http://www.scons.org/), so also this   #
# this script.                                                               #
#                                                                            #
#  CREATED BY :  Albert Gil, UPC (agil@gps.tsc.upc.edu)                      #
#                                                                            #
##############################################################################

Import('*')

# To get the list of files
import glob
import os
import sys


##
## Validation paths
##
srcPath = validationPath +'src/'
objPath = validationPath +'obj/' + env['buildsuffix']
binPath = validationPath +'bin/' + env['buildsuffix']

##
## Remove previous validation files (.cpp)
##
old_tests = glob.glob(str(Dir(srcPath)) + os.sep + '*.cpp')
for old_test in old_tests:
	os.remove(old_test)

##
## Creat the new validation files
##
includetests = list()

if os.path.exists(str(userTestListFile)):
    includetests.extend(SConscript(userTestListFile, 'env'))

if len(includetests) == 0 :
	for module in modules:
		includetests = list()
		includetests_with_path =  glob.glob(str(Dir(modulesPath))+os.sep+module+os.sep+'test'+os.sep+'*.test')
		includetests_with_path += glob.glob(str(Dir(modulesPath))+os.sep+module+os.sep+'test'+os.sep+'*'+os.sep+'*.test')
		# create the autovalidation.cpp file 
		validationFileName  = str(Dir(srcPath)) + os.sep + module +'_validation.cpp'
		validationFile      = open(validationFileName, 'w')
		
		##
		## Creating validation test with an empty test case to avoid errors if no test file found
		##
		validationFile.write( '#define IMAGEPLUS_TEST_NAME '+module+'_validation\n' +
					          '#include <imageplus/core/test_config.hpp>\n\n' +						          
					          'BOOST_AUTO_TEST_CASE ( empty_validation_test )\n' +
							  '{}\n\n')
		for includetest in includetests_with_path:
		    includetests.append( includetest.replace(str(Dir(modulesPath))+ os.sep,'') )
		    
		for includetest in includetests:
			validationFile.write( '#include <'+includetest+'>\n' )
		validationFile.close()
else:
	# create the autovalidation.cpp file 
	validationFileName  = str(Dir(srcPath)) + os.sep + 'user_defined_validation.cpp'
	validationFile      = open(validationFileName, 'w')
	validationFile.write( '#define IMAGEPLUS_TEST_NAME UserDefined_ValidationTest\n' +
				          '#include <imageplus/core/test_config.hpp>\n\n')
	for includetest in includetests:
		validationFile.write( '#include <'+includetest+'>\n' )
	validationFile.close()


##
## Add test data path to the environment
##
validationEnv['CPPDEFINES'] += ['TEST_DATA_PATH_R=\"\\\"'+env['TEST_DATA_PATH_R']+'\\\"\"']
validationEnv['CPPDEFINES'] += ['TEST_DATA_PATH_W=\"\\\"'+env['TEST_DATA_PATH_W']+'\\\"\"']
validationEnv['CPPPATH']    += [modulesPath]

# Add the corresponding flag for BOOST_TEST_HEADERS
if env['USE_BOOST_TEST_HEADERS']:
	validationEnv['CPPDEFINES'] += ['USE_BOOST_TEST_HEADERS']

##
## Build validation test
##
tests = list()
testFiles = glob.glob(str(Dir(srcPath)) + os.sep + '*.cpp')
for test in testFiles:
	test = test.replace('.cpp','')
	test = test.replace(str(Dir(srcPath))+ os.sep,'')
	obj = validationEnv.Object  ( objPath + test, srcPath + test + '.cpp' )
	bin = validationEnv.Program ( binPath + test, obj + library )
	tests.extend(bin)
	



# REMOVED BECAUSE BOOTS.TEST IS NOT MORE LINKED AS AN OBJECT, BUT AS A LIBRARY
# Add Boost.Test library only if we need to link against
#if validationEnv['USE_BOOST_TEST_HEADERS']:
#	valBin = validationEnv.Program(binPath + validationTestName, valObjs  + static_library  )
#else:
#	valBin = validationEnv.Program(binPath + validationTestName, valObjs  + [env['static_boosttest_lib']] + static_library  )

##
## Run validation test
##
for test in tests:
	testName = str(test)
	log_level = 'warning'
	if env['verbose']:
		log_level='test_suite'	
	if testDataExists:
	    run_test_cmd = env['run_cmd'] + ' \"' + testName + '\" --report_level=short --log_level='+log_level
	else:
	    run_test_cmd = '# TEST DATA NOT FOUND'		
	validationEnv.Command(testName+'.run', test, run_test_cmd )
