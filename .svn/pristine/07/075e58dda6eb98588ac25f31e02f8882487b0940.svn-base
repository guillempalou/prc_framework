// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file ordering.test
//!
//!  Tests for the math operations on Graphs
//!

#include <imageplus/math/graphs/graph.hpp>
#include <imageplus/math/graphs/graph_io.hpp>
#include <imageplus/math/graphs/algorithms/ordering.hpp>

BOOST_AUTO_TEST_SUITE ( test_ordering );

using namespace imageplus;
using namespace imageplus::math;
using namespace imageplus::math::graphs;

BOOST_AUTO_TEST_CASE( topological_sort_test )
{
	typedef BoostGraph<kGraphDirected> Graph;
	typedef Graph::Node Node;
	typedef Graph::Edge Edge;

	uint64 N = 50;

	Graph g;

	for (uint64 i = 0; i < N; i++) g.add_node();

	for (uint64 i = 0; i < N-1; i++) {
		for (uint64 k = i+1; k < N; k++) g.add_edge(i,k);
	}

	TopologicalSort<Graph> tp;

	tp.calculate(g);

	std::vector<Node> sorted = tp.sorted_nodes();

	for (uint64 i = 0; i < N; i++) BOOST_CHECK_EQUAL(49-i,sorted[i]);
}

BOOST_AUTO_TEST_CASE( topological_partial_sort_test )
{
	typedef BoostGraph<> Graph;
	typedef Graph::Node Node;
	typedef Graph::Edge Edge;

	uint64 N = 50;

	Graph g;

	std::vector<Node> n(N);
	for (uint64 i = 0; i < N; i++) n[i] = g.add_node();

	for (uint64 i = 0; i < N-1; i++) {
		for (uint64 k = i+2; k < N; k++) g.add_edge(n[i],n[k]);
	}

	TopologicalPartialSort<Graph> tp;

	tp.calculate(g);

	std::vector<uint32> sorted = tp.nodes_order();

	for (uint64 i = 0; i < N; i++) BOOST_CHECK(i/2 == sorted[i]);
}

BOOST_AUTO_TEST_SUITE_END ();

