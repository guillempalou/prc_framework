// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------
//!
//!  \file readvolume.hpp
//!
//!  Interface for the ReadVolume class. Base class for all input operations involving volume files.
//!
#ifndef IMAGEPLUS_IO_READVOLUME_HPP
#define IMAGEPLUS_IO_READVOLUME_HPP

#include <string>

#include <imageplus/core.hpp>
#include <imageplus/compress/rle.hpp>

namespace imageplus
{

    namespace io
    {
        //! \brief File Header
        //!
        //! Most of the current volume sequences use a header to determine volume parameters
        //!
        typedef struct file_header
        {
            //! \brief Number of voxels in the X axis
            uint16 cubes_x;
            //! \brief Number of voxels in the Y axis
            uint16 cubes_y;
            //! \brief Number of voxels in the Z axis
            uint16 cubes_z;
            //! \brief Size of the Voxel (cm)
            float32 voxel_size;
            //! \brief Size of data type in file
            uint16 data_size;
            //! \brief Flag for Regions of Interest. Deprecated in Imageplus, but present in files.
            bool use_ROI;
            //! \brief Representation Offset
            float32 offset_x;
            //! \brief Representation Offset
            float32 offset_y;
            //! \brief Representation Offset
            float32 offset_z;

        } file_header;

        //!
        //! \brief Base class for Volume files reading
        //!
        //! \author Ramon Morros <morros@gps.tsc.upc.es>
        //! \author Adolfo López Méndez <alopez@gps.tsc.upc.es>
        //! \author Cristian Canton <ccanton@gps.tsc.upc.es>
        //!
        //! \date 11-1-2008
        //!
        //! This class is based in GPI's volume file format. Its methods allow a user
        //! to read from RLE compressed files, by using a pointer to multi_array data.
        //! A struct header has been provided in order to preserve compatibility with test sequences.
        //!
        class ReadVolume
        {

            public:
                //! \brief File constructor,
                //!
                //! creates a ReadVolume with unspecified filename.
                //!
                ReadVolume();
                //! \brief File constructor,
                //!
                //! creates a ReadVolume with an specified filename.
                //!
                //! \param[in] filename : File containing a volume.
                explicit ReadVolume( const std::string& filename );
                //! \brief Destructor
                ~ReadVolume();
                //! \brief File open
                //!
                //! Opens a file and changes the filename of the class.
                //!
                //! \param[in] filename : File containing a volume.
                void open( const std::string& filename );
                //!
                //! \brief Reads a file containing a RGB Volume
                //!
                //! \param[in] vol : Volume to write file data
                //!
                template<typename T>
                void operator>>( VolumeRGB<T>& vol) const;
                //!
                //! \brief Reads a file containing a Gray Volume
                //!
                //! \param[in] vol : Volume to write file data
                //!
                template<typename T>
                void operator>>( VolumeGray<T>& vol) const;

            private:
                //!
                //! \brief Copy constructor
                //!
                //! \param[in] rvol : Class to copy.
                //!
                ReadVolume( const ReadVolume& rvol);

                //!
                //! \brief Assignment operator
                //!
                //! \param[in] rvol : object to assign.
                //!
                //! \return rvol, to concatenate
                //!
                const ReadVolume& operator=( const ReadVolume& rvol);

                //! string storing the file route
                std::string _filename;

        };

    }//names io
} //namespace ImagePlus

#endif // IMAGEPLUS_READ_VOLUME_HPP
