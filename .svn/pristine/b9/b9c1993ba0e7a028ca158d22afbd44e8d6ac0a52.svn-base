// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file color_structure.cpp
//!
//!  ColorStructure
//!

#include <imageplus/descriptors/color/color_structure.hpp>

namespace imageplus
{
namespace descriptors
{

float64 dist_color_structure( const std::vector<float64>& h1, const std::vector<float64>& h2)
{

	float64 dist = 0.0;
	uint32 size_1 = h1.size();
	uint32 size_2 = h2.size();

	if(size_1 == size_2)
	{
		for(uint32 ii=0; ii<size_1; ii++)
		{
			dist = dist + std::abs(h1[ii]-h2[ii]);
		}
	}
	else //TODO: Re-unification of bins in order to compare the two histograms
	{

	}

	return dist;
}

float64 dist_cs_euclidean( const std::vector<float64>& h1, const std::vector<float64>& h2)
{
	float64 dist = 0.0;
	uint32 size_1 = h1.size();
	uint32 size_2 = h2.size();
	if(size_1 == size_2)
	{
		for(uint32 ii=0; ii<size_1; ii++)
		{
			dist = dist + (h1[ii]-h2[ii])*(h1[ii]-h2[ii]);
		}
	}
	else //TODO: Re-unification of bins in order to compare the two histograms
	{

	}

	return std::sqrt(dist);
}

float64 dist_cs_jeffrey( const std::vector<float64>& h1, const std::vector<float64>& h2)
{
	float64 dist = 0.0;
	uint32 size_1 = h1.size();
	uint32 size_2 = h2.size();
	if(size_1 == size_2)
	{
		for(uint32 ii=0; ii<size_1; ii++)
		{
			if(h1[ii]!=0 && h2[ii]!=0)
			{
				float64 m = (h1[ii]+h2[ii])/2.0;
				dist = dist + h1[ii]*std::log10(h1[ii]/m) + h2[ii]*std::log10(h2[ii]/m);

			}
			else if(h1[ii]!=0)
			{
				float64 m = h1[ii]/2.0;
				dist = dist + h1[ii]*std::log10(h1[ii]/m);

			}
			else if(h2[ii]!=0)
			{
				float64 m = h2[ii]/2.0;
				dist = dist + h2[ii]*std::log10(h2[ii]/m);
			}
		}
	}
	else //TODO: Re-unification of bins in order to compare the two histograms
	{

	}

	return std::sqrt(dist);

}

float64 dist_cs_hist_intersection( const std::vector<float64>& h1, const std::vector<float64>& h2)
{
	float64 dist = 0.0;
	uint32 size_1 = h1.size();
	uint32 size_2 = h2.size();
	if(size_1 == size_2)
	{
		float64 sum=0.0;
		for(uint32 ii=0; ii<size_1; ii++)
		{
			if(h1[ii]<h2[ii])
			{
				dist += h1[ii];
			}
			else
			{
				dist += h2[ii];
			}
			sum = sum+h2[ii];
		}
		dist = dist/sum;
		dist = 1 - dist;
	}
	else //TODO: Re-unification of bins in order to compare the two histograms
	{

	}
	return std::sqrt(dist);

}

float64 dist_color_structure( const std::vector<uint32>& h1_q, const std::vector<uint32>& h2_q)
{

	float64 dist = 0.0;
	uint32 size_1 = h1_q.size();
	uint32 size_2 = h2_q.size();

	std::vector<float64> h1;
	h1.resize(size_1);
	for(uint32 ii=0; ii<size_1; ii++)
	{
		if(h1_q[ii]==0)
		{
			h1[ii]=0.0000000005;
		}
		else if(h1_q[ii]<26)
		{
			h1[ii]=(h1_q[ii]-1)*(0.037-0.000000001)/24.0+0.000000001;
		}
		else if(h1_q[ii]<46)
		{
			h1[ii]=(h1_q[ii]-26)*(0.08-0.037)/19.0+0.037;
		}
		else if(h1_q[ii]<81)
		{
			h1[ii]=(h1_q[ii]-46)*(0.195-0.08)/34.0+0.08;
		}
		else if(h1_q[ii]<116)
		{
			h1[ii]=(h1_q[ii]-81)*(0.32-0.195)/34.0+0.195;
		}
		else
		{
			h1[ii]=(h1_q[ii]-116)*(1-0.32)/139.0+0.32;
		}
	}

	std::vector<float64> h2;
	h2.resize(size_2);
	for(uint32 ii=0; ii<size_2; ii++)
	{
		if(h2_q[ii]==0)
		{
			h2[ii]=0.0000000005;
		}
		else if(h2_q[ii]<26)
		{
			h2[ii]=(h2_q[ii]-1)*(0.037-0.000000001)/24.0+0.000000001;
		}
		else if(h2_q[ii]<46)
		{
			h2[ii]=(h2_q[ii]-26)*(0.08-0.037)/19.0+0.037;
		}
		else if(h2_q[ii]<81)
		{
			h2[ii]=(h2_q[ii]-46)*(0.195-0.08)/34.0+0.08;
		}
		else if(h2_q[ii]<116)
		{
			h2[ii]=(h2_q[ii]-81)*(0.32-0.195)/34.0+0.195;
		}
		else
		{
			h2[ii]=(h2_q[ii]-116)*(1-0.32)/139.0+0.32;
		}
	}

	if(size_1 == size_2)
	{
		for(uint32 ii=0; ii<size_1; ii++)
		{
			dist = dist + std::abs(h1[ii]-h2[ii]);
		}
	}
	else //TODO: Re-unification of bins in order to compare the two histograms
	{

	}

	return dist;
}

float64 dist_cs_euclidean( const std::vector<uint32>& h1_q, const std::vector<uint32>& h2_q)
{

	float64 dist = 0.0;
	uint32 size_1 = h1_q.size();
	uint32 size_2 = h2_q.size();

	std::vector<float64> h1;
	h1.resize(size_1);
	for(uint32 ii=0; ii<size_1; ii++)
	{
		if(h1_q[ii]==0)
		{
			h1[ii]=0.0000000005;
		}
		else if(h1_q[ii]<26)
		{
			h1[ii]=(h1_q[ii]-1)*(0.037-0.000000001)/24.0+0.000000001;
		}
		else if(h1_q[ii]<46)
		{
			h1[ii]=(h1_q[ii]-26)*(0.08-0.037)/19.0+0.037;
		}
		else if(h1_q[ii]<81)
		{
			h1[ii]=(h1_q[ii]-46)*(0.195-0.08)/34.0+0.08;
		}
		else if(h1_q[ii]<116)
		{
			h1[ii]=(h1_q[ii]-81)*(0.32-0.195)/34.0+0.195;
		}
		else
		{
			h1[ii]=(h1_q[ii]-116)*(1-0.32)/139.0+0.32;
		}
	}

	std::vector<float64> h2;
	h2.resize(size_2);
	for(uint32 ii=0; ii<size_2; ii++)
	{
		if(h2_q[ii]==0)
		{
			h2[ii]=0.0000000005;
		}
		else if(h2_q[ii]<26)
		{
			h2[ii]=(h2_q[ii]-1)*(0.037-0.000000001)/24.0+0.000000001;
		}
		else if(h2_q[ii]<46)
		{
			h2[ii]=(h2_q[ii]-26)*(0.08-0.037)/19.0+0.037;
		}
		else if(h2_q[ii]<81)
		{
			h2[ii]=(h2_q[ii]-46)*(0.195-0.08)/34.0+0.08;
		}
		else if(h2_q[ii]<116)
		{
			h2[ii]=(h2_q[ii]-81)*(0.32-0.195)/34.0+0.195;
		}
		else
		{
			h2[ii]=(h2_q[ii]-116)*(1-0.32)/139.0+0.32;
		}
	}

	if(size_1 == size_2)
	{
		for(uint32 ii=0; ii<size_1; ii++)
		{
			dist = dist + (h1[ii]-h2[ii])*(h1[ii]-h2[ii]);
		}
	}
	else //TODO: Re-unification of bins in order to compare the two histograms
	{

	}

	return dist;
}

float64 dist_cs_jeffrey( const std::vector<uint32>& h1_q, const std::vector<uint32>& h2_q)
{

	float64 dist = 0.0;
	uint32 size_1 = h1_q.size();
	uint32 size_2 = h2_q.size();

	std::vector<float64> h1;
	h1.resize(size_1);
	for(uint32 ii=0; ii<size_1; ii++)
	{
		if(h1_q[ii]==0)
		{
			h1[ii]=0.0000000005;
		}
		else if(h1_q[ii]<26)
		{
			h1[ii]=(h1_q[ii]-1)*(0.037-0.000000001)/24.0+0.000000001;
		}
		else if(h1_q[ii]<46)
		{
			h1[ii]=(h1_q[ii]-26)*(0.08-0.037)/19.0+0.037;
		}
		else if(h1_q[ii]<81)
		{
			h1[ii]=(h1_q[ii]-46)*(0.195-0.08)/34.0+0.08;
		}
		else if(h1_q[ii]<116)
		{
			h1[ii]=(h1_q[ii]-81)*(0.32-0.195)/34.0+0.195;
		}
		else
		{
			h1[ii]=(h1_q[ii]-116)*(1-0.32)/139.0+0.32;
		}
	}

	std::vector<float64> h2;
	h2.resize(size_2);
	for(uint32 ii=0; ii<size_2; ii++)
	{
		if(h2_q[ii]==0)
		{
			h2[ii]=0.0000000005;
		}
		else if(h2_q[ii]<26)
		{
			h2[ii]=(h2_q[ii]-1)*(0.037-0.000000001)/24.0+0.000000001;
		}
		else if(h2_q[ii]<46)
		{
			h2[ii]=(h2_q[ii]-26)*(0.08-0.037)/19.0+0.037;
		}
		else if(h2_q[ii]<81)
		{
			h2[ii]=(h2_q[ii]-46)*(0.195-0.08)/34.0+0.08;
		}
		else if(h2_q[ii]<116)
		{
			h2[ii]=(h2_q[ii]-81)*(0.32-0.195)/34.0+0.195;
		}
		else
		{
			h2[ii]=(h2_q[ii]-116)*(1-0.32)/139.0+0.32;
		}
	}

	if(size_1 == size_2)
	{
		for(uint32 ii=0; ii<size_1; ii++)
		{
			if(h1[ii]!=0 && h2[ii]!=0)
			{
				float64 m = (h1[ii]+h2[ii])/2.0;
				dist = dist + h1[ii]*std::log10(h1[ii]/m) + h2[ii]*std::log10(h2[ii]/m);

			}
			else if(h1[ii]!=0)
			{
				float64 m = h1[ii]/2.0;
				dist = dist + h1[ii]*std::log10(h1[ii]/m);

			}
			else if(h2[ii]!=0)
			{
				float64 m = h2[ii]/2.0;
				dist = dist + h2[ii]*std::log10(h2[ii]/m);
			}
		}
	}
	else //TODO: Re-unification of bins in order to compare the two histograms
	{

	}

	return dist;
}

float64 dist_cs_hist_intersection( const std::vector<uint32>& h1_q, const std::vector<uint32>& h2_q)
{

	float64 dist = 0.0;
	uint32 size_1 = h1_q.size();
	uint32 size_2 = h2_q.size();

	std::vector<float64> h1;
	h1.resize(size_1);
	for(uint32 ii=0; ii<size_1; ii++)
	{
		if(h1_q[ii]==0)
		{
			h1[ii]=0.0000000005;
		}
		else if(h1_q[ii]<26)
		{
			h1[ii]=(h1_q[ii]-1)*(0.037-0.000000001)/24.0+0.000000001;
		}
		else if(h1_q[ii]<46)
		{
			h1[ii]=(h1_q[ii]-26)*(0.08-0.037)/19.0+0.037;
		}
		else if(h1_q[ii]<81)
		{
			h1[ii]=(h1_q[ii]-46)*(0.195-0.08)/34.0+0.08;
		}
		else if(h1_q[ii]<116)
		{
			h1[ii]=(h1_q[ii]-81)*(0.32-0.195)/34.0+0.195;
		}
		else
		{
			h1[ii]=(h1_q[ii]-116)*(1-0.32)/139.0+0.32;
		}
	}

	std::vector<float64> h2;
	h2.resize(size_2);
	for(uint32 ii=0; ii<size_2; ii++)
	{
		if(h2_q[ii]==0)
		{
			h2[ii]=0.0000000005;
		}
		else if(h2_q[ii]<26)
		{
			h2[ii]=(h2_q[ii]-1)*(0.037-0.000000001)/24.0+0.000000001;
		}
		else if(h2_q[ii]<46)
		{
			h2[ii]=(h2_q[ii]-26)*(0.08-0.037)/19.0+0.037;
		}
		else if(h2_q[ii]<81)
		{
			h2[ii]=(h2_q[ii]-46)*(0.195-0.08)/34.0+0.08;
		}
		else if(h2_q[ii]<116)
		{
			h2[ii]=(h2_q[ii]-81)*(0.32-0.195)/34.0+0.195;
		}
		else
		{
			h2[ii]=(h2_q[ii]-116)*(1-0.32)/139.0+0.32;
		}
	}

	if(size_1 == size_2)
	{
		float64 sum=0.0;
		for(uint32 ii=0; ii<size_1; ii++)
		{
			if(h1[ii]<h2[ii])
			{
				dist += h1[ii];
			}
			else
			{
				dist += h2[ii];
			}
			sum = sum+h2[ii];
		}
		dist = dist/sum;
		dist = 1 - dist;
	}
	else //TODO: Re-unification of bins in order to compare the two histograms
	{

	}

	return dist;
}

} // ns descriptors
} // ns imageplus
