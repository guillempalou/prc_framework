// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file color_structure.test
 */ 

#include <imageplus/descriptors/color/color_structure.hpp> 

BOOST_AUTO_TEST_SUITE ( Descriptors_Color_Structure_Suite );

using namespace imageplus;
using namespace descriptors;

BOOST_AUTO_TEST_CASE( ColorStructure_test)
{    
    ImagePartition<> my_im_part(5,4);
    my_im_part = 1;
    my_im_part[4][3] = 2;
    
    ImageRGB<uint8> my_image(5,4);
    my_image(0)[0][0] = 0;
    my_image(1)[0][0] = 0;
    my_image(2)[0][0] = 0;
    
    my_image(0)[1][0] = 15;
    my_image(1)[1][0] = 20;
    my_image(2)[1][0] = 15;
    
    my_image(0)[2][0] = 255;
    my_image(1)[2][0] = 0;
    my_image(2)[2][0] = 120;
    
    my_image(0)[3][0] = 255;
    my_image(1)[3][0] = 255;
    my_image(2)[3][0] = 255;
    
    my_image(0)[4][0] = 10;
    my_image(1)[4][0] = 10;
    my_image(2)[4][0] = 10;
    
    my_image(0)[0][1] = 20;
    my_image(1)[0][1] = 20;
    my_image(2)[0][1] = 20;
    
    my_image(0)[1][1] = 100;
    my_image(1)[1][1] = 50;
    my_image(2)[1][1] = 200;
    
    my_image(0)[2][1] = 50;
    my_image(1)[2][1] = 100;
    my_image(2)[2][1] = 50;
    
    my_image(0)[3][1] = 10;
    my_image(1)[3][1] = 10;
    my_image(2)[3][1] = 10;
    
    my_image(0)[4][1] = 20;
    my_image(1)[4][1] = 20;
    my_image(2)[4][1] = 20;
    
    my_image(0)[0][2] = 200;
    my_image(1)[0][2] = 200;
    my_image(2)[0][2] = 200;
    
    my_image(0)[1][2] = 0;
    my_image(1)[1][2] = 20;
    my_image(2)[1][2] = 40;
    
    my_image(0)[2][2] = 30;
    my_image(1)[2][2] = 30;
    my_image(2)[2][2] = 30;
    
    my_image(0)[3][2] = 100;
    my_image(1)[3][2] = 50;
    my_image(2)[3][2] = 50;
    
    my_image(0)[4][2] = 200;
    my_image(1)[4][2] = 200;
    my_image(2)[4][2] = 200;
    
    my_image(0)[0][3] = 150;
    my_image(1)[0][3] = 150;
    my_image(2)[0][3] = 150;
    
    my_image(0)[1][3] = 250;
    my_image(1)[1][3] = 250;
    my_image(2)[1][3] = 250;
    
    my_image(0)[2][3] = 5;
    my_image(1)[2][3] = 5;
    my_image(2)[2][3] = 5;
    
    my_image(0)[3][3] = 180;
    my_image(1)[3][3] = 180;
    my_image(2)[3][3] = 180;
    
    my_image(0)[4][3] = 50;
    my_image(1)[4][3] = 50;
    my_image(2)[4][3] = 50;
    
    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    
    partition_type my_part(my_im_part);
    merge_regions(1,2,3,my_part);
    
    ColorStructure<ImageRGB<uint8>,256, 3 > desc;
    desc = calc_descriptor(new ColorStructure<ImageRGB<uint8>,256,3 >(),  my_image, my_part[3]);
    
    std::vector<float64> histogram;
    histogram.resize(256);
    histogram[0] = 187;
    histogram[1] = 187;
    histogram[2] = 221;
    histogram[3] = 255;
    histogram[6] = 72;
    histogram[18] = 72;
    histogram[22] = 119;
    histogram[25] = 187;
    histogram[31] = 187;
    histogram[65] = 187;
    histogram[85] = 255;
    histogram[100] = 187;
    histogram[237] = 187;
    histogram[249] = 153;
    
    
    BOOST_CHECK(desc.value()==histogram);
    
    desc = calc_descriptor(new ColorStructure<ImageRGB<uint8>,256,3 >(),  my_image, my_part[1]);
    
    histogram[6]=0;
    
    BOOST_CHECK(desc.value()==histogram);


}


BOOST_AUTO_TEST_SUITE_END ();
