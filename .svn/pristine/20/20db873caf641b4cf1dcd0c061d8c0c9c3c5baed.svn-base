// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file cholesky.hpp
 *
 * Interface for Cholesky
 */

#ifndef IMAGEPLUS_MATH_NUMERIC_CHOLESKY_HPP
#define IMAGEPLUS_MATH_NUMERIC_CHOLESKY_HPP


#include <imageplus/core.hpp>

namespace imageplus
{
    namespace math
    {
        namespace numeric
        {
            /*!
             * \brief Cholesky Factorization
             *
             * Factorization of the input matrix into ma=L*L' where L is a triangular matrix.
             * The lower triangle of the input matrix is substituted by the corresponding
             * triangular Cholesky factor.
             *
             * \param [in,out] ma : Squared positive definite MultiArray matrix
             *
             * \return true if the input matrix is squared positive definite; otherwise returns false
             *
             * \todo Adequate API of this module
             * \todo Rename several functions so that their functionality is even more clear
             * \todo ADD A CHOLESKY TEST!!!!!
             */
            bool cholesky_factorization (MultiArray<float64,2>& ma) ;

            /*!
             * \brief Cholesky Factorization
             *
             * Factorization of the input matrix into ma=L*L' where L is a triangular matrix.
             *
             * \param[in]  ma  : Squared positive definite MultiArray matrix
             * \param[out] spd : Returns a value different from zero if the factorization is available
             *
             * \return a matrix with the lower Cholesky triangle
             */
            MultiArray<float64,2> cholesky_factorization(const MultiArray<float64,2>& ma, int32 & spd);

            /*!
             * \brief Cholesky Invert
             *
             * Inverse computation using the Cholesky factorization
             * The returned matrix is the inverse of the original matrix (not of ma)
             *
             * \param [in,out] ma : Lower triangular Cholesky factorization
             */
            void cholesky_invert (MultiArray<float64,2> & ma);

            /*!
             * \brief Cholesky Solve Linear System
             *
             * Solves the system Ax=b by means of a Cholesky factorization of A.
             *
             * \param[in]     L : Lower triangular Cholesky factorization of the equation matrix (A).
             * \param[in,out] b : Vector of independent terms. It is used also as output for the solution.
             */
            void cholesky_solve (const MultiArray<float64,2> & L, MultiArray<float64,1> & b);

            /*!
             * \brief Cholesky Determinant
             *
             * Computation of the determinant using the Cholesky factorization
             *
             * \param[in] ma : Input matrix
             *
             * \return the matrix determinant
             */
            float64 cholesky_determinant (const MultiArray<float64,2> & ma);

            /*!
             * \brief Cholesky Factorized Inverse matrix
             *
             * The returned matrix is not the inverse itself but is the inverse of the Lower triangular matrix resulting
             * from the Cholesky factorizaton. This means that I=matrix_in*matrix_out*trans(matrix_out);
             *
             * \param[in]   matrix_in : Input matrix
             * \param[out] matrix_out : Inverse of the Lower triangular Cholesky factorization.
             *
             * \return 0 if the input matrix is squared positive definite; otherwise returns -1
             */
            int32 invert_matrix_cholesky(const MultiArray<float64,2>& matrix_in, MultiArray<float64,2> & matrix_out);
        }
    }
}


#endif
