// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------


//
// - NAME of your tool
//   - This is mandatory
//   - Avoid the character '-', use always '_' 
// - GROUP where your tool belong (tools/GROUP directory)
//   - This is optional
//   - Comment the second definition to not group your tool
//
#define IMAGEPLUS_TOOL_CONFIG_NAME  segmenter
#define IMAGEPLUS_TOOL_CONFIG_GROUP bpt

//
// Include tool_config.hpp header 
//
// Note that it is mandatory to FIRST define the name (and group)
// of your tool, and LATER on include this header.
//
#include <imageplus/toolbox/tool_config.hpp>


//
// ImagePlus headers
//
#include <imageplus/toolbox/segment.hpp>
#include <imageplus/io/readimage.hpp>
#include <imageplus/io/writeimage.hpp>
#include <imageplus/core/convert_colorspace.hpp>
#include <boost/filesystem.hpp>
#include <imageplus/segmentation/label_flatzone.hpp>
#include <imageplus/segmentation/overlay.hpp>


//
// Standard headers
//
#include <iostream>

//
// namespaces
//
using namespace std;
using namespace imageplus;
using namespace toolbox;
using namespace segmentation;

IMAGEPLUS_TOOL_CONFIG_BRIEF()

    "Tool that returns a partition of an image using a BPT.\n";

IMAGEPLUS_TOOL_CONFIG_DESCRIPTION()

    "This tool returns a partition of an image using a BPT.\n";


IMAGEPLUS_TOOL_CONFIG_PARAMETERS()

    int32  N_partition;
    string filename_image;
    string filename_partition;
    string filename_means;
    
IMAGEPLUS_TOOL_CONFIG_DEFAULT_VALUES()

    N_partition = 300;
    filename_partition = "-";
    filename_means = "-";

IMAGEPLUS_TOOL_CONFIG_OPTIONS()

    //
    // Here you have to define your OPTIONS, with a description 
    // and an optional abreviature
    //
    IMAGEPLUS_TOOL_CONFIG_OPTION_ABV( N_partition , "Number of regions in the accuracy partition"     , 'N' );
    IMAGEPLUS_TOOL_CONFIG_OPTION_ABV( filename_partition , "Output prl file"     , 'o' );
    IMAGEPLUS_TOOL_CONFIG_OPTION( filename_means , "Output means image file");

 
IMAGEPLUS_TOOL_CONFIG_FLAGS()

    //
    // Here you have to define your FLAGS, with a description 
    // and an optional abreviature
    //

IMAGEPLUS_TOOL_CONFIG_ARGUMENTS()

    //
    // Here you have to define your ARGUMENTS with a description. 
    // You should put them in the DESIRED ORDER in the command-line
    //
    // Note that an argument that is a vector should be the last and no more
    // argument can be added later. Think: is impossible to parser arguments 
    // afters an unknown size vector!
    // If you need more than one vector, use "options" instead of arguments.
    //
    IMAGEPLUS_TOOL_CONFIG_ARGUMENT( filename_image, "Input image filename" );
 
IMAGEPLUS_TOOL_CONFIG_READ_PARAMETERS()

    //
    // Here you have to read all your parameters
    //
    // DO NOT FORGET THIS STEP!!
    //
    IMAGEPLUS_TOOL_CONFIG_READ( N_partition    );
    IMAGEPLUS_TOOL_CONFIG_READ( filename_image );
    IMAGEPLUS_TOOL_CONFIG_READ( filename_partition );
    IMAGEPLUS_TOOL_CONFIG_READ( filename_means );


 
//
// This is the "main" function of your tool.
//
// You can access to all your parameters (options, flags, and arguments)
// with the "cfg" object (see the code.)
//
// Run the exemple with "--help" to see your configuration.
//
IMAGEPLUS_TOOL_CONFIG_MAIN()
{
	try
	{
	    // Read input image
	    boost::filesystem::path filename_image( cfg.filename_image );
	    string base = boost::filesystem::basename(filename_image);
	    io::ReadImage readImage(filename_image.string());
	    ImageRGB<uint8> my_image;
        readImage >> my_image;

        // ----------------------------------------
        
        // Compute the flatzone partition with or without tolerance, you can choose
        // const FlatZone& base_part = calc_descriptor(new FlatZone(), my_image);
        const FlatZoneHoleFilling& base_part = calc_descriptor(new FlatZoneHoleFilling(9,1000), my_image);
        
        // Number of regions of the flatzone partitions
	    uint32 N_regions = base_part.num_regions();

	    // label_flatzone can give us an initial partition with few regions
	    if(N_regions>(uint32)cfg.N_partition) N_regions = cfg.N_partition;
	    
	    // Compute the partition
	    ImagePartition<> partition;
	    segment(my_image, base_part, N_regions, partition);
	    
        // ----------------------------------------
        
        // Write the partition
	    io::WriteImage writeImage;
	    if(cfg.filename_partition=="-")
	        writeImage.open(base + "-partition.prl");
	    else
	        writeImage.open(cfg.filename_partition);
	    writeImage << partition;



        // Write the image to visualize
        if(cfg.filename_means!="-")
        {
            // Compute the image to visualize
            mean_of_regions(my_image, partition, my_image);
            //overlay_contour(partition, my_image);

            writeImage.open(cfg.filename_means);
            writeImage << my_image;
        }

	    return 0;
	    
	}
	catch(BacktracedImagePlusException e)
	{
		std::cerr << e.what() << std::endl;
		exit(1);
	}
	catch(std::exception e)
	{
		std::cerr << e.what() << std::endl;
		exit(1);
	}
}

//
// This last line is mandatory!
//
IMAGEPLUS_TOOL_CONFIG_END()

