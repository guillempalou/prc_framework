// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//! \file bpt_contours.test
//!
//! Tests for bpt_contours functions
//!
#include <imageplus/core/imagegray.hpp>
#include <imageplus/core/partition.hpp>
#include <imageplus/core/partition_functions.hpp>

#include <imageplus/bpt/analysis/bpt_contours.hpp>

BOOST_AUTO_TEST_SUITE ( BPTContoursSuite );

using namespace imageplus;
using namespace bpt;
using namespace std;

BOOST_AUTO_TEST_CASE( mergings_to_contours_test )
{
    typedef RegionContour<Coord2D<int64> > region_type;

    ImagePartition<> part(2,2);
    part(PARTITION_CHANNEL)[0][0] = 1;  part(PARTITION_CHANNEL)[1][0] = 2;
    part(PARTITION_CHANNEL)[0][1] = 3;  part(PARTITION_CHANNEL)[1][1] = 4;

    Partition<region_type> bpt(part);

    merge_regions(1,2,20, bpt);
    merge_regions(3,4,21, bpt);
    merge_regions(20,21,22, bpt);

    ImageGray<float64> contours;
    std::vector<float64> contour_values(3);
    contour_values[0] = 1;
    contour_values[1] = 2.25;
    contour_values[2] = 3.24;
    mergings_to_contours(bpt, contour_values, contours);

    ImageGray<float64> ground_truth(5,5);
    ground_truth(GRAY_CHANNEL) = 0;
    ground_truth(GRAY_CHANNEL)[1][2] = 3.24;
    ground_truth(GRAY_CHANNEL)[3][2] = 3.24;
    ground_truth(GRAY_CHANNEL)[2][1] = 1;
    ground_truth(GRAY_CHANNEL)[2][3] = 2.25;

    BOOST_CHECK(contours(GRAY_CHANNEL)==ground_truth(GRAY_CHANNEL));
}


BOOST_AUTO_TEST_CASE( mergings_to_contours_merging_index_test )
{
    typedef RegionContour<Coord2D<int64> > region_type;

    ImagePartition<> part(2,2);
    part(PARTITION_CHANNEL)[0][0] = 1;  part(PARTITION_CHANNEL)[1][0] = 2;
    part(PARTITION_CHANNEL)[0][1] = 3;  part(PARTITION_CHANNEL)[1][1] = 4;

    Partition<region_type> bpt(part);

    merge_regions(1,2,20, bpt);
    merge_regions(3,4,21, bpt);
    merge_regions(20,21,22, bpt);

    ImageGray<float64> contours;
    mergings_to_contours(bpt, contours);

    ImageGray<float64> ground_truth(5,5);
    ground_truth(GRAY_CHANNEL) = 0;
    ground_truth(GRAY_CHANNEL)[1][2] = 3;
    ground_truth(GRAY_CHANNEL)[3][2] = 3;
    ground_truth(GRAY_CHANNEL)[2][1] = 1;
    ground_truth(GRAY_CHANNEL)[2][3] = 2;

    BOOST_CHECK(contours(GRAY_CHANNEL)==ground_truth(GRAY_CHANNEL));
}



BOOST_AUTO_TEST_CASE( contours_to_pb_test )
{
    ImageGray<float64> contours(5,5);
    contours(GRAY_CHANNEL) = 0;
    contours(GRAY_CHANNEL)[1][2] = 4;
    contours(GRAY_CHANNEL)[3][2] = 3;
    contours(GRAY_CHANNEL)[2][1] = 1;
    contours(GRAY_CHANNEL)[2][3] = 2;


    // Output with uint8
    ImageGray<uint8> pb_image_uint8;
    contours_to_pb(contours, pb_image_uint8);

    ImageGray<uint8> ground_truth_uint8(2,2);
    ground_truth_uint8(GRAY_CHANNEL)[0][0] = 255; // 4/4*255
    ground_truth_uint8(GRAY_CHANNEL)[0][1] = 127; // 2/4*255
    ground_truth_uint8(GRAY_CHANNEL)[1][0] = 191; // 3/4*255
    ground_truth_uint8(GRAY_CHANNEL)[1][1] =   0;

    BOOST_CHECK(pb_image_uint8(GRAY_CHANNEL)==ground_truth_uint8(GRAY_CHANNEL));

    // Output with float64
    ImageGray<float64> pb_image_float;
    contours_to_pb(contours, pb_image_float);

    ImageGray<float64> ground_truth_float(2,2);
    ground_truth_float(GRAY_CHANNEL)[0][0] = 1; // 4/4
    ground_truth_float(GRAY_CHANNEL)[0][1] = 0.5; // 2/4
    ground_truth_float(GRAY_CHANNEL)[1][0] = 0.75; // 3/4
    ground_truth_float(GRAY_CHANNEL)[1][1] = 0;

    BOOST_CHECK(pb_image_float(GRAY_CHANNEL)==ground_truth_float(GRAY_CHANNEL));
}


BOOST_AUTO_TEST_SUITE_END ();

