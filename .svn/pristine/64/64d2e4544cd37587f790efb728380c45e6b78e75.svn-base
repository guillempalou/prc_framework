// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file multiview.test
//!
//!  Tests for Auxiliar functions of the multiview module
//!

#include <imageplus/multiview.hpp>

BOOST_AUTO_TEST_SUITE ( suite_multiview );

using namespace imageplus;
using namespace imageplus::multiview;
using namespace std;
    
BOOST_AUTO_TEST_CASE ( test_fast_world2image )
{

    Point2D p2d;
    Point3D p3d;
    Camera cam;
    
    cam.read_parameters(string(TEST_DATA_PATH_R) + "/TCameraParameters_cam1.dat");
    
    p3d = Point3D(100.0, 150.0, 50.0);
    
    // calling under test function
    fast_world2image( p3d, cam, p2d);
    
    BOOST_CHECK((p2d[0] - 283.99) < 0.01);
    BOOST_CHECK((p2d[1] - 467.038) < 0.01);

    
    
    
}


BOOST_AUTO_TEST_CASE ( test_images2world )
{
        
    Point3D p3d;
    MultiView<Point2D> mv_points(3);
    MultiView<uint8> is_in_cam(3);
    
    is_in_cam(0) = 1;
    is_in_cam(1) = 1;
    is_in_cam(2) = 1;
              
              
    // TODO: Set input values for testing
    mv_points.cam(0).read_parameters(string(TEST_DATA_PATH_R) + "/TCameraParameters_cam1.dat");
    mv_points.cam(1).read_parameters(string(TEST_DATA_PATH_R) + "/TCameraParameters_cam2.dat");
    mv_points.cam(2).read_parameters(string(TEST_DATA_PATH_R) + "/TCameraParameters_cam3.dat");
    
//    p3d = Point3D(100.0, 150.0, 50.0);
//    
//    fast_world2image( p3d, cams[0], image_points[0]);
//    fast_world2image( p3d, cams[1], image_points[1]);
//    fast_world2image( p3d, cams[2], image_points[2]);
//    
//    cout << "p[0] " << image_points[0][0] << " " << image_points[0][1] << endl;
//    cout << "p[1] " << image_points[1][0] << " " << image_points[1][1] << endl;
//    cout << "p[2] " << image_points[2][0] << " " << image_points[2][1] << endl;
    
    mv_points.view(0) = Point2D(283.99, 467.038);
    mv_points.view(1) = Point2D(187.197, 313.866);
    mv_points.view(2) = Point2D(313.603 , 172.505);

    // calling under test function
    p3d = images2world(mv_points, is_in_cam);
    
    
//    cout << "p3d " << p3d[0] << " " << p3d[1] << " " << p3d[2] <<  endl;
    
    
    BOOST_CHECK((p3d[0] - 100.112) < 0.1);
    BOOST_CHECK((p3d[1] - 150.13) < 0.1);
    BOOST_CHECK((p3d[2] - 50.0443) < 0.1);
}


BOOST_AUTO_TEST_CASE ( test_fundamental_matrix )
{
    MultiArray<float64,2> m;
    Camera cam1, cam2;

    cam1.read_parameters(string(TEST_DATA_PATH_R) + "/TCameraParameters_cam1.dat");
    cam2.read_parameters(string(TEST_DATA_PATH_R) + "/TCameraParameters_cam2.dat");
    
    m = fundamental_matrix( cam1, cam2 );
    
//    cout << endl;
//    for( int x = 0; x < 3; x++ )
//    {
//        for( int y = 0; y < 3; y++ )
//        {
//            cout << m[y][x] << " ";
//        }
//        cout << endl;
//    }
//    cout << endl;
    
    BOOST_CHECK(m[0][0] - 16.4268 < 0.01 );       BOOST_CHECK(m[1][0] + 188.6456 > -0.01 );   BOOST_CHECK(m[2][0] + 29820.7466 > -0.01 );
    BOOST_CHECK(m[0][1] + 215.2698 > -0.01 );     BOOST_CHECK(m[1][1] + 18.0160 > -0.01 );    BOOST_CHECK(m[2][1] - 229344.8249 < 0.1 );
    BOOST_CHECK(m[0][2] + 11973.644267 > -0.01 ); BOOST_CHECK(m[1][2] + 73580.6382 > -0.01 ); BOOST_CHECK(m[2][2] - 8050910.7816 < 0.1 );
}


BOOST_AUTO_TEST_CASE ( test_epipolar_line_from_fundamental_matrix_undistorted )
{    
    Point3D line;
    Point2D x1(300, 300);
    MultiArray<float64,2> m(3, 3);
    
    m[0][0] = 16.4268; m[1][0] = -188.6456; m[2][0] = -29820.7466;
    m[0][1] = -215.2698; m[1][1] = -18.0160; m[2][1] = 229344.8249;
    m[0][2] = -11973.644267; m[1][2] = -73580.6382; m[2][2] = 8050910.7816;
    
    line = epipolar_line_from_fundamental_matrix_undistorted(x1, m);

    BOOST_CHECK(line[0] + 0.4553 > -0.01);
    BOOST_CHECK(line[1] - 0.8904 < 0.01);
    BOOST_CHECK(line[2] + 98.4186 > -0.01);
}

BOOST_AUTO_TEST_SUITE_END ();
