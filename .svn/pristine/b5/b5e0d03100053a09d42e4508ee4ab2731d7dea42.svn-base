/*
 * trajectory.hpp
 *
 *  Created on: Sep 12, 2012
 *      Author: guillem
 */

#ifndef TRAJECTORY_HPP_
#define TRAJECTORY_HPP_

#include <imageplus/core/regions/hierarchical_region.hpp>
#include <imageplus/core/regions/coord_container_3d.hpp>

namespace imageplus {
	namespace video_segmentation {

	//! A trajectory is specializ
	template<class VideoModel>
	class Trajectory : public HierarchicalRegion<typename VideoModel::coord_type> {

	public:

		typedef HierarchicalRegion<typename VideoModel::coord_type> RegionBaseType;

		//! coordinate type
		typedef typename VideoModel::coord_type 			coord_type;
		typedef std::vector<coord_type>						trajectory_coordinates_type;

		typedef typename RegionBaseType::identifier_type	identifier_type;

		Trajectory(Trajectory& child1, Trajectory& child2, identifier_type label  = -1 ) : RegionBaseType(&child1,&child2, label), _begin_frame(1e9), _end_frame(-1)  {
			_begin_frame = std::min(child1.frame_begin(), child2.frame_begin());
			_end_frame = std::max(child1.frame_end(), child2.frame_end());
		}

		//!
		//! \brief Constructor with the dimension of the Coords
		//!
		//! \param[in] label  : Label of the region in the base partition of the Partition
		inline
		Trajectory(identifier_type label) : RegionBaseType(label), _begin_frame(1e9), _end_frame(-1) {
		}

		//!
		//! \brief Constructor with the dimension of the Coords
		//!
		//! \param[in] initial_size : Initial number of coordinates
		//! \param[in] label  : Label of the region in the base partition of the Partition
		inline
		Trajectory(identifier_type label, std::size_t initial_size) : RegionBaseType(initial_size,label), _begin_frame(1e9), _end_frame(-1) {
		}

		/*!
		 * Constructor from children
		 *
		 * \param[in] child1 : Pointer to one of the child regions that formed it via a merging process
		 * \param[in] child2 : Pointer to the other child
		 * \param[in] label  : Label of the region in the base partition of the Partition (by def. NOT_ASSGNED)
		 */
		inline Trajectory(identifier_type label, Trajectory&  child1, Trajectory& child2) : RegionBaseType(label, (RegionBaseType *)&child1, (RegionBaseType *)&child2) {
			_begin_frame = std::min(child1.frame_begin(), child2.frame_begin());
			_end_frame = std::max(child1.frame_end(), child2.frame_end());
		}

		int64 frame_begin() {
			return _begin_frame;
		}

		int64 frame_end() {
			return _end_frame;
		}

		int64 length() {
			return _end_frame - _begin_frame + 1;
		}

		void add_coordinate(const coord_type& coord) {
			RegionBaseType::add_coordinate(coord);
			_begin_frame = std::min(_begin_frame, coord(2));
			_end_frame = std::max(_end_frame, coord(2));
		}

	protected:

		int64 					_begin_frame;
		int64					_end_frame;
	};

	}
}


#endif /* TRAJECTORY_HPP_ */
