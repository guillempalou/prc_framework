// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file mifs.test
//!



#include <iostream>
#include <imageplus/core.hpp>
#include <imageplus/math/statistics/random_generators.hpp>
#include <imageplus/machine_learning/feature_selection/mifs.hpp>



BOOST_AUTO_TEST_SUITE ( MIFSSuite );

using namespace imageplus;
using namespace imageplus::math;
using namespace imageplus::math::statistics;
using namespace imageplus::machine_learning::feature_selection;

BOOST_AUTO_TEST_CASE ( Mutual_Information_Feature_Selector)
{
   
    //Example (from Kwak and Choi)
    const std::size_t exp_size=1000;

    std::vector < uint64 > dim_extents(3,exp_size);

    RandomVariableData< float64, 3, 1 > class_data(dim_extents);
    
    std::vector < std::size_t > selected;
   
    std::vector < boost::array<float64, exp_size> > f(3);
    MultiArray < float64, 1 > zclass(1000);
    float64 X, Y;
    
    for (std::size_t i=0; i<exp_size; ++i)
    {
     	X=rand_uniform(-0.5, 0.5);
     	Y=rand_uniform(-0.5, 0.5);
     	f[0][i]=X; f[1][i]=X-Y; f[2][i]=Y*Y;
     	zclass[i]= (X+0.2*Y) > 0.0 ? 1 : 0;
    }
    //Compute MI for the first feature
    float64 min, max;
    
    for (std::size_t i=0; i<3; ++i)
    {
	    max=*(std::max_element(&f[i][0], &f[i][0]+f[i].size()));
	    min=*(std::min_element(&f[i][0], &f[i][0]+f[i].size()));
	    for (std::size_t j=0; j<exp_size; ++j)
	    {
	    	class_data(i)[j]=(f[i][j]-min)/(max-min); //Normalized features
	    }
    }
    
    //As reported in "Improved Mutual Information Feature Selector 
    //for Neural Networks in Supervised Learning" by Kwak and Choi
    for (float64 beta=0.0 ; beta < 1.5 ; beta=beta+0.2)
    {
    	selected=mifs(class_data, zclass, 10, beta, 2, 2);
    	BOOST_CHECK_EQUAL( selected[0], static_cast<std::size_t> (0) );
    	BOOST_CHECK_EQUAL( selected[1], static_cast<std::size_t> (1) );
    }

}

BOOST_AUTO_TEST_SUITE_END();
