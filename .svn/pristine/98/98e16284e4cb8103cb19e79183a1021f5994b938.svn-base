/*!
\page core The Core Module

\section toc Table of Contents

- \ref intro
- \ref types
- \ref classes
- \ref looping 
  - \ref regions
  - \ref neighbours
- \ref partition 
- \ref descriptors 

\section intro Introduction

The basic and main namespace is \c %imageplus, i.e., \ref imageplus "the namespace of the core module", and the parent namespace of the rest of the modules.

It contains:

- Cross-platform and 64bits ready \ref ImagePlusTypes "data types": uint8, float32...  
- The main classes of the platform: \ref imageplus::MultiArray "MultiArray" and \ref imageplus::ImaVol "ImaVol"
- The main subclasses from ImaVol: \ref imageplus::Image "Image" and \ref imageplus::Volume "Volume"
- Different ImaVol subclasses for different color spaces: \ref imageplus::ImageRGB "ImageRGB", \ref imageplus::ImageYUV "ImageYUV", \ref imageplus::VolumeGray "VolumeGray"... 
- The main exception class: \ref imageplus::ImagePlusError "ImagePlusError"
- Other basic classes like \ref imageplus::Coord "Coord", \ref imageplus::Point "Point"...
- \ref DebugMacros "Debug macros"

\section types ImagePlus Types

ImagePlus is a cross-platform and 64bits ready platform.

Because C++ is a static-type language we need to use specific types that match exactly in the different platforms. \n
For this reason <b>we should use the \ref ImagePlusTypes "imageplus data types" (int16, uint64, float32...)</b>, and not the old C/C++ types (int, float...) 

\section classes The main classes of ImagePlus

\subsection multiarray The MultiArray class

\todo Add MultiArray basic documentation and a hello_multiarray.cpp example!!!


\subsection imavol The ImaVol class


A unique class named \ref imageplus::ImaVol "ImaVol" provides the basic structure for both \ref imageplus::Image "image" and \ref imageplus::Volume "volume" classes.\n
All images and volumes are derived from the ImaVol class. \n 
This way, common functions can be defined to the %ImaVol class and they will work for all other subclasses (through polymorphism).

As you can see in the \ref imageplus::ImaVol "ImaVol class reference", it is a template class with the following template parameters:
- T : data Type: uint8, int16...
- N : Number of channels: 1 for gray types, 3 for rgb...
- D : Dimensions: 2 for images, 3 for volumes...

Here you can see a diagram with the main ImaVol subclasses:

\image html classes.png


Now you should read these simple examples about ImaVol usage:

- \ref hello_imavol.cpp           "How to create an initialize different types of ImaVol"
- \ref hello_imavol_colors.cpp    "How to use Colors"
- \ref hello_imavol_iterators.cpp "How to loop inside any ImaVol with iterators"


\section looping Looping methods

As you have seen in the \ref hello_imavol_iterators.cpp "previous example", the standard way to loop is using iterators. \n
But an important part of Image Processing is to define how to loop in an Image, so we need more!

Basically we need:

- A way to define and loop only in a specific \ref regions "Region of the Image" (or Volume)  
- A way to define and loop in a \ref neighbours "Neighbourhood of a Pixel" (or voxel)  


\subsection regions Looping in ImaVol Regions


Basically Regions are just containers of pixel/voxel positions.

There is no class named \c Region, but just a \c RegionConcept (i.e. a Generic Programming Concept). \n
So, you can define your own region classes, i.e. \c RegionModels.

Anyway there are some basic RegionModels ready to be used: \ref imageplus::ImaVolMask "ImaVolMask", \ref imageplus::GeometricShape "GeometricShape"... \n
Note that these classes are totally different, but both can be used as \c "Region objects" (i.e. \c RegionModels).


Now you should read and \ref hello_regions.cpp "example of how to use basic types of Regions".


\todo Concepts definitions and PositionConcept explanation!!!!!
 
\subsection neighbours Looping in a Pixel/Voxel Neighbourhood 

\todo Add Neigbourhood basic documentation and a hello_neighbourd.cpp example!!!


\section partition The Partition class

As a meeting point of some of the concepts explained before, the \ref imageplus::Partition "Partition" class 
eases working with partitions, and in general, with any region-oriented algorithm.
To do so, Partition creates the set of regions of the partition and handles the way to move
through the neighboring regions.

To get started with this class, please refer to this \ref hello_partition.cpp "example".  


\section descriptors Descriptors

Now that we know how to define a region and a partition, you may be interested in \e "computing something" 
about a region, or in other words, describe the region in any way.
In ImagePlus the way to do it is using Descriptors.

To clarify ideas, a descriptor can be the area of the region, its mean color, its bounding box, the power 
of its wavelets coefficients, the MPEG-7 Contour Shape Descriptor, etc.

To learn how to compute descriptors, please see this \ref hello_calculate_descriptors.cpp "example".

To learn how to read descriptors, which have been previously computed, from an XML file, please see \ref hello_read_descriptors.cpp "hello_read_descriptors".

A list of some of the implemented descriptors may be found \ref imageplus::descriptors "here".

To learn ho to create a new descriptor, please refer to the following \ref hello_create_descriptors.cpp "example".
*/
