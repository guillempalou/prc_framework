// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file imageriq.hpp
//!
//!  Interface for ImageRIQ class
//!

#ifndef IMAGEPLUS_CORE_IMAGERIQ_HPP
#define IMAGEPLUS_CORE_IMAGERIQ_HPP

#include <imageplus/core/image.hpp>


namespace imageplus
{
    //!
    //! \brief base class to RIQ images
    //!
    //! This is a hybrid colorspace intended for face recognition applications
    //! The declaration should be:
    //! \code
    //!    ImageRIQ<uint8> a(4,4);
    //! \endcode
    //!
    //! This creates a ImageRIQ of uint8 values with size 4x4.
    //!
    //! The access of a pixel is done as the ImaVol class:
    //! \code
    //!    a(I_CHANNEL)[1][3] = 0 // Access to pixel (x=1,y=3) in the red channel
    //! \endcode
    //! or
    //! \code
    //!    a(Q_CHANNEL)[1][3] = 0 // Access to pixel (x=1,y=3) in the green channel
    //! \endcode
    //!
    //! See file multiarray.hpp to a more detail explanation on access
    //!
    //! \tparam T is the type of the data
    //!
    //! \author Antonella Battisti
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 05-04-2010
    //!
    template<typename T>
    class ImageRIQ :public Image <T,3>
    {
        public:

            //!
            //! \brief Default constructor
            //!
            ImageRIQ();

            //!
            //! \brief Constructor for 2 dimensions
            //!
            //! \param[in] x : X size of the image
            //! \param[in] y : Y size of the image
            //!
            ImageRIQ(uint64 x, uint64 y);

            //!
            //! \brief Copy constructor for ImaVol
            //!
            //! \param[in] copy : Creates a copy (including values) of this imavol
            //!
            ImageRIQ(const ImaVol<T,3,2>& copy);

            //!
            //! \brief Copy constructor for Image
            //!
            //! \param[in] copy : Creates a copy (including values) of this image
            //!
            ImageRIQ(const Image<T,3>& copy);

            //!
            //! \brief Copy constructor for ImageRIQ
            //!
            //! \param[in] copy : Creates a copy (including values) of this image
            //!
            ImageRIQ(const ImageRIQ<T>& copy);

            //!
            //! \brief Constructor with a vector of dimentions
            //!
            //! \param[in] dims: Vector of vectors with the dimension of each channel
            //!
            explicit 
            ImageRIQ(const std::vector< std::vector<uint64> >& dims);

            //!
            //! \brief Destructor
            //!
            virtual 
            ~ImageRIQ();

            //!
            //! \brief Assignment operator for ImaVol
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this imavol
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            ImageRIQ& operator=( const ImaVol<T,3,2>& copy );

            //!
            //! \brief Assignment operator for Image
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this Image
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            ImageRIQ& operator=( const Image<T,3>& copy );

            //!
            //! \brief Assignment operator for ImageRIQ
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this ImageRIQ
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            ImageRIQ& operator=( const ImageRIQ<T>& copy );

            //!
            //! \brief Assigment operator for values (fills the entire image)
            //!
            //! \param[in] val : Value to fill all pixel
            //!
            //! \return Reference to value to a = b = 1; works
            //!
            const T& operator=( const T& val );
    };
}

#endif // IMAGEPLUS_CORE_IMAGERIQ_HPP
