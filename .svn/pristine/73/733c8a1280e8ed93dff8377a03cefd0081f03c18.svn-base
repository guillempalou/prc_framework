// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file async_sender_advanced.cpp
 *
 * \author Albert Gil
 */

#define IMAGEPLUS_CLIENT_CONFIG_NAME  async_sender_advanced
#include <imageplus/toolbox/client_config.hpp>

/*
 * ImagePlus headers
 */
#include <imageplus/core.hpp>
#include <imageplus/io/capturev4l2.hpp>
#include <imageplus/math/statistics/random_generators.hpp>

/*
 * Std+Boost headers
 */
#include <boost/thread/thread.hpp>
#include <boost/bind.hpp>

/*
 * namespaces config
 */
using namespace imageplus;
using namespace imageplus::io;
using namespace imageplus::math::statistics;
using namespace imageplus::toolbox;
using namespace std;


void flow_sender( DataOutputFlow& flow, std::string id, int32 stime )
{
    Coord2D<> *  bdata;
    Timestamp ts;

    CLIENT_CONFIG_WHILE_RUNNING()
    {
        /*
         * Get output buffer from the flow
         */
        flow->get_buffer(bdata);

        /*
         * Capture or process the data to be sent and its Timestamp
         */
        ts = clock_ts();

        sleep(stime); // to emulate different frame-rate (processing time)

        /*
         * Fills up the output buffer
         */
        *bdata = Coord2D<> (rand_uniform()*768, rand_uniform()*576);

        //
        // Send and release the output buffer
        //
        std::cout << "Sending ID: " << id << " Coord2D: "<< *bdata << std::endl;
        send_buffer(flow, ts);
    }
}

void flow_video_sender( VideoOutputFlow&   flow,
                        const std::string& device_name,
                        std::size_t        width,
                        std::size_t        height )
{
    CaptureV4L2     cap ( device_name, width, height, 25, V4L2_PIX_FMT_RGB32 );
    ImageRGB<uint8> rgb ( width, height);
    std::size_t     bsize = width*height*3;
    uint8*     buffer_video;
    cap.start();

    CLIENT_CONFIG_WHILE_RUNNING()
    {
        try
        {
            cap >> rgb;
        }
        catch( ImagePlusError& e )
        {
            std::cout << "Error capturing frame: " << e.what() << std::endl;
        }

        //
        // Get output buffer from the flow:
        //
        Timestamp ts = clock_ts();

        flow->get_buffer(buffer_video);

        //
        // Fills up the output buffer
        //
        //rgb.export_to(buffer_video, cfg.width, cfg.height, RGB);
        export_to(rgb, buffer_video, bsize, RGB);

        //
        // Send and release the output buffer
        //
        send_buffer(flow, ts);
    }

    // End client
    cap.stop();
}


IMAGEPLUS_CLIENT_CONFIG_BRIEF()

    "This client is just and example about how to send multiple flows asynchronously\n";

IMAGEPLUS_CLIENT_CONFIG_DESCRIPTION()

    "This client is just and example about how to send multiple flows asynchronously\n";

IMAGEPLUS_CLIENT_CONFIG_PARAMETERS()

    // options
    string       device_name;
    uint16       use_every_N_frames;
    string       calibration_file;
    std::size_t  width;
    std::size_t  height;

	// flags

    // arguments

    // flows
    DataOutputFlow flow1;
    DataOutputFlow flow2;

    VideoOutputFlow video;

IMAGEPLUS_CLIENT_CONFIG_DEFAULT_VALUES()

    //
    // Here you should assign default values to your parameters
    //
    device_name        = "/dev/video0";
    use_every_N_frames = 1;
    calibration_file   = "no_file";
    width              = 768;
    height             = 576;

IMAGEPLUS_CLIENT_CONFIG_OPTIONS()

    //
    // Here you have to define your OPTIONS, with a description
    // and an optional abreviature
    //
    CLIENT_CONFIG_OPTION_ABV( device_name        , "device to connect"      , 'd' );
    CLIENT_CONFIG_OPTION_ABV( use_every_N_frames , "to discard N frames"    , 'N' );
    CLIENT_CONFIG_OPTION_ABV( calibration_file   , "the calibration file"   , 'c' );
    CLIENT_CONFIG_OPTION_ABV( width              , "image width"            , 'w' );
    CLIENT_CONFIG_OPTION_ABV( height             , "image height"           , 'h' );

IMAGEPLUS_CLIENT_CONFIG_FLAGS()

    //
    // Here you have to define your FLAGS, with a description
    // and an optional abreviature
    //

IMAGEPLUS_CLIENT_CONFIG_ARGUMENTS()

    //
    // Here you have to define your ARGUMENTS with a description.
    // You should put them in the DESIRED ORDER in the command-line
    //
    // Note that an argument that is a vector should be the last and no more
    // argument can be added later. Think: is impossible to parser arguments
    // afters an unknown size vector!
    // If you need more than one vector, use "options" instead of arguments.
    //

IMAGEPLUS_CLIENT_CONFIG_FLOWS()

    //
    // Here you have to define your FLOWS
    //
    CLIENT_CONFIG_DATA_OUT ( flow1, Coord2D<>  );
    CLIENT_CONFIG_DATA_OUT ( flow2, Coord2D<>  );
    CLIENT_CONFIG_VIDEO_OUT( video );

IMAGEPLUS_CLIENT_CONFIG_READ_PARAMETERS()

    //
    // Here you have to read all your parameters
    //
    // DO NOT FORGET THIS STEP!!
    //

IMAGEPLUS_CLIENT_CONFIG_METADATAS()

    //
    // Here you can get the metadatas from the input flows
    // And you MUST set the metadata of your output flows
    //
    // Note that from now on you can access to the previously
    // defined config parameters with the "cfg" object.
    //
    VideoMetadata video_metadata;

    // Define output metadata flow as RGB
    video_metadata.imageFormat = SFC::VideoMetadata::packedRGB;
    video_metadata.dataType    = SFC::VideoMetadata::type_8u;
    video_metadata.frameRate   = 25/cfg.use_every_N_frames;
    video_metadata.width       = cfg.width;
    video_metadata.height      = cfg.height;
    strncpy(video_metadata.calibrationFile, cfg.calibration_file.c_str(), 255 );

    cfg.video->setMetadata( video_metadata );

//
// This is the "main" function of your client.
//
// You can access to all your parameters (options, flags, and arguments)
// with the "cfg" object (see the code.)
//
// Run the client with "--help" to see your configuration.
//
IMAGEPLUS_CLIENT_CONFIG_MAIN()
{
    //
    // Here you can declare and initialize the variables that
    // will be used in the main loop
    //

    //Configuring threads
    boost::thread thread_flow1( boost::bind( &flow_sender, cfg.flow1, "flow1", 1 ));
    boost::thread thread_flow2( boost::bind( &flow_sender, cfg.flow2, "flow2", 3 ));
    boost::thread thread_flow3( boost::bind( &flow_video_sender, cfg.video, cfg.device_name, cfg.width, cfg.height ));

    // Waiting for the end of the threads ("running-loop threads")
    thread_flow1.join();
    thread_flow2.join();
    thread_flow3.join();


    return (0);
}

//
// This last line is mandatory!
//
IMAGEPLUS_CLIENT_CONFIG_END()
