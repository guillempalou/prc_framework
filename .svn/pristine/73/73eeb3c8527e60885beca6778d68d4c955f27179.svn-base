// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file convolution.test
//!
//!  tests for several numeric functions
//!

#include <iostream>
#include <imageplus/core.hpp>
#include <imageplus/math/numeric/kernel.hpp>


#include <boost/test/floating_point_comparison.hpp>



BOOST_AUTO_TEST_SUITE ( kernelSuite );

using namespace std;
using namespace imageplus;
using namespace imageplus::math::numeric;



BOOST_AUTO_TEST_CASE( kernel_test )
{
    MultiArray<float64,1>  k1m(3);
    k1m[0] =  -3;
    k1m[1] =   2;
    k1m[2] =   1;

    Coord<int64,1> ori1(1);

    // Call constructor (1D), reverse = true
    Kernel<1> k1(k1m, ori1);
    BOOST_CHECK (k1.reverse()  == true);

    Kernel<1> k1f(k1m, Coord<int64,1>(1), false);
    BOOST_CHECK (k1f.reverse() == false);


    BOOST_CHECK (k1.num_elements() == 3); 


    Coord<int64,1> c0(-1);
    Coord<int64,1> c1( 0);
    Coord<int64,1> c2( 1);

    BOOST_CHECK (k1.coord(0) == c0);
    BOOST_CHECK (k1.coord(1) == c1);
    BOOST_CHECK (k1.coord(2) == c2);

    BOOST_CHECK(k1.weight(0) ==  1);
    BOOST_CHECK(k1.weight(1) ==  2);
    BOOST_CHECK(k1.weight(2) == -3);

    BOOST_CHECK (k1.origin() == ori1);
    
    BOOST_CHECK (k1.dims(0) == 3);

    boost::array<size_type,1> dms;
    dms[0] = 3;
    BOOST_CHECK (k1.dims() == dms);


    BOOST_CHECK (k1.pad_size(0, 0) == 1);
    BOOST_CHECK (k1.pad_size(0, 1) == 1);


    std::pair<uint64,uint64> ps1;
    ps1.first = 1; ps1.second = 1;
    BOOST_CHECK (k1.pad_size(0) == ps1);
        
    boost::array<std::pair<uint64,uint64>, 1> ps;
    ps[0] = ps1;
    BOOST_CHECK (k1.pad_size() == ps);


    // Same, for 2D kernel
    MultiArray<float64,2> k2d_ma(3,4);


    k2d_ma[0][0] =  1;     k2d_ma[1][0] =  1;    k2d_ma[2][0] =  1;
    k2d_ma[0][1] =  0;     k2d_ma[1][1] =  0;    k2d_ma[2][1] =  0;
    k2d_ma[0][2] = -1;     k2d_ma[1][2] = -1;    k2d_ma[2][2] = -1;
    k2d_ma[0][3] = -1;     k2d_ma[1][3] = -1;    k2d_ma[2][3] = -1;


    Coord<int64,2> ori2(1,1);

    Kernel<2> k2(k2d_ma, ori2, true);

    BOOST_CHECK (k2.reverse()  == true);
    BOOST_CHECK (k2.num_elements() == 12); 
    BOOST_CHECK (k2.origin() == ori2);

    BOOST_CHECK (k2.dims(0) == 3);
    BOOST_CHECK (k2.dims(1) == 4);

    boost::array<size_type,2> dms2;
    dms2[0] = 3; dms2[1] = 4;
    BOOST_CHECK (k2.dims() == dms2);


    BOOST_CHECK (k2.pad_size(0, 0) == 1);
    BOOST_CHECK (k2.pad_size(0, 1) == 1);
    BOOST_CHECK (k2.pad_size(1, 0) == 1);
    BOOST_CHECK (k2.pad_size(1, 1) == 2);

    std::pair<uint64,uint64> ps2;
    ps2.first = 1; ps2.second = 1;
    std::pair<uint64,uint64> ps3;
    ps3.first = 1; ps3.second = 2;

    BOOST_CHECK (k2.pad_size(0) == ps2);
    BOOST_CHECK (k2.pad_size(1) == ps3);
        



    Coord<int64,2> c20(-1,-1);
    Coord<int64,2> c21( 0,-1);
    Coord<int64,2> c22( 1,-1);
    Coord<int64,2> c23(-1, 0);
    Coord<int64,2> c24( 0, 0);
    Coord<int64,2> c25( 1, 0);
    Coord<int64,2> c26(-1, 1);
    Coord<int64,2> c27( 0, 1);
    Coord<int64,2> c28( 1, 1);
    Coord<int64,2> c29(-1, 2);
    Coord<int64,2> c2a( 0, 2);
    Coord<int64,2> c2b( 1, 2);


    BOOST_CHECK (k2.coord(0)  == c20);
    BOOST_CHECK (k2.coord(1)  == c21);
    BOOST_CHECK (k2.coord(2)  == c22);
    BOOST_CHECK (k2.coord(3)  == c23);
    BOOST_CHECK (k2.coord(4)  == c24);
    BOOST_CHECK (k2.coord(5)  == c25);
    BOOST_CHECK (k2.coord(6)  == c26);
    BOOST_CHECK (k2.coord(7)  == c27);
    BOOST_CHECK (k2.coord(8)  == c28);
    BOOST_CHECK (k2.coord(9)  == c29);
    BOOST_CHECK (k2.coord(10) == c2a);
    BOOST_CHECK (k2.coord(11) == c2b);

    // Reversed kernel
    BOOST_CHECK(k2.weight(0)  == -1);
    BOOST_CHECK(k2.weight(1)  == -1);
    BOOST_CHECK(k2.weight(2)  == -1);
    BOOST_CHECK(k2.weight(3)  == -1);
    BOOST_CHECK(k2.weight(4)  == -1);
    BOOST_CHECK(k2.weight(5)  == -1);
    BOOST_CHECK(k2.weight(6)  ==  0);
    BOOST_CHECK(k2.weight(7)  ==  0);
    BOOST_CHECK(k2.weight(8)  ==  0);
    BOOST_CHECK(k2.weight(9)  ==  1);
    BOOST_CHECK(k2.weight(10) ==  1);
    BOOST_CHECK(k2.weight(11) ==  1);


    boost::array<std::pair<uint64,uint64>, 2> ps2d;
    ps2d[0] = ps2;
    ps2d[1] = ps3;
    BOOST_CHECK (k2.pad_size() == ps2d);



}


BOOST_AUTO_TEST_SUITE_END ();
