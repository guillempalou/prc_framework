// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file bbox.test
//!
//!  Tests for the padding functions 
//!

#include <imageplus/core/bbox.hpp>
#include <imageplus/core/coord.hpp>
#include <imageplus/core/padding.hpp>
#include <imageplus/core/multiarray_ostream.hpp>


BOOST_AUTO_TEST_SUITE ( suite_padding );

using namespace imageplus;

//typedef boost::mpl::list<uint8,int16,int64,float64> DataTypes;
typedef boost::mpl::list<int64> DataTypes;

BOOST_AUTO_TEST_CASE_TEMPLATE ( test_padding, T, DataTypes )
{

    // Test for 1D

    MultiArray<T,1> ma1_1d(5); 
    ma1_1d = 5;

    MultiArray<T,1> out1_1d;
    out1_1d = zero_padding(ma1_1d, 1);

    MultiArray<T,1> res1_1d(7);
    res1_1d = 5;
    res1_1d[0] = 0;
    res1_1d[6] = 0;

    BOOST_CHECK(out1_1d == res1_1d);



    MultiArray<T,1> out2_1d;
    out2_1d = remove_padding(out1_1d, 1);

    BOOST_CHECK(out2_1d == ma1_1d);



    MultiArray<T,1> out3_1d;
    std::pair<uint64,uint64> pa (1,2);

    MultiArray<T,1> res3_1d(8);
    res3_1d = 5;
    res3_1d[0] = 3;
    res3_1d[6] = 3;
    res3_1d[7] = 3;

    out3_1d = asymmetric_padding (ma1_1d, pa, (uint64)0, static_cast<T>(3));

    BOOST_CHECK (out3_1d == res3_1d);


    MultiArray<T,1> out4_1d;
    out4_1d = remove_asymmetric_padding (out3_1d, pa, (uint64)0);

    BOOST_CHECK (out4_1d == ma1_1d);


    // Test for 2D
    MultiArray<T,2> ma1_2d(3,3); 
    ma1_2d = 5;

    MultiArray<T,2> out1_2d;
    out1_2d = zero_padding(ma1_2d, 1);

    MultiArray<T,2> res1_2d(5,5);
    res1_2d = 5;
    res1_2d[0][0] = 0;
    res1_2d[1][0] = 0;
    res1_2d[2][0] = 0;
    res1_2d[3][0] = 0;
    res1_2d[4][0] = 0;

    res1_2d[0][1] = 0;
    res1_2d[4][1] = 0;
    res1_2d[0][2] = 0;
    res1_2d[4][2] = 0;
    res1_2d[0][3] = 0;
    res1_2d[4][3] = 0;


    res1_2d[0][4] = 0;
    res1_2d[1][4] = 0;
    res1_2d[2][4] = 0;
    res1_2d[3][4] = 0;
    res1_2d[4][4] = 0;

    BOOST_CHECK(out1_2d == res1_2d);


    MultiArray<T,2> out2_2d;
    out2_2d = remove_padding(out1_2d, 1);

    BOOST_CHECK(out2_2d == ma1_2d);


    MultiArray<T,2> out2b_2d;
    remove_padding(out1_2d, 1, out2b_2d);

    BOOST_CHECK(out2b_2d == ma1_2d);


    // Test using same object for in and out
    remove_padding(out1_2d, 1, out1_2d);

    BOOST_CHECK(out1_2d == ma1_2d);



    MultiArray<T,2> out3_2d;

    MultiArray<T,2> res3_2d(6,3);
    res3_2d = 5;
    res3_2d[0][0] = 3;
    res3_2d[4][0] = 3;
    res3_2d[5][0] = 3;

    res3_2d[0][1] = 3;
    res3_2d[4][1] = 3;
    res3_2d[5][1] = 3;

    res3_2d[0][2] = 3;
    res3_2d[4][2] = 3;
    res3_2d[5][2] = 3;

    out3_2d = asymmetric_padding (ma1_2d, pa, (uint64)0, static_cast<T>(3));

    BOOST_CHECK (out3_2d == res3_2d);

    MultiArray<T,2> out4_2d;
    out4_2d = remove_asymmetric_padding (out3_2d, pa, (uint64)0);

    BOOST_CHECK (out4_2d == ma1_2d);



}

BOOST_AUTO_TEST_SUITE_END ();
