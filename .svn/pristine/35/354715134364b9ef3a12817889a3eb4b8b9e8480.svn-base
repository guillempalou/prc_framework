// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file instance.hpp
//!
//!  Instance
//!


#ifndef IMAGEPLUS_SEMANTIC_INSTANCE_HPP
#define IMAGEPLUS_SEMANTIC_INSTANCE_HPP


#include <list>
#include <sstream>
#include <string>

#include <imageplus/core.hpp>

namespace imageplus {
	namespace semantic {

		//!
		//! \brief An instance of an annotation of a semantic class.
		//!
		//! \author Pau Haro Negre
		//!
		//! \date 10-6-2011
		//!
		class Instance
		{
		public:

			friend class ReadWriteAnnotation;

			//! Instance types
    		enum InstanceType {POSITIVE, NEGATIVE, NEUTRAL, NUM_INSTANCE_TYPES};

    		//! Name of each instance type
    		static const char *instance_type_names[];

            //! \brief Default constructor
			Instance() {}

            //! \brief Constructor from all attribute values.
	        //!
	        //! \param[in] image_id		ID of the annotated image
	        //! \param[in] media_uri	URI of the image
	        //! \param[in] stream_id	Stream ID
	        //! \param[in] rel_strength	Relation Strength
	        //! \param[in] spatial_dcmp Spatial Decomposition
            Instance(const std::string& image_id, const std::string& media_uri, uint32 stream_id,
            		float32 rel_strength, const std::list<std::string>& spatial_dcmp)
				: _image_id(image_id), _media_uri(media_uri), _stream_id(stream_id),
				  _relation_strength(rel_strength), _spatial_decomposition(spatial_dcmp) {}

            //! \brief Destructor
            ~Instance() {}

			//! Get media uri.
			//!
			//! \return Media uri
    		std::string get_media_uri() const;

    		friend std::ostream& operator<<(std::ostream &os, const Instance& i);


		private:
			//! Associated image id
			std::string _image_id;

			//! Media Uri
			std::string _media_uri;
			
			//! StreamID
			uint32 _stream_id;

			//! Relation strength
			float32 _relation_strength;

			//! Spatial decomposition
			std::list<std::string> _spatial_decomposition;
			
		};

		//! Output a representation of the given Instance to an ostream.
        //!
        //! \param[in,out] os Output stream where the representation will be appended
        //! \param[in]     i  %Instance of Instance class to write to the stream
		//!
		//! \return Description of the Instance is appended to the given ostream.
		std::ostream& operator<<(std::ostream &os, const Instance& i);
	}
}

#endif //IMAGEPLUS_SEMANTIC_INSTANCE_HPP
