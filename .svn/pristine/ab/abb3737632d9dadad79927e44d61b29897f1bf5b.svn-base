##############################################################################
#                                                                            #
# Copyright (C) 2007 UPC All Rights Reserved.                                #
#                                                                            #
# See COPYRIGHT file enclosed with this distribution.                        #
#                                                                            #
##############################################################################

##############################################################################
#                                                                            #
#  ImagePlus Build System - Tools                                            #
#                                                                            #
#  This build system is based on SCons (http://www.scons.org/)               #
#                                                                            #
# This file builds all the tools and installs them.                          #
#                                                                            #
#  CREATED BY :  Albert Gil, UPC (agil@gps.tsc.upc.edu)                      #
#                                                                            #
##############################################################################

Import('*')


if env['USE_SMARTFLOW']:

    # To get the list of files
    import glob
    import os
    
    ##
    ## Create the tools environment
    ##
    clientsEnv = env.Clone()
    
    ##
    ## Build the modules:
    ##
    ##   - Read the modules list from the modulesListFile
    ##   - Read the user modules list from the userListFile (if exists)
    ##   - Execute the build script for each module 
    ##
    clients = list()
    
    
    # add only the module name to the "modules" list
    clients_with_path  = glob.glob(str(Dir(clientsPath))+os.sep+'*')
    
    for clientpath in clients_with_path:
        client = clientpath.replace(str(Dir(clientsPath))+ os.sep,'')
        if os.path.exists(clientpath+os.sep+'src'):
            clients.append(client)
        else:
            clients_with_subpaths = glob.glob(clientpath+os.sep+'*')
            for clientsuppath in clients_with_subpaths:
                client = clientsuppath.replace(str(Dir(clientsPath))+ os.sep,'')
                clients.append(client)
    
    # User configuration script
    clients_to_remove = list()
    if os.path.exists(str(userListFile)):
        clients_to_remove.extend(SConscript(userListFile, 'env'))
    
    # remove undesired tools
    removed = list()
    if len(clients_to_remove) != 0:
        for client in clients_to_remove:
            if client in clients:
                clients.remove(client)
                removed.append(client) 
        if len(removed) != 0:
            print '\nThese real-time clients will not be built: \n'
            for client in removed:
                print client
            print '\nPlease, remove them from your user file to be able to build them (',userListFile,').\n'
    
    clientsInstalled = []
    
    for client in clients:
        clientName = os.path.basename(client)
        
        ##
        ## Alias
        ##
        Alias( clientName, clientsPath + client )
    
    
        ##
        ## Export the module paths
        ##
        srcPath  = clientsPath + client + '/src/'
        objPath  = clientsPath + client + '/obj/' + env['buildsuffix']
        binPath  = clientsPath + client + '/bin/' + env['buildsuffix']
        
        ##
        ## Process all tool sources
        ##
        objects = list()
        sourceFiles = glob.glob(str(Dir(srcPath)) + os.sep +'*.cpp')
        for source in sourceFiles:
            src = source.replace('.cpp','')
            src = src.replace(str(Dir(srcPath))+os.sep,'')
            objects += clientsEnv.Object( objPath+src, source)
        
        ##
        ## Create the tool
        ##     
        bin = clientsEnv.Program ( binPath+clientName, objects + library )
        
        ##
        ## Install the tool to the bin directory (with a prefix) 
        ##
        clientsInstalled += InstallAs( toolsBinPath + 'iplus-sf-' + clientName, bin )

