// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file writeimage.hpp
//!
//!  Classes for writing images to disk
//!


#ifndef IMAGEPLUS_IO_WRITEIMAGE_HPP
#define IMAGEPLUS_IO_WRITEIMAGE_HPP

#ifdef USE_IMAGEMAGICK

#include <Magick++.h>

#endif


#include <string>

#include <imageplus/core.hpp>
#include <imageplus/io/writemultiarray.hpp>
#include <imageplus/io/io_types.hpp>


namespace imageplus
{
    namespace io
    {
		/*!
		 * \brief Class for writing images
		 *
		 * This class is mainly a wrapper to other libraries to write images to disk.
		 *
		 * By default it uses Boost.GIL and you will be able to write only JPEG, PNG and TIFF formats.
		 * If you enable the USE_IMAGEMAGICK flag then you will use ImageMagick and you will be
		 * able to write in almost any format.
		 *
		 * Note that both, Boost.GIL and ImageMagick use the libjpeg, libpng and libtiff libraries.
		 *
		 * \warning Note that some codecs (e.g. libjpeg) do not guarantee that the same image written
		 *          in different computers give the same file but, because some quantization
		 *          issues, the two files will have differences of +-1 in some pixels.
		 *
		 * \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
		 * \author Albert Gil Moreno <albert.gil@upc.edu>
		 *
		 * \date  2008-1-10
		 *
		 * \todo Add support to signed types and 32 bits
		 */
        class WriteImage
        {

            public:
                
                //!
                //! \brief Default constructor
                //!
                WriteImage();

                //!
                //! \brief Constructor from file name
                //!
                //! \param[in] filename  : File name
                //!
                explicit WriteImage( const std::string& filename );

                //!
                //! \brief Destructor
                //!
                ~WriteImage();
                
                //!
                //! \brief Set image file name
                //!
                //! \param[in] filename  : File name
                //!
                void open( const std::string& filename );
                
                //!
                //! \brief Operator to write an Image
                //!
                //! ImageType template should be ImageRGB<T>, or ImageGray<T>.
                //! Data types supported (template T) are: uint8 and uint16
                //!
                //! \param[in] image  : Source image to write
                //!
                template< class ImageType >
                void operator<<( const ImageType& image) const
                {
                    // TODO: This assert should be done also in release?
                    ASSERT( _filename != "", "Reading before openning any file.")
                    ASSERT( _format != UNKNOWN_IMAGE_FORMAT, "Reading an unsupported image type (unknown extension).")
                    
                    return _write(image);
                }

                
                //!
                //! \brief Access format of image
                //!
                //! \return ImageFormat enumerate with the format information of the image
                //!
                ImageFormat format() const
                {
                    return _format;
                }


            private:
                
                //!
                //! \brief Private and overloaded method to write an ImageRGB<uint8>
                //!
                //! \param[in] image  : Source image to write
                //!
                void _write( const ImageRGB<uint8>& image) const;
                
                //!
                //! \brief Private and overloaded method to write an ImageRGB<uint8>
                //!
                //! \param[in] image  : Source image to write
                //!
                void _write( const ImageYUV<uint8>& image) const;

                //!
                //! \brief Private and overloaded method to write an ImageRGB<uint16>
                //!
                //! \param[in] image  : Source image to write
                //!
                void _write( const ImageRGB<uint16>& image) const;

                //!
                //! \brief Private and overloaded method to write an ImageGray<uint8>
                //!
                //! \param[in] image  : Source image to write
                //!
                void _write( const ImageGray<uint8>& image) const;

                //!
                //! \brief Private and overloaded method to write an ImageGray<uint16>
                //!
                //! \param[in] image  : Source image to write
                //!
                void _write( const ImageGray<uint16>& image) const;
                
                //!
                //! \brief Private and overloaded method to write an ImagePartition<uint32>
                //!
                //! \param[in] image  : Source image to write
                //!
                void _write( const ImagePartition<uint32>& image) const;

                //!
                //! \brief Private and overloaded method to write an ImageMask
                //!
                //! \param[in] image  : Source image to write
                //!
                void _write( const ImaVol<bool,1,2>& image) const;
                
                /*!
                 * \brief Private and overloaded method to write an Image Bayer
                 * 
                 * \param[in] image  : Source image to write
                 * 
                 * \todo Use an specific type for the ImageBayer, not a MultiArray
                 */
                void _write( const MultiArray<uint8,2>& image) const;
                
                
#ifndef USE_IMAGE_MAGICK
                
                //!
                //! \brief Private and overloaded method to write a boost view to filesystem
                //!
                //! JPEG is NOT supported in this function, only for uint8 images
                //!
                //! \param[in] val  : Data type of the image to write (value is ignored, only type used for template specialization)
                //! \param[in] boost_img_view  : boost view to write
                //!
                template<typename T, typename BoostImageView>
                void _write_boost(T val, BoostImageView& boost_img_view) const;
                
                //!
                //! \brief Private and overloaded method to write a boost view to filesystem
                //!
                //! JPEG is supported in this function
                //!
                //! \param[in] val  : Data type of the image to write (value is ignored, only type used for template specialization)
                //! \param[in] boost_img_view  : boost view to write
                //!
                template<typename BoostImageView>
                void _write_boost(uint8 val, BoostImageView& boost_img_view) const;
                
#endif
                
                //!
                //! \brief Private fuction to write all RGB image types
                //!
                //! Supported types are: uint8 and uint16
                //!
                //! \param[in] image : image to write
                //!
#ifndef USE_IMAGEMAGICK
                template< typename T, typename BoostImageView >
#else
#if MagickLibVersion >= 0x640
                template<typename T, Magick::StorageType MagickPixelType >
#else
                template<typename T, MagickLib::StorageType MagickPixelType >
#endif
#endif
                void _write_rgb( const ImageRGB<T>& image ) const;
                
                //!
                //! \brief Private fuction to write all GRAY image types
                //!
                //! Supported types are: uin8 and uin16
                //!
                //! \param[in] image : image to write
                //!
#ifndef USE_IMAGEMAGICK                
                template<typename T, typename BoostImageView, typename BoostPixelType>
#else
#if MagickLibVersion >= 0x640
                template<typename T, Magick::StorageType MagickPixelType >
#else
                template<typename T, MagickLib::StorageType MagickPixelType >
#endif
#endif
                void _write_gray( const ImageGray<T>& image ) const;
                


                //! Stores the file name of the image to write
                std::string _filename;
                
                //! Image format or extension (jpeg, png...)
                ImageFormat _format;
        };

    } // namespace io

} //namespace imageplus

#endif
