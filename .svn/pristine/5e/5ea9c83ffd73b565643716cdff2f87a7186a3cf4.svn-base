##############################################################################
#                                                                            #
# Copyright (C) 2007 UPC All Rights Reserved.                                #
#                                                                            #
# See COPYRIGHT file enclosed with this distribution.                        #
#                                                                            #
##############################################################################

##############################################################################
#                                                                            #
#  ImagePlus Build System - Module dependences                               #
#                                                                            #
# This script is executed for each module. It creates all the dependences of #
# the module and exports them.                          .                    # 
#                                                                            #
# The build system is based on SCons (http://www.scons.org/), so also this   #
# this script.                                                               #
#                                                                            #
#  CREATED BY :  Albert Gil, UPC (agil@gps.tsc.upc.edu)                      #
#                                                                            #
##############################################################################

Import('*')

# To get the list of files
import glob
import os

##
## Configure the build environment
##
## Each module can configure its build environment from the global one.
## This configuration is done in the 'config.build' script in the module directory 
##
## Note: Sources are built in the moduleEnv, but tests will create its own later
##       using on the module one: testEnv
##


# Variables to be used as LIBS and LIBPATH lists for the build environment
dependences      = list()
dependencesPaths = list()

# Initialize the dependences with itself values
dependences.append      ( module  )
dependencesPaths.append ( libPath )


# Variables to loop for sub dependences (dependences of the dependences) and to avoid dead-loops on circular dependences
# Note: Circular dependences should be avoided
loopDependences = list()
dependencesDone = list()

# Incremental loop for the current dependences and sub-dependences:
#
# - dependences:      always extended (in circular dependences gcc needs commands like: -ldepA -ldepB -ldepA)
# - dependencesPaths: only extended if the path has not been added before
# - loopDependences:  only extended if the dependence has not been done before (= not in dependencesDone list)
#
loopDependences.extend( dependences )
for dep in loopDependences:
    
    # Get sub-dependences from the corresponding config.build file of 'dep'
    #
    # Note: External dependences should be configured in the config.build file 
    #       of the module, not here.
    #    
    subDependences = SConscript( modulesPath+dep+'/config.build', 'moduleEnv')
    
    # Add sub-dependences to the dependences list, and mark 'dep' as done
    dependences.extend     ( subDependences )
    dependencesDone.append ( dep )
         
    # Loop on sub-dependences to add their dependences to the main loop list 
    # if necessary (i.e. this dependence is not yet in the list):
    #
    # - Check circular dependences: not allowed, build should be aborted 
    # - Check if each sub-dependences has been done before
    # - If not: 
    #   - Increment the loopDependences list with this dependence 
    #   - Add their path to build environment (= add it to dependencesPaths)
    #
    for subDep in subDependences:
        # Circular dependences are not allowed
        if subDep == module:
            print '\nCircular dependence found building', module
            loopDependences.remove(module)
            print 'The list of dependences found is: ', loopDependences
            print 'One of these dependences also depends on', module
            print '\nCircular dependences are not allowed.\n' 
            exit(2)
                  
        if dependencesDone.count(subDep) == 0:            
            dependencesPaths.append ( modulesPath + subDep + '/lib/' + env['buildsuffix'] )
            loopDependences.append  ( subDep )

##
## Add io, and toolbox as a dependences for all development tests
##
## Almost all test will depend on io and toolbox, although its module doesn't depend on.
## The easiest way to fix this is add the io module to all tests.
##
## Note we use the same algorithm above, but without checking circular dependences 
##
dependences.append('io')
dependences.append('toolbox')
dependencesPaths.append ( modulesPath + 'io/lib/'      + env['buildsuffix'] )
dependencesPaths.append ( modulesPath + 'toolbox/lib/' + env['buildsuffix'] )
loopDependences = ['io', 'toolbox']
for dep in loopDependences:
    subDependences = SConscript( modulesPath+dep+'/config.build', 'moduleEnv')
    dependences.extend     ( subDependences )
    dependencesDone.append ( dep )
    for subDep in subDependences:
        if dependencesDone.count(subDep) == 0:            
            dependencesPaths.append ( modulesPath + subDep + '/lib/' + env['buildsuffix'] )
            loopDependences.append  ( subDep )


# Export the variables
Export('dependences', 'dependencesPaths')