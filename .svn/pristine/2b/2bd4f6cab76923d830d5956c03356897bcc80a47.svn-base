// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \example timestamp_example.hpp
 * 
 * Example about how to use \ref imageplus::Timestamp "Timestamps".
 * 
 * \author Albert Gil Moreno <albert.gil@upc.edu>
 * \date   01-2010
 */

#include <imageplus/core/timestamp.hpp>

using namespace imageplus;

void timestamp_example()
{   
    /*
     * You have the following constructors
     */
    Timestamp ts1;            // default value is 0.0s
    Timestamp ts2(1,2,3,4);   // 1 hour, 2 minutes, 3 seconds and 4 MICROseconds (not MILLI!)
    Timestamp ts3(ts2);       // copy constructor
    Timestamp ts4 = 3.5;      // directly 3.5s
    
    /*
     * Also you can get a Timestamp from the system clock:
     */
    Timestamp ts5 = clock_ts();
    
    /*
     * You can access to the timestamp data with diferent accessors: hours, minutes, etc...
     * Anyway, normally this is not very useful.
     */
    if( ts4.hours()   == 0   &&
        ts4.minutes() == 0   &&
        ts4.seconds() == 3   &&
        ts4.millis()  == 500 &&
        ts4.micros()  == 500000 )
    {
        std::cout << "Timestamp example: OK" << std::endl;
    }
    else
    {
        std::cout << "Timestamp example: Err" << std::endl;
    }


    /*
     * The most common operations with Timestamp is to compare them.
     * You can do it with the usual arithmetic operators: "==", "!=", ">", "<", ">=" and "<=".
     * 
     * Also you have the useful "are_similar" method.
     * Note that this method is important to avoid floats impresicion problems.
     */
    ts1 = 13.0; 
    ts2 = 13.0;
    ts3 = 15.0;
        
    if( ts1 == ts2  &&  
        ts1 == 13.0 &&
        
        ts1 != ts3  && 
        ts1 != 5.0  &&
        
        ts1 <  ts3  && 
        ts1 <  20.0 &&
        
        ts1 <= ts3  && 
        ts1 <= 20.0 &&
        
        ts3 >  ts1  &&
        ts3 >  5.0  &&
        
        ts3 >= ts1  &&
        ts3 >= 5.0  &&
        
        are_similars(ts1, 13.00001) &&
        are_similars(ts1, 12.99999) )
    {
        std::cout << "Timestamp example: OK" << std::endl;
    }
    else
    {
        std::cout << "Timestamp example: Err" << std::endl;
    }
    
    
    /*
     * Also you can do some arithmetic operations: "+" and "-".
     * 
     * And yes! You can also have "negative tiemstamps!
     * And of course, you can compute the "abs" value of a Timestamp. 
     */
    ts2 = ts1+ts3;
    ts4 = ts1-ts3; 
    
    if( ts2      == 28.0 &&
        ts4      == -2.0 &&
        abs(ts4) ==  2.0 )
    {
        std::cout << "Timestamp example: OK" << std::endl;
    }
    else
    {
        std::cout << "Timestamp example: Err" << std::endl;
    }
    
    
    /*
     * Finally you can can printout or save to disk Timestamp normally with <</>> operators
     * 
     * The following line prints: "Timestamp is: 001266953399.428
     */
    std::cout << "Timestamp is: " << ts5 << std::endl;
}
