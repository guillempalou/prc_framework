// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file pixel.test
//!
//! Tests for pixel 
//!
#include <imageplus/core/imagegray.hpp>
#include <imageplus/core/coord2d.hpp>
#include <imageplus/core/region.hpp>
#include <imageplus/core/pixel.hpp>



BOOST_AUTO_TEST_SUITE ( core_pixel_suite );

using namespace imageplus;
using namespace std;

BOOST_AUTO_TEST_CASE( neighbor_iterator_test)
{   
    ImageGray<uint8> my_image(3,3);
    my_image[0][0] = 1;    my_image[1][0] = 2;    my_image[2][0] = 3;
    my_image[0][1] = 4;    my_image[1][1] = 5;    my_image[2][1] = 6;
    my_image[0][2] = 7;    my_image[1][2] = 8;    my_image[2][2] = 9;
    
    ImageGray<uint8>::iterator<> it = my_image.colors_begin();
    ImageGray<uint8>::pixel_type my_pixel = *it;
    
    typedef ImageGray<uint8>::CoordType C2D;
    
    BOOST_CHECK_EQUAL(my_pixel.value(), 1);
    BOOST_CHECK(my_pixel.position()==C2D(0,0));
    
    ImageGray<uint8>::iterator<> it2 = my_image.colors_begin(ImageGray<uint8>::CoordType(1,1));
    my_pixel = *it2;
    
    BOOST_CHECK_EQUAL(my_pixel.value(), 5);
    BOOST_CHECK(my_pixel.position()==C2D(1,1));
    
    
    // Iterate through a neighborhood of the pixel
    ImageGray<uint8>::pixel_type::neighborhood my_neighborhood;
    my_neighborhood.push_back(C2D(-1,-1));
    my_neighborhood.push_back(C2D( 1, 1));
    
    ImageGray<uint8>::pixel_type::neighbor_iterator neigh_it     = my_pixel.local_begin(my_neighborhood);
    ImageGray<uint8>::pixel_type::neighbor_iterator neigh_it_end = my_pixel.local_end  (my_neighborhood);

    ImageGray<uint8>::pixel_type neigh_pixel = *neigh_it;
    BOOST_CHECK_EQUAL(neigh_pixel.value(), 1);
    BOOST_CHECK(neigh_it!=neigh_it_end);

    ++neigh_it;
    BOOST_CHECK_EQUAL((*neigh_it).value(), 9);
    BOOST_CHECK(neigh_it!=neigh_it_end);

    ++neigh_it;
    BOOST_CHECK(neigh_it==neigh_it_end);
}





BOOST_AUTO_TEST_SUITE_END ();

