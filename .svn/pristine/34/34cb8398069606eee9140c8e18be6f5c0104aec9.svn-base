// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file updownsample.test
//!

#include <iostream>
#include <imageplus/math/statistics/multiarray_statistics.hpp>

BOOST_AUTO_TEST_SUITE ( multiarray_statistics_suite );

using namespace imageplus;
using namespace imageplus::math::statistics;

typedef boost::mpl::list<uint8,int16,int64,float64> DataTypes;

BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_maxval, T, DataTypes )
{
    uint64 size = 10;
    T val1 = static_cast<T>(10);
    T val2 = static_cast<T>(5);
    T val3 = static_cast<T>(3);
    T res;
    int64 location = -1;

    MultiArray<T,1> maVin(size);
    maVin = val2;

    maVin[7] = val1;
    maVin[4] = val3;

    res = maxval(maVin);
    BOOST_CHECK(res == val1);
    BOOST_CHECK(location == static_cast<int64>(-1));

    res = maxval(maVin, &location);
    BOOST_CHECK(res == val1);
    BOOST_CHECK(location == static_cast<int64>(7));
}


BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_minval, T, DataTypes )
{
    uint64 size = 10;
    T val1 = static_cast<T>(10);
    T val2 = static_cast<T>(5);
    T val3 = static_cast<T>(3);
    T res;
    int64 location = -1;

    MultiArray<T,1> maVin(size);
    maVin = val2;

    maVin[7] = val1;
    maVin[4] = val3;

    res = minval(maVin, &location);
    BOOST_CHECK(res == val3);
    BOOST_CHECK(location == static_cast<int64>(4));
}

BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_maxminval, T, DataTypes )
{
    uint64 size = 10;
    T val1 = static_cast<T>(10);
    T val2 = static_cast<T>(5);
    T val3 = static_cast<T>(3);

    MultiArray<T,1> maVin(size);
    maVin = val2;

    maVin[7] = val1;
    maVin[4] = val3;

    std::pair<T,T> res;

    res = maxminval(maVin);
    BOOST_CHECK(res.first  == val1);
    BOOST_CHECK(res.second == val3);
}


BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_sum, T, DataTypes )
{
    uint64 size = 10;
    T val1 = static_cast<T>(255);
    T val2 = static_cast<T>(5);
    T val3 = static_cast<T>(3);
    float64 res;

    MultiArray<T,1> maVin(size);
    maVin = val2;

    maVin[7] = val1;
    maVin[4] = val3;

    res = sum (maVin);
    BOOST_CHECK(res == static_cast<float64>(298));
 
}



BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_mean, T, DataTypes )
{
    uint64 size = 10;
    T val1 = static_cast<T>(10);
    T val2 = static_cast<T>(5);
    T val3 = static_cast<T>(3);
    float64 res;

    MultiArray<T,1> maVin(size);
    maVin = val2;

    maVin[7] = val1;
    maVin[4] = val3; 

    res = mean (maVin);
    BOOST_CHECK_CLOSE (res, static_cast<float64>(5.3), 1e-9);
}


BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_variance, T, DataTypes )
{
    uint64 size = 10;
    T val1 = static_cast<T>(10);
    T val2 = static_cast<T>(5);
    T val3 = static_cast<T>(3);
    float64 res;

    MultiArray<T,1> maVin(size);
    maVin = val2;

    maVin[7] = val1;
    maVin[4] = val3; 

    // Biased estimator
    res = variance (maVin,false);
    BOOST_CHECK_CLOSE (res, static_cast<float64>(2.81), 1e-9);


    // Biased estimator
    res = variance (maVin);
    BOOST_CHECK_CLOSE (res, static_cast<float64>(3.12222222222222), 1e-9);
    

}



BOOST_AUTO_TEST_SUITE_END ();
