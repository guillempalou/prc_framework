// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file ontology.hpp
//!
//!  Ontology
//!


#ifndef IMAGEPLUS_SEMANTIC_ONTOLOGY_HPP
#define IMAGEPLUS_SEMANTIC_ONTOLOGY_HPP


#include <map>
#include <string>

#include <boost/iterator/transform_iterator.hpp>
#include <boost/function.hpp>

#include <imageplus/core.hpp>
#include <imageplus/semantic/map.hpp>


namespace imageplus {
	namespace semantic {

		//!
		//! \brief Contains a set of semantic classes.
		//!
		//! This class is used to represent an ontology. It is composed of
		//! semantic classes. Each semantic class has a name and an id to
		//! identify it in the ontology.
		//!
		//! Instances of this class are iterable, the iterator will iterate
		//! through all the ids of the semantic classes included in the
		//! ontology.
		//!
		//! Example: print all ids and names of the semantic classes in an
		//! ontology
		//! \code
		//! Ontology ontology;
		//! BOOST_FOREACH(uint32 sc_id, ontology)
		//! {
		//! 	std::cout << "Semantic class " << sc_id << ": ";
		//! 	std::cout << ontology.get_semantic_class_name(sc_id);
		//! 	std::cout << std::endl;
		//! }
		//! \endcode
		//!
		//!	In order to load an ontology from a file and save it back again
		//! see the ReadWriteOntology class.
		//!
		//! \author Pau Haro Negre
		//!
		//! \date 10-6-2011
		//!
		class Ontology
		{
		public:

			//! Type of an ontology semantic classes map
			typedef std::map<uint32, std::string> SemanticClassesType;

			//! Type of the ontology semantic classes iterator
			typedef SemanticClassesType::iterator SemanticClassIterator;

			//! Type of the ontology semantic classes const iterator
			typedef SemanticClassesType::const_iterator SemanticClassConstIterator;

			//! Auxiliary type for map of semantic classes keys (ids) iterator
			typedef boost::function<SemanticClassesType::key_type (const SemanticClassesType::value_type &)> F_key;

			//! Type of the ontology semantic classes ids iterator (DEFAULT ontology iterator)
			typedef boost::transform_iterator<F_key, SemanticClassIterator> iterator;

			//! Type of the ontology semantic classes ids const iterator (DEFAULT ontology const iterator)
			typedef boost::transform_iterator<F_key, SemanticClassConstIterator> const_iterator;


			//! Default constructor.
			Ontology() {};

			//! Destructor.
			~Ontology() {};


			//! Set ontology name.
			//!
			//! \param[in] name Ontology name
			void set_name(const std::string& name);

			//! Get ontology name.
			//!
			//! \return Ontology name
			std::string get_name() const;


			//! Add a new semantic class to this ontology.
			//!
			//! \param[in] id   Semantic class id
			//! \param[in] name Semantic class name
			void add_semantic_class(uint32 id, const std::string& name) throw (ImagePlusError);

			//! Check whether the semantic class is included in this ontology.
			//!
			//! \param[in] sc_id Semantic class id
            //!
            //! \return Whether the semantic class is included in this ontology
			bool includes_semantic_class(uint32 sc_id) const;

			//! Get the name of the given semantic class.
			//!
			//! \param[in] sc_id Semantic class id
            //!
            //! \return The name of the semantic class identified by sc_id
			std::string get_semantic_class_name(uint32 sc_id) const throw (ImagePlusError);


			//! Set ontology file URI.
			//!
			//! \param[in] file_uri file URI or file name
			void set_file_uri(const std::string& file_uri);

			//! Get ontology file URI (e.g.: "file:/path/to/file.xml").
			//!
			//! \return Ontology file URI
			std::string get_file_uri() const;


			// Ontology Iteration Interface

			//! Returns an iterator referring to the first SemanticClass id in the Ontology.
			//!
			//! \return An iterator to the beginning of the Ontology
			iterator begin();

			//! Returns an iterator referring to the past-the-end SemanticClass id in the Ontology.
			//!
			//! \return An iterator to the element past the end of the Ontology
			iterator end();

			//! Returns a constant iterator referring to the first SemanticClass id in the Ontology.
			//!
			//! \return A constant iterator to the beginning of the Ontology
			const_iterator begin() const;

			//! Returns a constant iterator referring to the past-the-end SemanticClass id in the Ontology.
			//!
			//! \return A constant iterator to the element past the end of the Ontology
			const_iterator end() const;


    		friend std::ostream& operator<<(std::ostream &os, const Ontology& o);

		private:
			//! Ontology name
			std::string _name;
			
			//! Map of semantic classes names for each semantic class id
			SemanticClassesType _semantic_classes;

			//! Ontology file URI
			std::string _file_uri;
		};

		//! Output a representation of the given Ontology to an ostream.
        //!
        //! \param[in,out] os Output stream where the representation will be appended
        //! \param[in]     o  %Instance of Ontology class to write to the stream
		//!
		//! \return Description of the Ontology is appended to the given ostream
		std::ostream& operator<<(std::ostream &os, const Ontology& o);
	}
}

#endif //IMAGEPLUS_SEMANTIC_ONTOLOGY_HPP
