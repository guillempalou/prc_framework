// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file ReadWritePartition.cpp
//!
//!  Implementation of classes for writing BPTs to disk
//!

#ifdef USE_XML
#include <imageplus/io/xml_auxiliar.hpp>
XERCES_CPP_NAMESPACE_USE
#endif

#include <io_auxiliar.hpp>
#include <fstream>
#include <boost/filesystem.hpp>
#include <boost/lexical_cast.hpp>

#include <imageplus/io/readwritepartition.hpp>

using namespace imageplus::io;

imageplus::io::ReadWritePartition::ReadWritePartition() 
    : _filename( "" )
{
}

imageplus::io::ReadWritePartition::ReadWritePartition( const std::string& filename, imageplus::io::PartitionWriteMode mode, const std::string& given_extension ) throw (ImagePlusError)
{   
    _write_mode = mode;
    _filename = filename;
    _given_extension = given_extension;
    
    _open();
}

imageplus::io::ReadWritePartition::ReadWritePartition( const std::string& filename, const std::vector<std::string>& uri_names, const std::vector<std::string>& uri_values, imageplus::io::PartitionWriteMode mode, const std::string& given_extension) throw (ImagePlusError)
{   
    _write_mode = mode;
    _filename = filename;
    _uri_names = uri_names;
    _uri_values = uri_values;
    _given_extension = given_extension;
    
    _open();
}

imageplus::io::ReadWritePartition::~ReadWritePartition()
{
}

void imageplus::io::ReadWritePartition::open( const std::string& filename, imageplus::io::PartitionWriteMode mode, const std::string& given_extension) throw (ImagePlusError)
{
    _write_mode = mode;
    _filename = filename;
    _given_extension = given_extension;
    
    _open();
}

void imageplus::io::ReadWritePartition::open( const std::string& filename, const std::vector<std::string>& uri_names, const std::vector<std::string>& uri_values, imageplus::io::PartitionWriteMode mode, const std::string& given_extension) throw (ImagePlusError)
{
    _write_mode = mode;
    _filename = filename;
    _uri_names = uri_names;
    _uri_values = uri_values;
    _given_extension = given_extension;
    
    _open();
}
    
    
void imageplus::io::ReadWritePartition::_open() throw (ImagePlusError)
{
    if(_uri_names.size()!=_uri_values.size())
        throw(ImagePlusError("ReadWritePartition open: uri_names and uri_values must have the same size"));
    
    _extension = boost::filesystem::extension( _filename );

    if(_extension==".xml")
    {
#ifndef USE_XML
        throw ImagePlusError( "ReadWritePartition: You must use the XML library (USE_XML=true) to read/write BPTs in XML" );
#endif
        if(_given_extension != "" && _given_extension != "xml")
    	{
			throw ImagePlusError( "ReadWritePartition: Given extension (" + _given_extension + ") is not the same than the file extension (xml)" );
    	}
    }
    else if(_extension==".txt")
    {
        if(_given_extension != "" && _given_extension != "txt")
    	{
			throw ImagePlusError( "ReadWritePartition: Given extension (" + _given_extension + ") is not the same than the file extension (txt)" );
    	}
    }
    else
    {
       	if(_given_extension == "")
    	{
        	throw ImagePlusError( "ReadWritePartition: File type '" + _extension + "' not supported" );
        }
        else
        {
        	_extension = "." + _given_extension;
        }	
    }

        
    boost::filesystem::path file_path( _filename );
    _filename_branch = file_path.branch_path();
    if (!boost::filesystem::exists(_filename_branch) && _filename_branch.string()!="")
        throw ImagePlusError( "ReadWritePartition: Directory " + _filename_branch.string() + " not found." );
}



