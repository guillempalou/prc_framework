// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file texture_types.hpp
//!
//!  Add brief description of the file here
//! 

#ifndef IMAGEPLUS_CODING_TEXTURE_TEXTURE_TYPES_HPP
#define IMAGEPLUS_CODING_TEXTURE_TEXTURE_TYPES_HPP

#include <imageplus/core.hpp>

namespace imageplus
{
namespace coding
{
namespace texture
{
    //!
    //! \brief Class to store quantized region coefficients to define the texture
    //!
    //! This class stores the quantized texture coefficients for a region.
    //! It also stores the quantization parameter internally. All color channels
    //! must have the same number of coefficients.
    //!
    //! \tparam nchannels : Number of color channels of the region texture
    //!
    template<std::size_t nchannels>
    class QRegionCoeffs
    {
    public:

        //!
        //! \brief Constructor by parameters and default constructor
        //!
        //! \param[in] ncoeffs: Number of coefficients for each channel
        //! \param[in]       q: Quantization parameter
        //!
        QRegionCoeffs(uint64 ncoeffs = 0, uint8 q = 0)
        :   _coeffs(nchannels,std::vector<int64>(ncoeffs)),
            _quant(q)
        {}

        //!
        //! \brief Returns number of channels
        //!
        //! \return Number of channels
        //!
        uint64 num_channels() const
        {
            return nchannels;
        }

        //!
        //! \returns Number of elements
        //!
        uint64 num_elements() const
        {
            uint64 n = 0;
            for (uint64 j = 0; j < _coeffs.size() ; j++) n += _coeffs[j].size();
            return n;
        }

        //!
        //! \brief Access to quantized coefficients
        //!
        //! \param[in] channel: channel to get coefficients
        //!
        //! \return Vector with quantized coefficients for the specific channel
        //!
        std::vector<int64>& operator[](uint64 channel)
        {
            return _coeffs[channel];
        }

        //!
        //! \brief Access to quantized coefficients (const)
        //!
        //! \param[in] channel: channel to get coefficients
        //!
        //! \return Vector with quentized coefficients for the specific channel
        //!
        const std::vector<int64>& operator[](uint64 channel) const
        {
            return _coeffs[channel];
        }

        //!
        //! \brief Assignment operator (=) from a value
        //!
        //! Set *all* coefficients to a value
        //!
        //! \param[in] val: value to set coefficients to
        //!
        //! \return this
        //!
        const QRegionCoeffs& operator=(int64 val)
        {
            for (uint64 j = 0; j < _coeffs.size()    ; j++)
            for (uint64 k = 0; k < _coeffs[j].size() ; k++)
            {
                _coeffs[j][k] = val;
            }

            return *this;
        }

        /*!
         * \return the quantization factor
         */
        const uint8& quant() const           { return _quant;  }

        /*!
         * \param[in] quant : new quantization factor
         */
        void        quant(const uint8& quant)  { _quant = quant; }

    private:
        //! vector of coefficients
        std::vector< std::vector<int64> > _coeffs;

        //! quantization factor
        uint8 _quant;
    };

    //!
    //! \brief compares two QRegionCoeffs objects
    //!
    //! \param[in] c1 : first object
    //! \param[in] c2 : second object
    //!
    //! \tparam num_channels : Number of colour channels of the region texture
    //!
    //! \return true if *all* quantized coefficients are the same
    //!
    template<std::size_t num_channels>
    bool operator==(const QRegionCoeffs<num_channels>& c1, const QRegionCoeffs<num_channels>& c2)
    {
        for (uint64 j = 0 ; j < num_channels; j++)
        {
            if ( c1[j].size() != c2[j].size() ) return false;

            for (uint64 k = 0 ; k < c1[j].size(); k++)
            {
                if ( c1[j][k] != c2[j][k] )     return false;
            }
        }

        return true;
    }

    //!
    //! \brief compares two QRegionCoeffs objects
    //!
    //! \param[in] c1 : first object
    //! \param[in] c2 : second object
    //!
    //! \tparam num_channels : Number of color channels of the region texture
    //!
    //! \return true if any quantized coefficients is different
    //!
    template<std::size_t num_channels>
    bool operator!=(const QRegionCoeffs<num_channels>& c1, const QRegionCoeffs<num_channels>& c2)
    {
        return !operator==(c1,c2);
    }

    //!
    //! \brief Class to store quantized region coefficients to define the texture
    //!
    //! This class stores the quantized texture coefficients for a vector of regions.
    //!
    //! \tparam nchannels : Number of colour channels of the region texture
    //!
    template<std::size_t nchannels>
    class QTextureCoeffs : public std::vector< QRegionCoeffs<nchannels> >
    {
    public:

        //!
        //! \brief Default constructor, empty coefficients
        //!
        QTextureCoeffs()
        {}

        //!
        //! \brief Main constructor
        //!
        //! \param[in]    nreg: Number of regions
        //! \param[in] ncoeffs: Number of coefficients for each channel
        //! \param[in]       q: Quantization parameter for all regions
        //!
        QTextureCoeffs(uint64 nreg, uint64 ncoeffs = 0, uint8 q = 0)
        :   std::vector< QRegionCoeffs<nchannels> >(nreg,QRegionCoeffs<nchannels>(ncoeffs, q))
        {}

        //!
        //! \brief Returns total number of elements
        //!
        //! \return Number of coefficients of all regions and all channels
        //!
        uint64 num_elements() const
        {
            uint64 n = 0;
            for (uint64 i = 0; i < (*this).size() ; i++) n += (*this)[i].num_elements();
            return n;
        }

        //!
        //! \brief Assignment operator (=) from a value
        //!
        //! Set *all* coefficients to a value
        //!
        //! \param[in] val: value to set coefficients to
        //!
        //! \returns this
        //!
        const QTextureCoeffs& operator=(int64 val)
        {
            for (uint64 i = 0; i < (*this).size() ; i++) (*this)[i] = val;
            return *this;
        }
    };

    //!
    //! \brief compares two QTextureCoeffs objects
    //!
    //! \param[in] c1 : first object
    //! \param[in] c2 : second object
    //!
    //! \tparam num_channels : Number of colour channels of the region texture
    //!
    //! \return true if *all* quantized coefficients are the same
    //!
    template<std::size_t num_channels>
    bool operator==(const QTextureCoeffs<num_channels>& c1, const QTextureCoeffs<num_channels>& c2)
    {
        if ( c1.size() != c2.size() ) return false;

        for (uint64 i = 1 ; i < c1.size(); i++)
        {
            if ( c1[i] != c2[i] )     return false;
        }

        return true;
    }

    //!
    //! \brief compares two QTextureCoeffs objects
    //!
    //! \param[in] c1 : first object
    //! \param[in] c2 : second object
    //!
    //! \tparam num_channels : Number of colour channels of the region texture
    //!
    //! \return true if any quantized coefficients is different
    //!
    template<std::size_t num_channels>
    bool operator!=(const QTextureCoeffs<num_channels>& c1, const QTextureCoeffs<num_channels>& c2)
    {
        return !operator==(c1,c2);
    }
} // ns texture
} // ns coding
} // ns imageplus

#endif // IMAGEPLUS_CODING_TEXTURE_TEXTURE_TYPES_HPP
