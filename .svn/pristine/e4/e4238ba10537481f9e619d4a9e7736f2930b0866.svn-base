/*
 * quadratic_function.hpp
 *
 *  Created on: Feb 28, 2012
 *      Author: guillem
 */

#ifndef QUADRATIC_FUNCTION_HPP_
#define QUADRATIC_FUNCTION_HPP_

#include <imageplus/math/numeric/scalar_function.hpp>

namespace imageplus {
	namespace math {
		namespace numeric {

		//! Quadratic function
		//! Function of the type: f(x) = (1/2) * x'Ax - x'b + c
		//! Where A is positive definite
		//! \author Guillem Palou <guillem.palou@upc.edu>
		//! \date 20-03-2011
		class QuadraticFunction : public ScalarFunction {

		public:
			//! Scalar function type
			typedef ScalarFunction				 			ScalarFunctionType;

			//! Variable Type
			typedef ScalarFunctionType::VariableType 		VariableType;

			//! Variable Type
			typedef ScalarFunctionType::GradientType		GradientType;

			//! Variable Type
			typedef ScalarFunctionType::HessianType			HessianType;

			//! Default constructor, does nothing
			QuadraticFunction() : ScalarFunction(0) {

			}

			//! Constructor with parameters
			//!
			//! \param[in] A: Semipositive definite matrix for the quadratic term
			//! \param[in] b: Vector for the linear term
			//! \param[in] c: constant term
			QuadraticFunction(const Matrix& A, const Vector& b, const Vector& c) : ScalarFunction(b.size()),  _dimensions(b.size()), _A(A), _b(b), _c(c) {

			}

			//! Function return
			inline uint64 dimensions() {
				return _dimensions;
			}

			//! This functions returns the function value at a given point
			//!
			//! \param[in] x: point where the function is evaluated
			//! \return Returns the scalar value of the function at the given point
			inline const float64 value(const VariableType& x) {
				Matrix F = 0.5 * x.transpose()*_A*x - x.transpose()* _b + _c;
				return F(0,0);
			}

			//! This functions returns the function gradient at a given point
			//!
			//! \param[in] x: point where the function is evaluated
			//! \return Returns the gradient vector of the function at the given point
			inline const GradientType& gradient(const VariableType& x)  {
				_gradient = _A*x - _b;
				return _gradient;
			}

			//! This functions returns the function hessian matrix at a given point
			//!
			//! \param[in] x: point where the function is evaluated
			//! \return Returns the hessian matrix of the function at the given point
			inline const HessianType& hessian(const VariableType& x) {
				return _A;
			}

			//! Specific function to retrieve the parameters
			inline const Matrix& A() {return _A;}

			//! Specific function to retrieve the parameters
			inline const Vector& b() {return _b;}

			//! Specific function to retrieve the parameters
			inline const Vector& c() {return _c;}

		private:

			//! dimensions
			uint32 _dimensions;

			//! Semi-positive definite matrix
			Matrix _A;

			//! Linear term
			Vector _b;

			//! Constant term
			Vector _c;

			//! Precomputed gradient
			Vector	_gradient;
		};

		}
	}
}

#endif /* QUADRATIC_FUNCTION_HPP_ */
