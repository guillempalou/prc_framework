// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file clipping.test
//!
//!  Tests for the Clipping Class that inherits from Filter
//!

#include <imageplus/core/clipping.hpp>

BOOST_AUTO_TEST_SUITE ( suite_Clipping );

using namespace imageplus;
using namespace std;

typedef boost::mpl::list< uint8, uint16, uint32, uint64, int8, 
                          int16, int32, int64, float64 > DataTypes;

BOOST_AUTO_TEST_CASE_TEMPLATE( test_Clipping_Constructor_simple, T, DataTypes )
{    
	// With ImaVols constructor simple
    ImaVol<T,1,2> iv1(100,100);
    ImaVol<T,1,2> iv2;
    
    iv1 = 100;
    iv1(0)[0][0] = 10; 
    iv1(0)[1][1] = 120; 
    iv1(0)[2][2] = 30; 
    
    Clipping clip( 20, 100 );
    
    BOOST_CHECK( clip.name() == "Clipping" );
    
    iv2 = clip.filter(iv1);
    
    BOOST_CHECK( iv2(0)[0][0] == 20 );
    BOOST_CHECK( iv2(0)[1][1] == 100 );
    BOOST_CHECK( iv2(0)[2][2] == 30 );
    
    // With MultiArrays
    MultiArray<T,2> ma1(100,100);
    MultiArray<T,2> ma2;
    
    ma1 = 100;
    ma1[0][0] = 10; 
    ma1[1][1] = 120; 
    ma1[2][2] = 30; 
    
    Clipping clip2( 20, 100 );
    
    ma2 = clip2.filter(ma1);
    
    BOOST_CHECK( ma2[0][0] == 20 );
    BOOST_CHECK( ma2[1][1] == 100 );
    BOOST_CHECK( ma2[2][2] == 30 );
}  

BOOST_AUTO_TEST_CASE_TEMPLATE( test_Clipping_Constructor_large, T, DataTypes )
{
	// With ImaVols
    ImaVol<T,1,2> iv1(100,100);
    ImaVol<T,1,2> iv2;
    
    iv1 = 100;
    iv1(0)[0][0] = 10; 
    iv1(0)[1][1] = 120; 
    iv1(0)[2][2] = 30; 
    
    Clipping clip(20,100, 20,100);
    
    iv2 = clip.filter(iv1);
    
    BOOST_CHECK( iv2(0)[0][0] == 20 );
    BOOST_CHECK( iv2(0)[1][1] == 100 );
    BOOST_CHECK( iv2(0)[2][2] == 30 );
    
    // With MultiArrays
    MultiArray<T,2> ma1(100,100);
    MultiArray<T,2> ma2;
    
    ma1 = 100;
    ma1[0][0] = 10; 
    ma1[1][1] = 120; 
    ma1[2][2] = 30; 
    
    Clipping clip2(20,100, 20,100);
    
    ma2 = clip2.filter(ma1);
    
    BOOST_CHECK( ma2[0][0] == 20 );
    BOOST_CHECK( ma2[1][1] == 100 );
    BOOST_CHECK( ma2[2][2] == 30 );
}

BOOST_AUTO_TEST_CASE_TEMPLATE( test_Clipping_Extreme_cases, T, DataTypes )
{
	// With ImaVols volumes
    ImaVol<T,3,3> iv1(100,100,100);
    ImaVol<T,3,3> iv2;
    
    iv1 = 100;
    iv1(0)[0][0][0] = 10;  iv1(1)[0][0][0] = 10;  iv1(2)[0][0][0] = 10; 
    iv1(0)[1][1][1] = 120; iv1(1)[1][1][1] = 120; iv1(2)[1][1][1] = 120; 
    iv1(0)[2][2][2] = 30;  iv1(1)[2][2][2] = 30;  iv1(2)[2][2][2] = 30; 
    
    Clipping clip( 20,110, 90,100);
    iv2 = clip.filter(iv1);
    
    BOOST_CHECK( iv2(0)[0][0][0] == 90 );
    BOOST_CHECK( iv2(0)[1][1][1] == 100 );
    BOOST_CHECK( iv2(0)[2][2][2] == 30 );

    BOOST_CHECK( iv2(1)[0][0][0] == 90 );
    BOOST_CHECK( iv2(1)[1][1][1] == 100 );
    BOOST_CHECK( iv2(1)[2][2][2] == 30 );
    
    BOOST_CHECK( iv2(2)[0][0][0] == 90 );
    BOOST_CHECK( iv2(2)[1][1][1] == 100 );
    BOOST_CHECK( iv2(2)[2][2][2] == 30 );   
    
    Clipping clip2( -20, 40, 10, 20 );
    
    iv2 = clip2.filter(iv1);
    
    BOOST_CHECK( iv2(0)[0][0][0] == 10 );
    BOOST_CHECK( iv2(0)[1][1][1] == 20 );
    BOOST_CHECK( iv2(0)[2][2][2] == 30 );

    BOOST_CHECK( iv2(1)[0][0][0] == 10 );
    BOOST_CHECK( iv2(1)[1][1][1] == 20 );
    BOOST_CHECK( iv2(1)[2][2][2] == 30 );
    
    BOOST_CHECK( iv2(2)[0][0][0] == 10 );
    BOOST_CHECK( iv2(2)[1][1][1] == 20 );
    BOOST_CHECK( iv2(2)[2][2][2] == 30 );  
    
    Clipping clip3( -20, 10 );
    
    iv2 = clip3.filter(iv1);
    
    BOOST_CHECK( iv2(0)[0][0][0] == 10 );
    BOOST_CHECK( iv2(0)[1][1][1] == 10 );
    BOOST_CHECK( iv2(0)[2][2][2] == 10 );

    BOOST_CHECK( iv2(1)[0][0][0] == 10 );
    BOOST_CHECK( iv2(1)[1][1][1] == 10 );
    BOOST_CHECK( iv2(1)[2][2][2] == 10 );
    
    BOOST_CHECK( iv2(2)[0][0][0] == 10 );
    BOOST_CHECK( iv2(2)[1][1][1] == 10 );
    BOOST_CHECK( iv2(2)[2][2][2] == 10 ); 
}

BOOST_AUTO_TEST_SUITE_END ();
