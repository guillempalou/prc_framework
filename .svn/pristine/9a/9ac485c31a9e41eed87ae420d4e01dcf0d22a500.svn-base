// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file dwt.test
//!
//! Tests for functions implemented in dwt.hpp 
//!
#include <imageplus/math/transforms/dwt.hpp>
#include <imageplus/core.hpp>
#include <boost/array.hpp>


BOOST_AUTO_TEST_SUITE ( DWT_Suite );

using namespace imageplus;
using namespace imageplus::math::transforms;


BOOST_AUTO_TEST_CASE( dwt_test )
{
	ImageGray<uint8> image(4,3);


	image[0][0]=1;
	image[1][0]=1;
	image[2][0]=1;
	image[3][0]=5;


	image[0][1]=1;
	image[1][1]=1;
	image[2][1]=3;
	image[3][1]=5;


	image[0][2]=6;
	image[1][2]=8;
	image[2][2]=2;
	image[3][2]=4;

    HAAR haar;
    const DWT<HAAR, DECIMATE>& my_dwt = calc_descriptor(new DWT<HAAR, DECIMATE>(haar), image);

    // Check id
    BOOST_CHECK(my_dwt.id()=="DWT_decimate_1");

    ImageGray<float64> aux1 = my_dwt.aux1_before_decim();
    BOOST_CHECK_EQUAL(aux1.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(aux1.size_y(), uint64(5));

    ImageGray<float64> tmp(6,5);
	tmp[0][0]=0;
	tmp[1][0]=0;
	tmp[2][0]=0;
	tmp[3][0]=0;
	tmp[4][0]=0;
	tmp[5][0]=0;
	tmp[0][1]=0;
	tmp[1][1]=2;
	tmp[2][1]=2;
	tmp[3][1]=6;
	tmp[4][1]=5;
	tmp[5][1]=0;
	tmp[0][2]=0;
	tmp[1][2]=2;
	tmp[2][2]=4;
	tmp[3][2]=8;
	tmp[4][2]=5;
	tmp[5][2]=0;
	tmp[0][3]=0;
	tmp[1][3]=14;
	tmp[2][3]=10;
	tmp[3][3]=6;
	tmp[4][3]=4;
	tmp[5][3]=0;
	tmp[0][4]=0;
	tmp[1][4]=0;
	tmp[2][4]=0;
	tmp[3][4]=0;
	tmp[4][4]=0;
	tmp[5][4]=0;

	BOOST_CHECK(aux1 == tmp);

    ImageGray<float64> aux2 = my_dwt.aux2_before_decim();
    BOOST_CHECK_EQUAL(aux2.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(aux2.size_y(), uint64(5));

	tmp[0][0]=0;
	tmp[1][0]=0;
	tmp[2][0]=0;
	tmp[3][0]=0;
	tmp[4][0]=0;
	tmp[5][0]=0;
	tmp[0][1]=0;
	tmp[1][1]=0;
	tmp[2][1]=0;
	tmp[3][1]=-4;
	tmp[4][1]=5;
	tmp[5][1]=0;
	tmp[0][2]=0;
	tmp[1][2]=0;
	tmp[2][2]=-2;
	tmp[3][2]=-2;
	tmp[4][2]=5;
	tmp[5][2]=0;
	tmp[0][3]=0;
	tmp[1][3]=-2;
	tmp[2][3]=6;
	tmp[3][3]=-2;
	tmp[4][3]=4;
	tmp[5][3]=0;
	tmp[0][4]=0;
	tmp[1][4]=0;
	tmp[2][4]=0;
	tmp[3][4]=0;
	tmp[4][4]=0;
	tmp[5][4]=0;

	BOOST_CHECK(aux2 == tmp);

    ImageGray<float64> approx = my_dwt.approx_before_decim();
    BOOST_CHECK_EQUAL(approx.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(approx.size_y(), uint64(5));


	tmp[0][0]=0;
	tmp[1][0]=0;
	tmp[2][0]=0;
	tmp[3][0]=0;
	tmp[4][0]=0;
	tmp[5][0]=0;
	tmp[0][1]=0;
	tmp[1][1]=4;
	tmp[2][1]=6;
	tmp[3][1]=14;
	tmp[4][1]=10;
	tmp[5][1]=0;
	tmp[0][2]=0;
	tmp[1][2]=16;
	tmp[2][2]=14;
	tmp[3][2]=14;
	tmp[4][2]=9;
	tmp[5][2]=0;
	tmp[0][3]=0;
	tmp[1][3]=14;
	tmp[2][3]=10;
	tmp[3][3]=6;
	tmp[4][3]=4;
	tmp[5][3]=0;
	tmp[0][4]=0;
	tmp[1][4]=0;
	tmp[2][4]=0;
	tmp[3][4]=0;
	tmp[4][4]=0;
	tmp[5][4]=0;

	BOOST_CHECK(approx == tmp);

    ImageGray<float64> horiz = my_dwt.horiz_before_decim();
    BOOST_CHECK_EQUAL(horiz.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(horiz.size_y(), uint64(5));


	tmp[0][0]=0;
	tmp[1][0]=0;
	tmp[2][0]=0;
	tmp[3][0]=0;
	tmp[4][0]=0;
	tmp[5][0]=0;
	tmp[0][1]=0;
	tmp[1][1]=0;
	tmp[2][1]=-2;
	tmp[3][1]=-2;
	tmp[4][1]=0;
	tmp[5][1]=0;
	tmp[0][2]=0;
	tmp[1][2]=-12;
	tmp[2][2]=-6;
	tmp[3][2]=2;
	tmp[4][2]=1;
	tmp[5][2]=0;
	tmp[0][3]=0;
	tmp[1][3]=14;
	tmp[2][3]=10;
	tmp[3][3]=6;
	tmp[4][3]=4;
	tmp[5][3]=0;
	tmp[0][4]=0;
	tmp[1][4]=0;
	tmp[2][4]=0;
	tmp[3][4]=0;
	tmp[4][4]=0;
	tmp[5][4]=0;

	BOOST_CHECK(horiz == tmp);

    ImageGray<float64> vert = my_dwt.vert_before_decim();
    BOOST_CHECK_EQUAL(vert.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(vert.size_y(), uint64(5));


	tmp[0][0]=0;
	tmp[1][0]=0;
	tmp[2][0]=0;
	tmp[3][0]=0;
	tmp[4][0]=0;
	tmp[5][0]=0;
	tmp[0][1]=0;
	tmp[1][1]=0;
	tmp[2][1]=-2;
	tmp[3][1]=-6;
	tmp[4][1]=10;
	tmp[5][1]=0;
	tmp[0][2]=0;
	tmp[1][2]=-2;
	tmp[2][2]=4;
	tmp[3][2]=-4;
	tmp[4][2]=9;
	tmp[5][2]=0;
	tmp[0][3]=0;
	tmp[1][3]=-2;
	tmp[2][3]=6;
	tmp[3][3]=-2;
	tmp[4][3]=4;
	tmp[5][3]=0;
	tmp[0][4]=0;
	tmp[1][4]=0;
	tmp[2][4]=0;
	tmp[3][4]=0;
	tmp[4][4]=0;
	tmp[5][4]=0;

	BOOST_CHECK(vert == tmp);

    ImageGray<float64> diag = my_dwt.diag_before_decim();
    BOOST_CHECK_EQUAL(diag.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(diag.size_y(), uint64(5));


	tmp[0][0]=0;
	tmp[1][0]=0;
	tmp[2][0]=0;
	tmp[3][0]=0;
	tmp[4][0]=0;
	tmp[5][0]=0;
	tmp[0][1]=0;
	tmp[1][1]=0;
	tmp[2][1]=2;
	tmp[3][1]=-2;
	tmp[4][1]=0;
	tmp[5][1]=0;
	tmp[0][2]=0;
	tmp[1][2]=2;
	tmp[2][2]=-8;
	tmp[3][2]=0;
	tmp[4][2]=1;
	tmp[5][2]=0;
	tmp[0][3]=0;
	tmp[1][3]=-2;
	tmp[2][3]=6;
	tmp[3][3]=-2;
	tmp[4][3]=4;
	tmp[5][3]=0;
	tmp[0][4]=0;
	tmp[1][4]=0;
	tmp[2][4]=0;
	tmp[3][4]=0;
	tmp[4][4]=0;
	tmp[5][4]=0;

	BOOST_CHECK(diag == tmp);

    ImageGray<float64> approx_decim = my_dwt.approx();
    BOOST_CHECK_EQUAL(approx_decim.size_x(), uint64(2));
    BOOST_CHECK_EQUAL(approx_decim.size_y(), uint64(2));

    tmp.resize(2,2);
	tmp[0][0]=4;
	tmp[1][0]=14;
	tmp[0][1]=14;
	tmp[1][1]=6;

	BOOST_CHECK(approx_decim == tmp);

    ImageGray<float64> horiz_decim = my_dwt.horiz();
    BOOST_CHECK_EQUAL(horiz_decim.size_x(), uint64(2));
    BOOST_CHECK_EQUAL(horiz_decim.size_y(), uint64(2));


	tmp[0][0]=0;
	tmp[1][0]=-2;
	tmp[0][1]=14;
	tmp[1][1]=6;

	BOOST_CHECK(horiz_decim == tmp);

    ImageGray<float64> vert_decim = my_dwt.vert();
    BOOST_CHECK_EQUAL(vert_decim.size_x(), uint64(2));
    BOOST_CHECK_EQUAL(vert_decim.size_y(), uint64(2));


	tmp[0][0]=0;
	tmp[1][0]=-6;
	tmp[0][1]=-2;
	tmp[1][1]=-2;

	BOOST_CHECK(vert_decim == tmp);

    ImageGray<float64> diag_decim = my_dwt.diag();
    BOOST_CHECK_EQUAL(diag_decim.size_x(), uint64(2));
    BOOST_CHECK_EQUAL(diag_decim.size_y(), uint64(2));


	tmp[0][0]=0;
	tmp[1][0]=-2;
	tmp[0][1]=-2;
	tmp[1][1]=-2;

	BOOST_CHECK(diag_decim == tmp);
}

BOOST_AUTO_TEST_CASE( dwt_undecimate_test )
{
    ImageGray<uint8> image(4,3);


    image[0][0]=1;
    image[1][0]=1;
    image[2][0]=1;
    image[3][0]=5;


    image[0][1]=1;
    image[1][1]=1;
    image[2][1]=3;
    image[3][1]=5;


    image[0][2]=6;
    image[1][2]=8;
    image[2][2]=2;
    image[3][2]=4;

    HAAR haar;
    const DWT<HAAR, UNDECIMATE>& my_dwt = calc_descriptor(new DWT<HAAR, UNDECIMATE>(haar), image);

    // Check id
    BOOST_CHECK(my_dwt.id()=="DWT_undecimate_1");

    ImageGray<float64> aux1 = my_dwt.aux1();
    BOOST_CHECK_EQUAL(aux1.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(aux1.size_y(), uint64(5));

    ImageGray<float64> tmp(6,5);
    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=2;
    tmp[2][1]=2;
    tmp[3][1]=6;
    tmp[4][1]=5;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=2;
    tmp[2][2]=4;
    tmp[3][2]=8;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(aux1 == tmp);

    ImageGray<float64> aux2 = my_dwt.aux2();
    BOOST_CHECK_EQUAL(aux2.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(aux2.size_y(), uint64(5));

    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=0;
    tmp[3][1]=-4;
    tmp[4][1]=5;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=0;
    tmp[2][2]=-2;
    tmp[3][2]=-2;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(aux2 == tmp);

    ImageGray<float64> approx = my_dwt.approx();
    BOOST_CHECK_EQUAL(approx.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(approx.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=4;
    tmp[2][1]=6;
    tmp[3][1]=14;
    tmp[4][1]=10;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=16;
    tmp[2][2]=14;
    tmp[3][2]=14;
    tmp[4][2]=9;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(approx == tmp);

    ImageGray<float64> horiz = my_dwt.horiz();
    BOOST_CHECK_EQUAL(horiz.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(horiz.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=-2;
    tmp[3][1]=-2;
    tmp[4][1]=0;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=-12;
    tmp[2][2]=-6;
    tmp[3][2]=2;
    tmp[4][2]=1;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(horiz == tmp);

    ImageGray<float64> vert = my_dwt.vert();
    BOOST_CHECK_EQUAL(vert.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(vert.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=-2;
    tmp[3][1]=-6;
    tmp[4][1]=10;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=-2;
    tmp[2][2]=4;
    tmp[3][2]=-4;
    tmp[4][2]=9;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(vert == tmp);

    ImageGray<float64> diag = my_dwt.diag();
    BOOST_CHECK_EQUAL(diag.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(diag.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=2;
    tmp[3][1]=-2;
    tmp[4][1]=0;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=2;
    tmp[2][2]=-8;
    tmp[3][2]=0;
    tmp[4][2]=1;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(diag == tmp);

}
    
BOOST_AUTO_TEST_CASE( dwt_multilevel_test )
{
	ImageGray<uint8> image(4,3);


	image[0][0]=1;
	image[1][0]=1;
	image[2][0]=1;
	image[3][0]=5;


	image[0][1]=1;
	image[1][1]=1;
	image[2][1]=3;
	image[3][1]=5;


	image[0][2]=6;
	image[1][2]=8;
	image[2][2]=2;
	image[3][2]=4;


    HAAR haar;
    const DWT<HAAR, DECIMATE, 2>& my_dwt = calc_descriptor(new DWT<HAAR, DECIMATE, 2>(haar), image);

    // Check id
    BOOST_CHECK(my_dwt.id()=="DWT_decimate_2");

    ImageGray<float64> tmp(6,5);

    ImageGray<float64> aux1 = my_dwt.aux1_before_decim();
    BOOST_CHECK_EQUAL(aux1.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(aux1.size_y(), uint64(5));

    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=2;
    tmp[2][1]=2;
    tmp[3][1]=6;
    tmp[4][1]=5;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=2;
    tmp[2][2]=4;
    tmp[3][2]=8;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(aux1 == tmp);

    ImageGray<float64> aux2 = my_dwt.aux2_before_decim();
    BOOST_CHECK_EQUAL(aux2.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(aux2.size_y(), uint64(5));

    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=0;
    tmp[3][1]=-4;
    tmp[4][1]=5;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=0;
    tmp[2][2]=-2;
    tmp[3][2]=-2;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(aux2 == tmp);

    ImageGray<float64> approx = my_dwt.approx_before_decim();
    BOOST_CHECK_EQUAL(approx.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(approx.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=4;
    tmp[2][1]=6;
    tmp[3][1]=14;
    tmp[4][1]=10;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=16;
    tmp[2][2]=14;
    tmp[3][2]=14;
    tmp[4][2]=9;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(approx == tmp);

    approx = my_dwt.approx_before_decim(1);
    BOOST_CHECK_EQUAL(approx.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(approx.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=40;
    tmp[2][1]=48;
    tmp[3][1]=47;
    tmp[4][1]=19;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=54;
    tmp[2][2]=44;
    tmp[3][2]=33;
    tmp[4][2]=13;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=24;
    tmp[2][3]=16;
    tmp[3][3]=10;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(approx == tmp);

    ImageGray<float64> horiz = my_dwt.horiz_before_decim();
    BOOST_CHECK_EQUAL(horiz.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(horiz.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=-2;
    tmp[3][1]=-2;
    tmp[4][1]=0;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=-12;
    tmp[2][2]=-6;
    tmp[3][2]=2;
    tmp[4][2]=1;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(horiz == tmp);

    horiz = my_dwt.horiz_before_decim(1);
    BOOST_CHECK_EQUAL(horiz.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(horiz.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=-20;
    tmp[2][1]=-8;
    tmp[3][1]=1;
    tmp[4][1]=1;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=6;
    tmp[2][2]=12;
    tmp[3][2]=13;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=24;
    tmp[2][3]=16;
    tmp[3][3]=10;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(horiz == tmp);

    const Border<ImageGray<float64> >& vert0 = my_dwt.vert_before_decim();
    BOOST_CHECK_EQUAL(vert0.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(vert0.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=-2;
    tmp[3][1]=-6;
    tmp[4][1]=10;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=-2;
    tmp[2][2]=4;
    tmp[3][2]=-4;
    tmp[4][2]=9;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(vert0 == tmp);

    const Border<ImageGray<float64> >& vert1 = my_dwt.vert_before_decim(1);
    BOOST_CHECK_EQUAL(vert1.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(vert1.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=-8;
    tmp[3][1]=9;
    tmp[4][1]=19;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=6;
    tmp[2][2]=4;
    tmp[3][2]=7;
    tmp[4][2]=13;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=4;
    tmp[2][3]=4;
    tmp[3][3]=2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(vert1 == tmp);

    Border<ImageGray<float64> > diag = my_dwt.diag_before_decim();
    BOOST_CHECK_EQUAL(diag.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(diag.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=2;
    tmp[3][1]=-2;
    tmp[4][1]=0;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=2;
    tmp[2][2]=-8;
    tmp[3][2]=0;
    tmp[4][2]=1;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(diag == tmp);

    diag = my_dwt.diag_before_decim(1);
    BOOST_CHECK_EQUAL(diag.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(diag.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=-4;
    tmp[2][1]=-8;
    tmp[3][1]=-1;
    tmp[4][1]=1;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=-2;
    tmp[2][2]=-4;
    tmp[3][2]=3;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=4;
    tmp[2][3]=4;
    tmp[3][3]=2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(diag == tmp);

    ImageGray<float64> approx_decim = my_dwt.approx();
    BOOST_CHECK_EQUAL(approx_decim.size_x(), uint64(2));
    BOOST_CHECK_EQUAL(approx_decim.size_y(), uint64(2));

    tmp.resize(2,2);
    tmp[0][0]=4;
    tmp[1][0]=14;
    tmp[0][1]=14;
    tmp[1][1]=6;

    BOOST_CHECK(approx_decim == tmp);

    approx_decim = my_dwt.approx(1);
    BOOST_CHECK_EQUAL(approx_decim.size_x(), uint64(1));
    BOOST_CHECK_EQUAL(approx_decim.size_y(), uint64(1));

    tmp.resize(1,1);
    tmp[0][0]=40;

    BOOST_CHECK(approx_decim == tmp);

    ImageGray<float64> horiz_decim = my_dwt.horiz();
    BOOST_CHECK_EQUAL(horiz_decim.size_x(), uint64(2));
    BOOST_CHECK_EQUAL(horiz_decim.size_y(), uint64(2));

    tmp.resize(2,2);
    tmp[0][0]=0;
    tmp[1][0]=-2;
    tmp[0][1]=14;
    tmp[1][1]=6;

    BOOST_CHECK(horiz_decim == tmp);

    horiz_decim = my_dwt.horiz(1);
    BOOST_CHECK_EQUAL(horiz_decim.size_x(), uint64(1));
    BOOST_CHECK_EQUAL(horiz_decim.size_y(), uint64(1));

    tmp.resize(1,1);
    tmp[0][0]=-20;


    BOOST_CHECK(horiz_decim == tmp);

    ImageGray<float64> vert_decim = my_dwt.vert();
    BOOST_CHECK_EQUAL(vert_decim.size_x(), uint64(2));
    BOOST_CHECK_EQUAL(vert_decim.size_y(), uint64(2));

    tmp.resize(2,2);
    tmp[0][0]=0;
    tmp[1][0]=-6;
    tmp[0][1]=-2;
    tmp[1][1]=-2;

    BOOST_CHECK(vert_decim == tmp);

    vert_decim = my_dwt.vert(1);
    BOOST_CHECK_EQUAL(vert_decim.size_x(), uint64(1));
    BOOST_CHECK_EQUAL(vert_decim.size_y(), uint64(1));

    tmp.resize(1,1);
    tmp[0][0]=0;

    BOOST_CHECK(vert_decim == tmp);

    ImageGray<float64> diag_decim = my_dwt.diag();
    BOOST_CHECK_EQUAL(diag_decim.size_x(), uint64(2));
    BOOST_CHECK_EQUAL(diag_decim.size_y(), uint64(2));

    tmp.resize(2,2);
    tmp[0][0]=0;
    tmp[1][0]=-2;
    tmp[0][1]=-2;
    tmp[1][1]=-2;

    BOOST_CHECK(diag_decim == tmp);

    diag_decim = my_dwt.diag(1);
    BOOST_CHECK_EQUAL(diag_decim.size_x(), uint64(1));
    BOOST_CHECK_EQUAL(diag_decim.size_y(), uint64(1));

    tmp.resize(1,1);
    tmp[0][0]=-4;

    BOOST_CHECK(diag_decim == tmp);


}

BOOST_AUTO_TEST_CASE( dwt_undecimate_multilevel_test )
{
    ImageGray<uint8> image(4,3);


    image[0][0]=1;
    image[1][0]=1;
    image[2][0]=1;
    image[3][0]=5;


    image[0][1]=1;
    image[1][1]=1;
    image[2][1]=3;
    image[3][1]=5;


    image[0][2]=6;
    image[1][2]=8;
    image[2][2]=2;
    image[3][2]=4;


    HAAR haar;
    const DWT<HAAR, UNDECIMATE, 2>& my_dwt = calc_descriptor(new DWT<HAAR, UNDECIMATE, 2>(haar), image);

    // Check id
    BOOST_CHECK(my_dwt.id()=="DWT_undecimate_2");

    ImageGray<float64> tmp(6,5);

    ImageGray<float64> aux1 = my_dwt.aux1();
    BOOST_CHECK_EQUAL(aux1.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(aux1.size_y(), uint64(5));

    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=2;
    tmp[2][1]=2;
    tmp[3][1]=6;
    tmp[4][1]=5;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=2;
    tmp[2][2]=4;
    tmp[3][2]=8;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(aux1 == tmp);

    ImageGray<float64> aux2 = my_dwt.aux2();
    BOOST_CHECK_EQUAL(aux2.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(aux2.size_y(), uint64(5));

    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=0;
    tmp[3][1]=-4;
    tmp[4][1]=5;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=0;
    tmp[2][2]=-2;
    tmp[3][2]=-2;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(aux2 == tmp);

    ImageGray<float64> approx = my_dwt.approx();
    BOOST_CHECK_EQUAL(approx.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(approx.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=4;
    tmp[2][1]=6;
    tmp[3][1]=14;
    tmp[4][1]=10;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=16;
    tmp[2][2]=14;
    tmp[3][2]=14;
    tmp[4][2]=9;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(approx == tmp);

    approx = my_dwt.approx(1);
    BOOST_CHECK_EQUAL(approx.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(approx.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=40;
    tmp[2][1]=48;
    tmp[3][1]=47;
    tmp[4][1]=19;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=54;
    tmp[2][2]=44;
    tmp[3][2]=33;
    tmp[4][2]=13;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=24;
    tmp[2][3]=16;
    tmp[3][3]=10;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(approx == tmp);

    ImageGray<float64> horiz = my_dwt.horiz();
    BOOST_CHECK_EQUAL(horiz.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(horiz.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=-2;
    tmp[3][1]=-2;
    tmp[4][1]=0;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=-12;
    tmp[2][2]=-6;
    tmp[3][2]=2;
    tmp[4][2]=1;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=14;
    tmp[2][3]=10;
    tmp[3][3]=6;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(horiz == tmp);

    horiz = my_dwt.horiz(1);
    BOOST_CHECK_EQUAL(horiz.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(horiz.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=-20;
    tmp[2][1]=-8;
    tmp[3][1]=1;
    tmp[4][1]=1;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=6;
    tmp[2][2]=12;
    tmp[3][2]=13;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=24;
    tmp[2][3]=16;
    tmp[3][3]=10;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(horiz == tmp);

    const Border<ImageGray<float64> >& vert0 = my_dwt.vert();
    BOOST_CHECK_EQUAL(vert0.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(vert0.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=-2;
    tmp[3][1]=-6;
    tmp[4][1]=10;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=-2;
    tmp[2][2]=4;
    tmp[3][2]=-4;
    tmp[4][2]=9;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(vert0 == tmp);

    const Border<ImageGray<float64> >& vert1 = my_dwt.vert(1);
    BOOST_CHECK_EQUAL(vert1.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(vert1.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=-8;
    tmp[3][1]=9;
    tmp[4][1]=19;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=6;
    tmp[2][2]=4;
    tmp[3][2]=7;
    tmp[4][2]=13;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=4;
    tmp[2][3]=4;
    tmp[3][3]=2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(vert1 == tmp);

    Border<ImageGray<float64> > diag = my_dwt.diag();
    BOOST_CHECK_EQUAL(diag.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(diag.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=0;
    tmp[2][1]=2;
    tmp[3][1]=-2;
    tmp[4][1]=0;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=2;
    tmp[2][2]=-8;
    tmp[3][2]=0;
    tmp[4][2]=1;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=-2;
    tmp[2][3]=6;
    tmp[3][3]=-2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(diag == tmp);

    diag = my_dwt.diag(1);
    BOOST_CHECK_EQUAL(diag.size_x(), uint64(6));
    BOOST_CHECK_EQUAL(diag.size_y(), uint64(5));


    tmp[0][0]=0;
    tmp[1][0]=0;
    tmp[2][0]=0;
    tmp[3][0]=0;
    tmp[4][0]=0;
    tmp[5][0]=0;
    tmp[0][1]=0;
    tmp[1][1]=-4;
    tmp[2][1]=-8;
    tmp[3][1]=-1;
    tmp[4][1]=1;
    tmp[5][1]=0;
    tmp[0][2]=0;
    tmp[1][2]=-2;
    tmp[2][2]=-4;
    tmp[3][2]=3;
    tmp[4][2]=5;
    tmp[5][2]=0;
    tmp[0][3]=0;
    tmp[1][3]=4;
    tmp[2][3]=4;
    tmp[3][3]=2;
    tmp[4][3]=4;
    tmp[5][3]=0;
    tmp[0][4]=0;
    tmp[1][4]=0;
    tmp[2][4]=0;
    tmp[3][4]=0;
    tmp[4][4]=0;
    tmp[5][4]=0;

    BOOST_CHECK(diag == tmp);


}

BOOST_AUTO_TEST_SUITE_END ();
