##############################################################################
#                                                                            #
# Copyright (C) 2007 UPC All Rights Reserved.                                #
#                                                                            #
# See COPYRIGHT file enclosed with this distribution.                        #
#                                                                            #
##############################################################################

##############################################################################
#                                                                            #
#  ImagePlus Build System - Options                                          #
#                                                                            #
# This file describes the build option for the user.                         #
# These options can be configured from the command line or from the          #
# 'user.build' file.                                                         #
#                                                                            #
#  CREATED BY :  Albert Gil, UPC (agil@gps.tsc.upc.edu)                      #
#                                                                            #
##############################################################################

Import('*')
import os

#opts = Options()
opts = Variables()

# get the compiler from system or use the default (g++) 
if 'CXX' in os.environ:
	CXX_detected = os.environ['CXX']
else:
    CXX_detected = 'g++'

opts.AddVariables(
    
    #
    # Options used only under Microsoft Visual C++
    #
    # Note: BOOSTPATH should be renamed to BOOST_CPP_PATH and BOOST_LIB_PATH
    #
    BoolVariable('msvc'         , 'use Visual Studio tool-chain'              , False ),
    PathVariable('WINSDK_UPC'   , 'path to the WinSDK-UPC root directory'     , '\\Program Files (x86)\\WinSDK-UPC' , PathVariable.PathAccept),
    
    #
    # General Options
    #
    
    ('CXX', 'The C++ compiler', CXX_detected ),
    
	BoolVariable('debug'    , 'build in debug mode'         , False ),
	BoolVariable('verbose'  , 'to see the builder commands' , False ),
	
	BoolVariable('static', 'force static linking - this option will force: USE_IMAGEMAGICK=False and USE_FFMPEG=False', False),
	
	BoolVariable('buildtests'   , 'to build the tests of the target' , True ),
	BoolVariable('runtests'     , 'to run the tests of the target'   , False ),
	BoolVariable('profile'      , 'to profile with gprof and gcov'   , False ),
	
	BoolVariable('valgrind'     , 'to run the tests under valgrind'  , False ),
	PathVariable('run_cmd'      , 'command to launch the tests (useful for srun)' , '', PathVariable.PathAccept),
	
	BoolVariable('precompiled'  , 'to link with a precompiled version of the library'   , False ),
	
	PathVariable('TEST_DATA_PATH_R'   , 'path to read the tests data'  , 'tests/data_r', PathVariable.PathAccept),
	PathVariable('TEST_DATA_PATH_W'   , 'path to write the tests data' , 'tests/data_w', PathVariable.PathAccept),
	
	PathVariable('BOOST_CPP_PATH', 'path to the Boost C++ Libraries headers (the include dir, not the include/boost dir', '', PathVariable.PathAccept),
	PathVariable('BOOST_LIB_PATH', 'path to the Boost C++ Libraries libs', '', PathVariable.PathAccept),

	BoolVariable('USE_BOOST_TEST_HEADERS' ,  'to build the tests using the implementation headers instead of linking against the library'   , False ),
		
	BoolVariable('USE_IMAGEMAGICK' , 'to link with Magick++'                 , False ),
	BoolVariable('USE_FFTW3'       , 'to link with fftw3'                    , False ),
	BoolVariable('USE_FFMPEG'      , 'to link with fftmpeg'                  , False ),
	BoolVariable('USE_VIDEO4LINUX' , 'to link with Video For Linux'          , False ),
	BoolVariable('USE_XML'         , 'to link with the XML library (Xerces)' , False ),
	BoolVariable('USE_OPENGL'      , 'to link with OpenGL library'           , False ),
	BoolVariable('USE_OPENCL'      , 'to link with OpenCL library'           , False ),
	BoolVariable('USE_OPENMESH'    , 'to link with OpenMesh library'         , False ),
	BoolVariable('USE_OPENNI'      , 'to link with OpenNI library'           , False ),
	BoolVariable('USE_CUDA'        , 'to use CUDA, the NVidia SDK'           , False ),
	BoolVariable('USE_SMARTFLOW'   , 'to link with SmartFlow'                , False ),
	BoolVariable('USE_WT'          , 'to link with Wt'                       , False ),
	
	PathVariable(       'CUDA_SDK_PATH', 'path to CUDA, the NVidia SDK'           , '', PathVariable.PathAccept),
	
	PathVariable('IMAGEMAGICK_LIB_PATH', 'path to ImageMagick library (Magick++)' , '', PathVariable.PathAccept),
	PathVariable(      'FFTW3_LIB_PATH', 'path to fftw library'                   , '', PathVariable.PathAccept),
	PathVariable(     'FFMPEG_LIB_PATH', 'path to the FFMPEG library'             , '', PathVariable.PathAccept),
	PathVariable(        'XML_LIB_PATH', 'path to the XML library (Xerces)'       , '', PathVariable.PathAccept),
	PathVariable(     'OPENGL_LIB_PATH', 'path to OpenGL library'                 , '', PathVariable.PathAccept),
	PathVariable(     'OPENCL_LIB_PATH', 'path to OpenCL library'                 , '', PathVariable.PathAccept),
	PathVariable(   'OPENMESH_LIB_PATH', 'path to OpenMesh library'               , '', PathVariable.PathAccept),
	PathVariable(     'OPENNI_LIB_PATH', 'path to OpenMesh library'               , '', PathVariable.PathAccept),
	PathVariable(  'SMARTFLOW_LIB_PATH', 'path to the SmartFlow library'          , '', PathVariable.PathAccept),
	PathVariable(         'WT_LIB_PATH', 'path to the Wt library'                 , '', PathVariable.PathAccept),
		
	PathVariable('IMAGEMAGICK_CPP_PATH', 'path to ImageMagick headers (Magick++)' , '', PathVariable.PathAccept),
	PathVariable(      'FFTW3_CPP_PATH', 'path to fftw headers'                   , '', PathVariable.PathAccept),
	PathVariable(     'FFMPEG_CPP_PATH', 'path to the FFMPEG headers'             , '', PathVariable.PathAccept),
	PathVariable(        'XML_CPP_PATH', 'path to the XML (Xerces) headers'       , '', PathVariable.PathAccept),
	PathVariable(     'OPENGL_CPP_PATH', 'path to OpenGL headers'                 , '', PathVariable.PathAccept),
	PathVariable(     'OPENCL_CPP_PATH', 'path to OpenCL headers'                 , '', PathVariable.PathAccept),
	PathVariable(   'OPENMESH_CPP_PATH', 'path to OpenMesh headers'               , '', PathVariable.PathAccept),
	PathVariable(     'OPENNI_CPP_PATH', 'path to OpenMesh headers'               , '/usr/local/include/ni', PathVariable.PathAccept),
	PathVariable(  'SMARTFLOW_CPP_PATH', 'path to the SmartFlow headers'          , '', PathVariable.PathAccept),
	PathVariable(         'WT_CPP_PATH', 'path to the Wt headers'                 , '', PathVariable.PathAccept),
		
	PathVariable('buildsuffix' , 'suffix for release/debug modes' , 'release', PathVariable.PathAccept),
)
# TODO: Add the dynamic option
#	BoolOption('dynamic', 'build in dynamic mode', False),

Export('opts')
