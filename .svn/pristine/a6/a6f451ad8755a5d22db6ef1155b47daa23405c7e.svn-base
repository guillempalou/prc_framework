
// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file circle_geometry.test
//!
//!  Tests for functions in circle_geometry.hpp
//!

#include <imageplus/core.hpp>
#include <imageplus/math/geometry/circle_geometry.hpp>
#include <imageplus/math/geometry/bbox_math.hpp>

BOOST_AUTO_TEST_SUITE ( suite_math_geometry_circle_geomtry );

using namespace imageplus;

BOOST_AUTO_TEST_CASE ( test_math_geometry_circle_geometry )
{
	
    // circle_bbox
    Point2D center(0.5, 4.5);
    float64 radius = 0.5;

    BBox2D bb = imageplus::math::geometry::circle_bbox(center, radius);
    BOOST_CHECK(bb.origin() == Coord2D<> (0,4));
    BOOST_CHECK(bb.side_x() == (size_type)2);
    BOOST_CHECK(bb.side_y() == (size_type)2);

    radius += 0.1001;
    bb = imageplus::math::geometry::circle_bbox(center, radius);
    BOOST_CHECK(bb.origin() == Coord2D<> (-1,3));
    BOOST_CHECK(bb.side_x() == (size_type)4);
    BOOST_CHECK(bb.side_y() == (size_type)4);

    center.x() = 1;
    center.y() = 5;
    radius = 0.5;
    bb = imageplus::math::geometry::circle_bbox(center,radius);
    BOOST_CHECK(bb.origin() == Coord2D<> (0,4)); 
    BOOST_CHECK(bb.side_x() == (size_type)3);
    BOOST_CHECK(bb.side_y() == (size_type)3);
    
    center.x() = -1;
    center.y() = 2;
    radius = 5.75;
    bb = imageplus::math::geometry::circle_bbox(center,radius);
    BOOST_CHECK(bb.origin() == Coord2D<> (-7,-4)); 
    BOOST_CHECK(bb.side_x() == (size_type)13);
    BOOST_CHECK(bb.side_y() == (size_type)13);

    // on_circle
    center.x() = center.y() = 0;
    radius = 1;
    Coord2D<>  point(0, 1);
    BOOST_CHECK(imageplus::math::geometry::on_circle(point, center, radius*radius));

    point.x() = point.y() = 1;
    BOOST_CHECK( !imageplus::math::geometry::on_circle(point, center, radius*radius));
    
    // on_circumference
    point.x() = 0;
    BOOST_CHECK(imageplus::math::geometry::on_circumference(point, center, radius*radius, (radius-0.0001)*(radius-0.0001))); 

    point.y() = 0;
    BOOST_CHECK( !imageplus::math::geometry::on_circumference(point, center, radius*radius, (radius)*(radius))); 

    // points_on_circle
    // Get a bounding box of a circle:
    point.x() = point.y() = 0;  
    center.x() = center.y() = 0;
    srand((unsigned)time(0));
    radius = 1.0+float64(10.0*rand()/(RAND_MAX + 1.0));

    bb = imageplus::math::geometry::circle_bbox(center, radius);
    BBox2D other_bb = BBox2D(Coord2D<> (-2, -2), 10, 10);
    
    // Get the points in the circle
    MultiArray<Coord2D<> , 1> point_selected;
    size_type num_points = imageplus::math::geometry::points_on_circle(center, radius, other_bb, point_selected);
    
    math::geometry::limit_bbox_to_bbox(other_bb, bb);
    Coord2D<>  point_check = bb.origin();
    Coord2D<>  point_check_end = bb.opposite();
    float64 pow2_radius = radius*radius;
    
    size_type num_points_check = 0;
    while (point_check.x() <= point_check_end.x()) {
        point_check.y() = bb.origin()[0];
	while (point_check.y() <= point_check_end.y()) {
	    
	    if (imageplus::math::geometry::on_circle(point_check, center, pow2_radius)) {
	        num_points_check++;
		bool found = false;
	        for (size_type i = 0; i < point_selected.dims(0); i++) {
		    if (point_check == point_selected[i]) {
		        found = true;
		    } 
		}
		if (!found) {
		    BOOST_ERROR("you found a bug : center( " << center.x() << ", " << center.y() << ") ; radius = " << radius << " : please report this line");
		} 
	    } else {
	        bool found = false;
	        for (size_type i = 0; i < point_selected.dims(0); i++) {
		    if (point_check == point_selected[i]) {
		        found = true;
		    } 
		}
		if (found) {
		    BOOST_ERROR("you found a bug : center( " << center.x() << ", " << center.y() << ") ; radius = " << radius << " : please report this line");
		} 
	    }
	    point_check.y()++;
        }

        point_check.x()++;
    }
    BOOST_CHECK(num_points == num_points_check);
    
}

BOOST_AUTO_TEST_SUITE_END ();
