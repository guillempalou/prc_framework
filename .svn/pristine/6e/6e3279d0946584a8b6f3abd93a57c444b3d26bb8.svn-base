// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//! \file colorspace_descriptors.test
//!
//! Tests for colorspace descriptors
//!
#include <imageplus/core.hpp>

BOOST_AUTO_TEST_SUITE ( Colorspace_descriptors_Suite );

using namespace imageplus;

BOOST_AUTO_TEST_CASE( VDOriginalImage_test)
{
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 25;
    my_im_part[0][1] = 25;
    my_im_part[0][2] = 10;
    my_im_part[1][0] = 12;
    my_im_part[1][1] = 10;
    my_im_part[1][2] = 10;
    my_im_part[2][0] = 3;
    my_im_part[2][1] = 3;
    my_im_part[2][2] = 2;

    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);

    ImageRGB<uint8> my_image(3,3);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(1)[2][2] = 250;
    my_image(2)[2][2] = 6;

    const VDOriginalImage<ImageRGB<uint8> >& desc= calc_descriptor(new VDOriginalImage<ImageRGB<uint8> >(), my_image);

    BOOST_CHECK( desc(0) == my_image(0));
    BOOST_CHECK( desc(1) == my_image(1));
    BOOST_CHECK( desc(2) == my_image(2));

    const VDOriginalImage<ImageRGB<uint8> >& desc2= calc_descriptor(new VDOriginalImage<ImageRGB<uint8> >(), my_image, my_part[2]);

    BOOST_CHECK( desc2.size_x() == 1);
    BOOST_CHECK( desc2.size_y() == 1);
    BOOST_CHECK( desc2(0)[2][2] == 1);
    BOOST_CHECK( desc2(1)[2][2] == 250);
    BOOST_CHECK( desc2(2)[2][2] == 6);
}

BOOST_AUTO_TEST_CASE( VDImageYUV_test)
{
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 25;
    my_im_part[0][1] = 25;
    my_im_part[0][2] = 10;
    my_im_part[1][0] = 12;
    my_im_part[1][1] = 10;
    my_im_part[1][2] = 10;
    my_im_part[2][0] = 3;
    my_im_part[2][1] = 3;
    my_im_part[2][2] = 2;

    ImageRGB<uint8> my_image(3,3);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(0)[0][0] = 25;
    my_image(0)[2][0] = 2;
    my_image(0)[1][2] = 6;

    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);

    merge_regions(2, 3, 26, my_part);
    merge_regions(10, 26, 27, my_part);
    merge_regions(25, 12, 30, my_part);
    merge_regions(27, 30, 31, my_part);

    const VDImageYUV<ImageRGB<uint8> >& desc = calc_descriptor(new VDImageYUV<ImageRGB<uint8> >(), my_image, my_part[31]);

    ImageYUV<uint8> image2 = to_yuv(my_image);

    BOOST_CHECK( desc(0) == image2(0));
    BOOST_CHECK( desc(1) == image2(1));
    BOOST_CHECK( desc(2) == image2(2));

    const VDImageYUV<ImageRGB<uint8> >& desc2= calc_descriptor(new VDImageYUV<ImageRGB<uint8> >(), my_image, my_part[3]);

    BOOST_CHECK( desc2.size_x() == 1);
    BOOST_CHECK( desc2.size_y() == 2);
    BOOST_CHECK_EQUAL( desc2(0)[2][0], image2(0)[2][0]);
    BOOST_CHECK_EQUAL( desc2(1)[2][0], image2(1)[2][0]);
    BOOST_CHECK_EQUAL( desc2(2)[2][0], image2(2)[2][0]);
    BOOST_CHECK_EQUAL( desc2(0)[2][1], image2(0)[2][1]);
    BOOST_CHECK_EQUAL( desc2(1)[2][1], image2(1)[2][1]);
    BOOST_CHECK_EQUAL( desc2(2)[2][1], image2(2)[2][1]);
}


BOOST_AUTO_TEST_CASE( VDImageCIELab_test)
{
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 25;
    my_im_part[0][1] = 25;
    my_im_part[0][2] = 10;
    my_im_part[1][0] = 12;
    my_im_part[1][1] = 10;
    my_im_part[1][2] = 10;
    my_im_part[2][0] = 3;
    my_im_part[2][1] = 3;
    my_im_part[2][2] = 2;

    ImageRGB<uint8> my_image(3,3);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(0)[0][0] = 25;
    my_image(0)[2][0] = 2;
    my_image(0)[1][2] = 6;

    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);

    merge_regions(2, 3, 26, my_part);
    merge_regions(10, 26, 27, my_part);
    merge_regions(25, 12, 30, my_part);
    merge_regions(27, 30, 31, my_part);

    const VDImageCIELab<ImageRGB<uint8> >& desc = calc_descriptor(new VDImageCIELab<ImageRGB<uint8> >(), my_image, my_part[31]);

    ImageCIELab<uint8> image2 = to_cielab(my_image);

    BOOST_CHECK( desc(0) == image2(0));
    BOOST_CHECK( desc(1) == image2(1));
    BOOST_CHECK( desc(2) == image2(2));

    const VDImageCIELab<ImageRGB<uint8> >& desc2= calc_descriptor(new VDImageCIELab<ImageRGB<uint8> >(), my_image, my_part[26]);

    BOOST_CHECK( desc2.size_x() == 1);
    BOOST_CHECK( desc2.size_y() == 3);
    BOOST_CHECK_EQUAL( desc2(0)[2][0], image2(0)[2][0]);
    BOOST_CHECK_EQUAL( desc2(1)[2][0], image2(1)[2][0]);
    BOOST_CHECK_EQUAL( desc2(2)[2][0], image2(2)[2][0]);
    BOOST_CHECK_EQUAL( desc2(0)[2][1], image2(0)[2][1]);
    BOOST_CHECK_EQUAL( desc2(1)[2][1], image2(1)[2][1]);
    BOOST_CHECK_EQUAL( desc2(2)[2][1], image2(2)[2][1]);
    BOOST_CHECK_EQUAL( desc2(0)[2][2], image2(0)[2][2]);
    BOOST_CHECK_EQUAL( desc2(1)[2][2], image2(1)[2][2]);
    BOOST_CHECK_EQUAL( desc2(2)[2][2], image2(2)[2][2]);
}


BOOST_AUTO_TEST_CASE( VDImageGray_test)
{
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 25;
    my_im_part[0][1] = 25;
    my_im_part[0][2] = 10;
    my_im_part[1][0] = 12;
    my_im_part[1][1] = 10;
    my_im_part[1][2] = 10;
    my_im_part[2][0] = 3;
    my_im_part[2][1] = 3;
    my_im_part[2][2] = 2;

    ImageRGB<uint8> my_image(3,3);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(0)[0][0] = 25;
    my_image(0)[2][0] = 2;
    my_image(0)[1][2] = 6;

    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);

    merge_regions(2, 3, 26, my_part);
    merge_regions(10, 26, 27, my_part);
    merge_regions(25, 12, 30, my_part);
    merge_regions(27, 30, 31, my_part);


    const VDImageGray<ImageRGB<uint8> >& desc = calc_descriptor(new VDImageGray<ImageRGB<uint8> >(), my_image, my_part[31]);

    ImageGray<uint8> image2 = to_gray(my_image);

    BOOST_CHECK( desc(0) == image2(0));

    const VDImageGray<ImageRGB<uint8> >& desc2= calc_descriptor(new VDImageGray<ImageRGB<uint8> >(), my_image, my_part[26]);

    BOOST_CHECK( desc2.size_x() == 1);
    BOOST_CHECK( desc2.size_y() == 3);
    BOOST_CHECK_EQUAL( desc2(0)[2][0], image2(0)[2][0]);
    BOOST_CHECK_EQUAL( desc2(0)[2][1], image2(0)[2][1]);
    BOOST_CHECK_EQUAL( desc2(0)[2][2], image2(0)[2][2]);

}


BOOST_AUTO_TEST_SUITE_END ();



