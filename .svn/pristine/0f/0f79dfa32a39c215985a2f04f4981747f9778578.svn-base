// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file context.hpp
//!
//!  Functions to retrieve context of images or volumes
//!

#ifndef IMAGEPLUS_CORE_CONTEXT_HPP
#define IMAGEPLUS_CORE_CONTEXT_HPP

#include <imageplus/core/imageplus_types.hpp>
#include <imageplus/core/multiarray.hpp>
#include <imageplus/core/coord2d.hpp>
#include <boost/array.hpp>

#include <vector>
 
namespace imageplus
{


    //!
    //! \brief Determines MultiArray Context 1 of a point
    //!
    //! Returns a vector holding the value of context 1, i.e. the value of the
    //! given point.
    //!
    //! \author Eduardo Mendon�a <eduardo@gps.tsc.upc.edu>
    //!
    //! \date 10-6-2008
    //!
    //! \param[in] m         : MultiArray with context
    //! \param[in] point    : Point to extract context
    //! \param[in,out] c    : Vector that stores context
    //!
    //! \return Reference to vector holding the full context.
    //!
    template <class T>
    IMAGEPLUS_INLINE
    std::vector<T>& context1_2d(const MultiArray<T, 2>& m, const Coord2D<>& point, std::vector<T>& c)
    {
	ASSERT(point.x() >= 0 and point.y() >= 0 and 
	       point.x() < (int64)m.dims(0) and point.y() < (int64)m.dims(1),
	       "Out of range.");
	c[0] = m[point.x()][point.y()];
	
	return c;
    }

    
    //!
    //! \brief Determines MultiArray Context 5 of a point
    //!
    //! Returns a vector holding the four closesest neighbours and the value of the
    //! given point.
    //!
    //! \author Eduardo Mendon�a <eduardo@gps.tsc.upc.edu>
    //!
    //! \date 10-6-2008
    //!
    //! \param[in] m         : MultiArray with context
    //! \param[in] point     : Point to extract context
    //! \param[in,out] c    : Vector that stores context
    //!
    //! \return Reference ot vector holding the full context.
    //!
    template <class T>
    IMAGEPLUS_INLINE
    std::vector<T>& context5_2d(const MultiArray<T, 2>& m, const Coord2D<> & point, std::vector<T>& c)
    {
	ASSERT(point.x()-1 >= 0 and point.y()-1 >= 0 and 
	       point.x()+1 < (int64)m.dims(0) and point.y()+1 < (int64)m.dims(1),
	       "Out of range. Did you forgot to apply padding.");

	imageplus::size_type i = point.x(), j = point.y();

	c[0] = m[i][j];
	c[1] = m[i+1][j];   c[2] = m[i][j+1];
	c[3] = m[i-1][j];   c[4] = m[i][j-1];

	return c;
    }

    //!
    //! \brief Determines MultiArray Context 5 of a point
    //!
    //! Returns a vector holding the eight closesest neighbours and the value of the
    //! given point.
    //!
    //! \author Eduardo Mendon�a <eduardo@gps.tsc.upc.edu>
    //!
    //! \date 10-6-2008
    //!
    //! \param[in] m         : MultiArray with context
    //! \param[in] point    : Point to extract context
    //! \param[in,out] c    : Vector that stores context
    //!
    //! \return Reference to vector holding the full context.
    //!
    template <class T>
    IMAGEPLUS_INLINE
    std::vector<T>& context9_2d(const MultiArray<T, 2>& m, const Coord2D<> & point, std::vector<T>& c)
    {
	ASSERT(point.x()-1 >= 0 and point.y()-1 >= 0 and 
	       point.x()+1 < (int64)m.dims(0) and point.y()+1 < (int64)m.dims(1),
	       "Out of range. Did you forgot to apply padding.");

	imageplus::size_type i = point.x(), j = point.y();

	c[0] = m[i][j];
	c[1] = m[i+1][j];   c[2] = m[i][j+1];
	c[3] = m[i-1][j];   c[4] = m[i][j-1];
	c[5] = m[i+1][j+1]; c[6] = m[i+1][j-1];
	c[7] = m[i-1][j+1]; c[8] = m[i-1][j-1];

	return c;
    }




    //!
    //! \brief Determines MultiArray Context 1 of a point
    //!
    //! Returns a vector holding the value of context 1, i.e. the value of the
    //! given point.
    //!
    //! \author Eduardo Mendon�a <eduardo@gps.tsc.upc.edu>
    //!
    //! \date 10-6-2008
    //!
    //! \param[in] m         : MultiArray with context
    //! \param[in] point    : Point to extract context
    //! \param[in,out] c    : Array that stores context
    //!
    //! \return Reference to array holding the full context.
    //!
    template <class T>
    IMAGEPLUS_INLINE
    boost::array<T, 1>& context_2d(const MultiArray<T, 2>& m, const Coord2D<> & point, boost::array<T,1>& c)
    {
	ASSERT(point.x() >= 0 and point.y() >= 0 and 
	       point.x() < (int64)m.dims(0) and point.y() < (int64)m.dims(1),
	       "Out of range.");
	c[0] = m[point.x()][point.y()];
	
	return c;
    }

    
    //!
    //! \brief Determines MultiArray Context 5 of a point
    //!
    //! Returns a vector holding the four closesest neighbours and the value of the
    //! given point.
    //!
    //! \author Eduardo Mendon�a <eduardo@gps.tsc.upc.edu>
    //!
    //! \date 10-6-2008
    //!
    //! \param[in] m         : MultiArray with context
    //! \param[in] point     : Point to extract context
    //! \param[in,out] c    : Array that stores context
    //!
    //! \return Reference to array holding the full context.
    //!
    template <class T>
    IMAGEPLUS_INLINE
    boost::array<T,5>& context_2d(const MultiArray<T, 2>& m, const Coord2D<> & point, boost::array<T,5>& c)
    {
	ASSERT(point.x()-1 >= 0 and point.y()-1 >= 0 and 
	       point.x()+1 < (int64)m.dims(0) and point.y()+1 < (int64)m.dims(1),
	       "Out of range. Did you forgot to apply padding.");
	
	imageplus::size_type i = point.x(), j = point.y();

	c[0] = m[i][j];
	c[1] = m[i+1][j];   c[2] = m[i][j+1];
	c[3] = m[i-1][j];   c[4] = m[i][j-1];

	return c;
    }

    //!
    //! \brief Determines MultiArray Context 5 of a point
    //!
    //! Returns a vector holding the eight closesest neighbours and the value of the
    //! given point.
    //!
    //! \author Eduardo Mendon�a <eduardo@gps.tsc.upc.edu>
    //!
    //! \date 10-6-2008
    //!
    //! \param[in] m         : MultiArray with context
    //! \param[in] point    : Point to extract context
    //! \param[in,out] c    : Array that stores context
    //!
    //! \return Reference to array holding the full context.
    //!
    template <class T>
    IMAGEPLUS_INLINE
    boost::array<T,9>& context_2d(const MultiArray<T, 2>& m, const Coord2D<> & point, boost::array<T,9>& c)
    {
	ASSERT(point.x()-1 >= 0 and point.y()-1 >= 0 and 
	       point.x()+1 < (int64)m.dims(0) and point.y()+1 < (int64)m.dims(1),
	       "Out of range. Did you forgot to apply padding.");

	imageplus::size_type i = point.x(), j = point.y();

	c[0] = m[i][j];
	c[1] = m[i+1][j];   c[2] = m[i][j+1];
	c[3] = m[i-1][j];   c[4] = m[i][j-1];
	c[5] = m[i+1][j+1]; c[6] = m[i+1][j-1];
	c[7] = m[i-1][j+1]; c[8] = m[i-1][j-1];

	return c;
    }

}

#endif
