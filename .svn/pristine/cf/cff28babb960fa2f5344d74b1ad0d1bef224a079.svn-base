// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file eigenvalues.hpp
//!
//!  Class to compute eigenvalues and eigenvectors of real (non-complex) matrices
//!

#ifndef IMAGEPLUS_MATH_NUMERIC_EIGENVALUES_HPP
#define IMAGEPLUS_MATH_NUMERIC_EIGENVALUES_HPP

#include <imageplus/core.hpp>

namespace imageplus
{
    namespace math  
    {
        namespace numeric
        {
            
            //!
            //! \brief Calculates the eigenvalues and eigenvectors of a real (non-complex) matrix
            //! 
            //! Given a real, square matrix A, A*V = V*D.
            //! (Adapted from JAMA, a Java Matrix Library, developed by jointly 
            //! by the Mathworks and NIST; see  http://math.nist.gov/javanumerics/jama).
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //! \author Roger Gimeno Hernandez <algimeno@gps.tsc.upc.edu>
            //!
            //! \date 22-5-2008
            //!
        
            template <typename T>
            class Eigenvalues
            {
                public:
    
                    //!
                    //! \brief Constructor. Check for symmetry, then construct the eigenvalue decomposition
                    //!
                    //! \param[in] A: Square real (non-complex) matrix
                    //!
                    Eigenvalues (const MultiArray<T,2>& A); 

                    //!
                    //! \brief  Computes the eigenvalue decomposition after construction
                    //!
                    //! \param[in] A: Square real (non-complex) matrix
                    //!
                    void calculate (const MultiArray<T,2>& A);
    
                    //!
                    //! \brief Access the eigenvectors matrix
                    //!
                    //! \return Matrix with the eigenvectors (one eigenvector in each column)
                    //! 
                    const MultiArray<T,2>& eigenvectors () const;
    
                    //!
                    //! \brief Access the real parts of the eigenvalues
                    //!
                    //! \return Vector with real parts of the eigenvalues.
                    //!
                    const MultiArray<T,1>& real_eigenvalues () const;
    
                    //!
                    //! \brief Access the imaginary parts of the eigenvalues
                    //!
                    //! \return Vector with imaginary parts of the eigenvalues.
                    //!
                    const MultiArray<T,1>& imag_eigenvalues () const;
       
                    
                    //!
                    //! \brief Computes the block diagonal eigenvalue matrix.
                    //!
                    //!    If the original matrix A is not symmetric, then the eigenvalue 
                    //!    matrix D is block diagonal with the real eigenvalues in 1-by-1 
                    //!    blocks and any complex eigenvalues,
                    //!    a + i*b, in 2-by-2 blocks, [a, b; -b, a].  That is, if the complex
                    //!    eigenvalues look like
                    //!    <pre>
                    //!
                    //!    u + iv     .        .          .      .    .
                    //!    .      u - iv     .          .      .    .
                    //!    .        .      a + ib       .      .    .
                    //!    .        .        .        a - ib   .    .
                    //!    .        .        .          .      x    .
                    //!    .        .        .          .      .    y
                    //!    </pre>
                    //!    then D looks like
                    //!    <pre>
                    //!
                    //!    u        v        .          .      .    .
                    //!    -v        u        .          .      .    . 
                    //!    .        .        a          b      .    .
                    //!    .        .       -b          a      .    .
                    //!    .        .        .          .      x    .
                    //!    .        .        .          .      .    y
                    //!    </pre>
                    //!    This keeps V a real matrix in both symmetric and non-symmetric
                    //!    cases, and A*V = V*D.
                    //!
                    //!    \return Block diagonal eigenvalue matrix.
                    //!    
        
                    MultiArray<T,2> getD () const;
    
    
                private:

                    //!
                    //! \brief Symmetric Householder reduction to tridiagonal form.
                    //!
                    void _tred2();
    
                    //!
                    //! \brief Symmetric tridiagonal QL algorithm.
                    //!
                    void _tql2 ();
    
                    //!
                    //! \brief Nonsymmetric reduction to Hessenberg form.
                    //!
                    void _orthes ();
                       
                    //!
                    //! \brief Complex scalar division.
                    //! 
                    //! \param[in] xr : Real part of first operand
                    //! \param[in] xi : Imaginary part of first operand
                    //! \param[in] yr : Real part of second operand
                    //! \param[in] yi : Imaginary part of second operand
                    //!
                    void _cdiv(T xr, T xi, T yr, T yi);
    
                    //!
                    //! \brief Nonsymmetric reduction from Hessenberg to real Schur form.
                    //!
                    void _hqr2 ();
    

                    //! Variable r for _cdiv function
                    T _cdivr;

                    //! Variable i for _cdiv function
                    T _cdivi;
                   


                    //! Row and column dimension (square matrix).
                    uint64 _n;
    
                    //! Flag to determine whether the input matrix is simmetric or not
                    bool _issymmetric; 
    
                    //! Array for internal storage of real part of eigenvalues.
                    MultiArray<T,1> _d;        

                    //! Array for internal storage of imaginary part of eigenvalues.
                    MultiArray<T,1> _e;       
    
                    //! Array for internal storage of eigenvectors.
                    MultiArray<T,2> _V;
    
                    //! Array for internal storage of nonsymmetric Hessenberg form.
                    MultiArray<T,2> _H;
       
                    //! Working storage for nonsymmetric algorithm.             
                    MultiArray<T,1> _ort;
    
            };
        }   
    }
}

#endif
