// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file error_measures.test
 */

#include <imageplus/math/numeric/error_measures.hpp>
#include <imageplus/io/readimage.hpp>
#include <imageplus/io/writeimage.hpp>

BOOST_AUTO_TEST_SUITE ( error_measures_suite );

using namespace imageplus;
namespace mn = imageplus::math::numeric;

typedef boost::mpl::list<uint8,int64,float64> DataTypes;


//For each function created in the error_measures.cpp file there is at least one test case
BOOST_AUTO_TEST_CASE_TEMPLATE(bad_matching_elements, T, DataTypes)
{
	uint64  bme;

    MultiArray<T,2> A(5,5);

    A[0][0] = 1;    A[1][0] = 2;    A[2][0] = 3;    A[3][0] = 4;    A[4][0] = 5;
    A[0][1] = 6;    A[1][1] = 7;    A[2][1] = 8;    A[3][1] = 9;    A[4][1] = 0;
    A[0][2] = 9;    A[1][2] = 8;    A[2][2] = 7;    A[3][2] = 6;    A[4][2] = 5;
    A[0][3] = 4;    A[1][3] = 3;    A[2][3] = 2;    A[3][3] = 1;    A[4][3] = 0;
    A[0][4] = 0;    A[1][4] = 1;    A[2][4] = 2;    A[3][4] = 3;    A[4][4] = 4;
	
    MultiArray<T,2> B(5,5);

    B[0][0] = 1;    B[1][0] = 2;    B[2][0] = 3;    B[3][0] = 4;    B[4][0] = 5; //00000
    B[0][1] = 6;    B[1][1] = 6;    B[2][1] = 8;    B[3][1] = 9;    B[4][1] = 0; //01000
    B[0][2] = 8;    B[1][2] = 8;    B[2][2] = 0;    B[3][2] = 15;   B[4][2] = 5; //10790
    B[0][3] = 4;    B[1][3] = 3;    B[2][3] = 2;    B[3][3] = 1;    B[4][3] = 2; //00002
    B[0][4] = 0;    B[1][4] = 1;    B[2][4] = 2;    B[3][4] = 3;    B[4][4] = 4; //00000

	bme = mn::bad_matching_elements(A, B, 0);   
	BOOST_CHECK_EQUAL((uint64)5,bme);

	bme = mn::bad_matching_elements(A, B, 1);   
	BOOST_CHECK_EQUAL((uint64)3,bme);

	bme = mn::bad_matching_elements(A, B, 9);   
	BOOST_CHECK_EQUAL((uint64)0,bme);
}

#if 0
BOOST_AUTO_TEST_CASE (bad_matching_elements_percent)
{
	float64 bme, should_be_bme=3;
	int64 threshold=10;

	ImageGray<uint8> original_image, coded_image;

	io::ReadImage readImage_original(string(TEST_DATA_PATH_R) + "/error_measures/depth-cam0-f000.bmp");
	io::ReadImage readImage_coded   (string(TEST_DATA_PATH_R) + "/error_measures/depth-cam0-f001.bmp");
	
	readImage_original >> original_image;
	readImage_coded    >> coded_image;

	bme= mn::bad_matching_elements_percent(original_image(0),coded_image(0),threshold);
	
	BOOST_CHECK_EQUAL(should_be_bme,bme);
}
#endif

BOOST_AUTO_TEST_CASE_TEMPLATE (mse, T, DataTypes)
{
    ImageRGB<T> A(5,5);
    A = 0;

    A(0)[0][0] = 1;    A(0)[1][0] = 2;    A(0)[2][0] = 3;    A(0)[3][0] = 4;    A(0)[4][0] = 5;
    A(0)[0][1] = 6;    A(0)[1][1] = 7;    A(0)[2][1] = 8;    A(0)[3][1] = 9;    A(0)[4][1] = 0;
    A(0)[0][2] = 9;    A(0)[1][2] = 8;    A(0)[2][2] = 7;    A(0)[3][2] = 6;    A(0)[4][2] = 5;
    A(0)[0][3] = 4;    A(0)[1][3] = 3;    A(0)[2][3] = 2;    A(0)[3][3] = 1;    A(0)[4][3] = 0;
    A(0)[0][4] = 0;    A(0)[1][4] = 1;    A(0)[2][4] = 2;    A(0)[3][4] = 3;    A(0)[4][4] = 4;

    A(1)[0][0] = 1;    A(1)[1][0] = 5;    A(1)[2][0] = 3;    A(1)[3][0] = 2;    A(1)[4][0] = 0;
    A(1)[0][1] = 2;    A(1)[1][1] = 4;    A(1)[2][1] = 3;    A(1)[3][1] = 2;    A(1)[4][1] = 1;
    A(1)[0][2] = 3;    A(1)[1][2] = 3;    A(1)[2][2] = 2;    A(1)[3][2] = 2;    A(1)[4][2] = 2;
    A(1)[0][3] = 4;    A(1)[1][3] = 2;    A(1)[2][3] = 2;    A(1)[3][3] = 3;    A(1)[4][3] = 1;
    A(1)[0][4] = 5;    A(1)[1][4] = 1;    A(1)[2][4] = 2;    A(1)[3][4] = 3;    A(1)[4][4] = 0;
	
    ImageRGB<T> B(5,5);
    B = 0;
    // se(0) = 136 mse(0) = 5,44 psnr(0) = 40,7748146
    B(0)[0][0] = 1;    B(0)[1][0] = 2;    B(0)[2][0] = 3;    B(0)[3][0] = 4;    B(0)[4][0] = 5; //00000
    B(0)[0][1] = 6;    B(0)[1][1] = 6;    B(0)[2][1] = 8;    B(0)[3][1] = 9;    B(0)[4][1] = 0; //01000
    B(0)[0][2] = 8;    B(0)[1][2] = 8;    B(0)[2][2] = 0;    B(0)[3][2] = 15;   B(0)[4][2] = 5; //10790
    B(0)[0][3] = 4;    B(0)[1][3] = 3;    B(0)[2][3] = 2;    B(0)[3][3] = 1;    B(0)[4][3] = 2; //00002
    B(0)[0][4] = 0;    B(0)[1][4] = 1;    B(0)[2][4] = 2;    B(0)[3][4] = 3;    B(0)[4][4] = 4; //00000

    // se(1) = 2394 mse(1) = 95,76 psnr(1) = 28,3189622
    B(1)[0][0] = 1;    B(1)[1][0] = 5;    B(1)[2][0] = 30;   B(1)[3][0] = 2;    B(1)[4][0] = 0;
    B(1)[0][1] = 2;    B(1)[1][1] = 4;    B(1)[2][1] = 3;    B(1)[3][1] = 21;   B(1)[4][1] = 1;
    B(1)[0][2] = 33;   B(1)[1][2] = 3;    B(1)[2][2] = 2;    B(1)[3][2] = 2;    B(1)[4][2] = 0;
    B(1)[0][3] = 4;    B(1)[1][3] = 22;   B(1)[2][3] = 2;    B(1)[3][3] = 3;    B(1)[4][3] = 1;
    B(1)[0][4] = 5;    B(1)[1][4] = 1;    B(1)[2][4] = 2;    B(1)[3][4] = 3;    B(1)[4][4] = 0;

    // se(2) = 0 mse(2) = 0

    // Total: se = 2530 mse = 33.7333333 psnr = 32,850211


    // MultiArrays
	float64 mseval = mn::mse(A(0),B(0));	
	BOOST_CHECK_CLOSE(5.44, mseval, 1e-4);

	mseval = mn::mse(A(1),B(1));	
	BOOST_CHECK_CLOSE(95.76, mseval, 1e-4);

	float64 psnrval = mn::psnr(A(0),B(0));
	BOOST_CHECK_CLOSE (40.7748146, psnrval, 1e-5);

	psnrval = mn::psnr(A(1),B(1));
	BOOST_CHECK_CLOSE (28.3189622, psnrval, 1e-5);

    // Images
	mseval = mn::mse(A, B);
	BOOST_CHECK_CLOSE (33.7333333, mseval, 1e-5);

	psnrval = mn::psnr(A,B);
	BOOST_CHECK_CLOSE (32.850211, psnrval, 1e-5);
}


BOOST_AUTO_TEST_SUITE_END ();
