// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file perimeter.test
//!
//! Tests for perimeter descriptors 
//!

#include <imageplus/descriptors/geometry/perimeter.hpp>
#include <imageplus/core/imagepartition.hpp>
#include <imageplus/core/imagergb.hpp>
#include <imageplus/core/partition.hpp>
#include <imageplus/core/partition_functions.hpp>
#include <imageplus/core/region.hpp>

BOOST_AUTO_TEST_SUITE ( Descriptors_Geometric_Perimeter_Suite );

using namespace imageplus;
using namespace descriptors;
using namespace std;

BOOST_AUTO_TEST_CASE( Perimeter_test)
{    
    ImagePartition<> my_im_part(3,4);
    my_im_part[0][0] = 25;
    my_im_part[0][1] = 25;
    my_im_part[0][2] = 25;
    my_im_part[0][3] = 10;
    my_im_part[1][0] = 25;
    my_im_part[1][1] = 10;
    my_im_part[1][2] = 10;
    my_im_part[1][3] = 10;
    my_im_part[2][0] = 25;
    my_im_part[2][1] = 3;
    my_im_part[2][2] = 2;
    my_im_part[2][3] = 2;
    
    ImageRGB<uint8> my_image(3,4);
    
    typedef Coord2D<int64> C2D;
    imageplus::Region<C2D> region25;
    region25.push_back(C2D(0,0));
    region25.push_back(C2D(0,1));
    region25.push_back(C2D(0,2));
    region25.push_back(C2D(1,0));
    region25.push_back(C2D(2,0));
    
    imageplus::Region<C2D> region2;
    region2.push_back(C2D(2,2));
    region2.push_back(C2D(2,3));

    
    imageplus::Region<C2D> region3;
    region3.push_back(C2D(2,1));
    
    imageplus::Region<C2D> region10;
    region10.push_back(C2D(0,3));
    region10.push_back(C2D(1,1));
    region10.push_back(C2D(1,2));
    region10.push_back(C2D(1,3));
    
    Perimeter<C2D> desc = calc_descriptor(new Perimeter<C2D>(), my_image, region25);
    BOOST_CHECK_EQUAL(desc, uint64(12));
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image, region10);
    BOOST_CHECK_EQUAL(desc, uint64(10));
   
    desc = calc_descriptor(new Perimeter<C2D>(), my_image, region3);
    BOOST_CHECK_EQUAL(desc, uint64(4));
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image, region2);
    BOOST_CHECK_EQUAL(desc, uint64(6));
    
    ImagePartition<> my_im_part2(5,4);
    my_im_part2[0][0] = 1;
    my_im_part2[1][0] = 1;
    my_im_part2[2][0] = 1;
    my_im_part2[3][0] = 3;
    my_im_part2[4][0] = 4;
    
    my_im_part2[0][1] = 1;
    my_im_part2[1][1] = 1;
    my_im_part2[2][1] = 3;
    my_im_part2[3][1] = 3;
    my_im_part2[4][1] = 4;
    
    my_im_part2[0][2] = 1;
    my_im_part2[1][2] = 2;
    my_im_part2[2][2] = 2;
    my_im_part2[3][2] = 4;
    my_im_part2[4][2] = 4;
    
    my_im_part2[0][3] = 2;
    my_im_part2[1][3] = 2;
    my_im_part2[2][3] = 5;
    my_im_part2[3][3] = 5;
    my_im_part2[4][3] = 5;
    
    ImageRGB<uint8> my_image2(5,4);
    
    Partition< imageplus::Region<C2D> > my_part(my_im_part2);
    
    merge_regions(1, 3, 6, my_part);
    merge_regions(2, 5, 7, my_part);
    merge_regions(7, 4, 8, my_part);
    merge_regions(6, 8, 9, my_part);
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[1]);
    BOOST_CHECK_EQUAL(desc, uint64(12));
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[2]);
    BOOST_CHECK_EQUAL(desc, uint64(10));
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[3]);
    BOOST_CHECK_EQUAL(desc, uint64(8));
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[4]);
    BOOST_CHECK_EQUAL(desc, uint64(10));
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[5]);
    BOOST_CHECK_EQUAL(desc, uint64(8));
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[6]);
    BOOST_CHECK_EQUAL(desc, uint64(14));
    
    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[7]);
    BOOST_CHECK_EQUAL(desc, uint64(14));

    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[8]);
    BOOST_CHECK_EQUAL(desc, uint64(18));

    desc = calc_descriptor(new Perimeter<C2D>(), my_image2, my_part[9]);
    BOOST_CHECK_EQUAL(desc, uint64(18));
}

BOOST_AUTO_TEST_SUITE_END ();


