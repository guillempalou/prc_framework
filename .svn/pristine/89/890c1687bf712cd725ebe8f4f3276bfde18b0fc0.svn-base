// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file pf_tumult.test
//!
//!  Tests for Tumult Particle Filter.
//!

#include <iostream>
#include <stdio.h>
#include <imageplus/core.hpp>
#include <imageplus/io/readimage.hpp>
#include <imageplus/io/writeimage.hpp>
#include <cmath>
#include <iostream>
#include <fstream>
#include <imageplus/particlefilters/pf_tumult.hpp>

BOOST_AUTO_TEST_SUITE ( suite_pf_tumult );

using namespace imageplus;
using namespace imageplus::particlefilters;
using namespace std;
    
BOOST_AUTO_TEST_CASE ( test_pf_tumult )
{  
	std::vector< TumultParticleFilter > tumult_filters; // Vector to store all Tumult particle filters

    tumult_filters.resize( 2, TumultParticleFilter( 1000 ) );
	
    BOOST_CHECK( tumult_filters.size() == 2 );
    BOOST_CHECK( tumult_filters[ 0 ].number_of_particles() == 1000 );
    BOOST_CHECK( tumult_filters[ 1 ].number_of_particles() == 1000 );
	
    tumult_filters.resize( 3, TumultParticleFilter( 1500 ) );

    BOOST_CHECK( tumult_filters.size() == 3 );
    BOOST_CHECK( tumult_filters[ 0 ].number_of_particles() == 1000 );
    BOOST_CHECK( tumult_filters[ 1 ].number_of_particles() == 1000 );
    BOOST_CHECK( tumult_filters[ 2 ].number_of_particles() == 1500 );
    
    TumultParticleFilter pf( 200 );
    
    tumult_filters.push_back( pf );

    BOOST_CHECK( tumult_filters.size() == 4 );
    BOOST_CHECK( tumult_filters[ 0 ].number_of_particles() == 1000 );
    BOOST_CHECK( tumult_filters[ 1 ].number_of_particles() == 1000 );
    BOOST_CHECK( tumult_filters[ 2 ].number_of_particles() == 1500 );
    BOOST_CHECK( tumult_filters[ 3 ].number_of_particles() == 200 );
    
    BOOST_CHECK( tumult_filters[ 1 ].particles()[ 0 ].weight() == 0.001 );
    BOOST_CHECK( tumult_filters[ 2 ].particles()[ 3 ].weight() == ( 1 / static_cast< float64 >( 1500 ) ) );
    BOOST_CHECK( tumult_filters[ 3 ].particles()[ 100 ].weight() == ( 1 / static_cast< float64 >( 200 ) ) );
}

BOOST_AUTO_TEST_SUITE_END ();
