/*
 * learning_metric.hpp
 *
 *  Created on: Feb 22, 2013
 *      Author: gpalou
 */

#ifndef LEARNING_METRIC_HPP_
#define LEARNING_METRIC_HPP_

#include <ilcplex/ilocplex.h>

namespace imageplus {
	namespace bpt {

	template<uint64 D>
	struct MetricOptimizationStruct {

		//! vectors of similar and dissimilar regions
		//! similar(i) = s
		//! dissimilar(i) = d
		//! s'As < d'A'd
		math::Matrix similar;
		math::Matrix dissimilar1;
		math::Matrix dissimilar2;

		void save(std::string file) {
			std::ofstream ofs(file.c_str());
			ofs << similar.rows() << " " << D << std::endl;
			ofs << similar << std::endl;
			ofs << dissimilar1 << std::endl;
			ofs << dissimilar2 << std::endl;
		}

		void read(std::string file) {
			float64 d,N;

			std::ifstream ifs(file.c_str());
			ifs >> N >> d;

			similar = math::Matrix(N,D);
			dissimilar1 = math::Matrix(N,D);
			dissimilar2 = math::Matrix(N,D);

			for (uint64 i = 0; i < N; i++)
				for (uint64 k = 0; k < D; k++)
					ifs >> similar(i,k);
			for (uint64 i = 0; i < N; i++)
				for (uint64 k = 0; k < D; k++)
					ifs >> dissimilar1(i,k);
			for (uint64 i = 0; i < N; i++)
				for (uint64 k = 0; k < D; k++)
					ifs >> dissimilar2(i,k);
		}

	};

	struct MetricOptimizationParameters {

		//! Parameter goberning the conflict weight
		float64 C;
	};

	//! learn a metric from vectors
	template<uint64 D>
	Eigen::Matrix<float64,D,D>  learn_metric(MetricOptimizationStruct<D>& metric_struct, MetricOptimizationParameters& pars) {

		return Eigen::Matrix<float64,D,D>::Identity();
	}


	}
}


#endif /* LEARNING_METRIC_HPP_ */
