// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file integralimage.test
//!


#include <imageplus/math/transforms/integral_image.hpp>


BOOST_AUTO_TEST_SUITE ( integral_image_suite );

using namespace imageplus;
using namespace imageplus::math::transforms;


typedef boost::mpl::list<uint8,int16,int64> DataTypesInt;
typedef boost::mpl::list<float64> DataTypesFl;


BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_integral_image, T, DataTypesInt )
{
    uint64 size = 10;

    T val1 = static_cast<T>(1);

    MultiArray<T,2> maVin(size,size);
    maVin = val1;


    MultiArray<int64,2> maii;

    maii = integral_image<int64>(maVin);

    for (uint64 i = 0; i < maVin.dims(0); i++)
    {
        //std::cout << maii[i][i] << std::endl;
        BOOST_CHECK(maii[i][i] == static_cast<int64>((i+1)*(i+1)));
    }
}



BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_sq_integral_image, T, DataTypesFl )
{
    uint64 size = 10;

    float64 val1 = static_cast<T>(1);

    MultiArray<T,2> maVin(size,size);
    maVin = val1;


    MultiArray<float64,2> maii = sq_integral_image<float64>(maVin);

    for (uint64 i = 0; i < maVin.dims(0); i++)
    {
        BOOST_CHECK_CLOSE(maii[i][i], static_cast<float64>((i+1)*(i+1)), 1e-5);
    }

}


BOOST_AUTO_TEST_SUITE_END ();
