// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file random_generators.hpp
//!
//!  Methods to generate random samples from different distributions
//!

#ifndef IMAGEPLUS_MATH_STATISTICS_RANDOM_GENERATORS_HPP
#define IMAGEPLUS_MATH_STATISTICS_RANDOM_GENERATORS_HPP

#include<boost/random.hpp>
//#include<boost/random/normal_distribution.hpp>
//#include<boost/random/uniform_real.hpp>
#include<cmath>
#include<imageplus/core.hpp>

namespace imageplus
{
	namespace math
	{
		namespace statistics
		{
			//! 
			//! \brief Uniform random number generator
			//!
			//! This function generates a random number uniformly distributed between 0 and 1.
			//! To do so, the engine employs the Mersenne Twister random number generator
			//! provided by Boost libraries
			//!
			//! \return an real random number uniformly distributed between 0 and 1
			//!
			float64 rand_uniform ();

			//! 
			//! \brief Uniform random number generator with known seed
			//!
			//! \param[in] rng : Boost Mersenne Twister random number generator already seeded.
			//!
			//! \return an real random number uniformly distributed between 0 and 1
			//!
			float64 rand_uniform (boost::mt19937 & rng);

			//! 
			//! \brief Uniform random integer number generator
			//! 
			//! This function generates an integer random number uniformly distributed between min and max.
			//! To do so, the engine employs the Mersenne Twister random number generator
			//! provided by Boost libraries
			//!
			//! \param[in] min : lower bound
			//! \param[in] max : upper bound
			//!
			//! \return an integer random number uniformly distributed between min and max
			//!
			template<typename T>
			T rand_uniform_int(const T min, const T max);

			//! 
			//! \brief Uniform random integer number generator with known seed
			//! 
			//! This function generates an integer random number uniformly distributed between min and max.
			//! The seed is provided within the Mersenne Twister random number generator.
			//!
			//! \param[in] min : lower bound
			//! \param[in] max : upper bound
			//! \param[in] rng : Boost Mersenne Twister random number generator already seeded.
			//!
			//! \return an integer random number uniformly distributed between min and max
			//!
			template<typename T>
			T rand_uniform_int(const T min, const T max, boost::mt19937 & rng);

			//! 
			//! \brief Uniform random number generator (real numbers) 
			//! 
			//! This function generates a real random number uniformly distributed between min and max.
			//! To do so, the engine employs the Mersenne Twister random number generator
			//! provided by Boost libraries
			//!
			//! \param[in] min : lower bound
			//! \param[in] max : upper bound
			//!
			//! \return a real random number uniformly distributed between min and max
			//!
			float64 rand_uniform (const float64 min, const float64 max);

			//! 
			//! \brief Uniform random number generator with known seed
			//! 
			//! This function generates a real random number uniformly distributed between min and max.
			//! The seed is provided within the Mersenne Twister random number generator.
			//!
			//! \param[in] min : lower bound
			//! \param[in] max : upper bound
			//! \param[in] rng : Boost Mersenne Twister random number generator already seeded.
			//!
			//! \return a real random number uniformly distributed between min and max
			//!
			float64 rand_uniform (const float64 min, const float64 max, boost::mt19937 & rng);

			//! 
			//! \brief Gaussian random number generator
			//!
			//! A random number from a Gaussian distribution with mean=mean and variance=sigma*sigma
			//! is generated.
			//!
			//! \param[in] mean : mean value of the target Gaussian
			//! \param[in] sigma : standard deviation of the target Gaussian
			//! 
			//! \return a random number from a Gaussian distribution with mean=mean and variance=sigma*sigma
			//!
			float64 rand_normal (const float64 mean, const float64 sigma);

			//! 
			//! \brief Gaussian random number generator with known seed
			//!
			//! A random number from a Gaussian distribution with mean=mean and variance=sigma*sigma
			//! is generated. The seed is provided within the Mersenne Twister Random Generator.
			//!
			//! \param[in] mean : mean value of the target Gaussian
			//! \param[in] sigma : standard deviation of the target Gaussian
			//! \param[in] rng : Boost Mersenne Twister random number generator already seeded.
			//!
			//! \return a random number from a Gaussian distribution with mean=mean and variance=sigma*sigma
			//!
			float64 rand_normal (const float64 mean, const float64 sigma, boost::mt19937 & rng);

			//! 
			//! \brief Binomial random number generator
			//!
			//! \param[in] t : Number of successes
			//! \param[in] p : Probability of true for each success
			//! 
            //! The binomial distribution is an integer valued distribution with two parameters, t and p. 
            //! The values of the distribution are within the range [0,t]. 
            //! Example: Tossing a coin t times and counting how many front sides are shown (p=0.5)
            //!
			//! \return a random number from a binomial distribution (t,p)
			//!
			uint64 rand_binomial (const uint64 t, const float64 p = 0.5);

			//! 
			//! \brief Binomial random number generator
			//!
			//! \param[in] t : Number of successes
			//! \param[in] p : Probability of true for each success
			//! \param[in] rng : Boost Mersenne Twister random number generator already seeded.
			//! 
            //! The binomial distribution is an integer valued distribution with two parameters, t and p. 
            //! The values of the distribution are within the range [0,t]. 
            //! Example: Tossing a coin t times and counting how many front sides are shown (p=0.5)
            //!
			//! \return a random number from a binomial distribution (t,p)
			//!
			uint64 rand_binomial (const uint64 t, const float64 p, boost::mt19937 & rng);
		}
	}
}

#endif
