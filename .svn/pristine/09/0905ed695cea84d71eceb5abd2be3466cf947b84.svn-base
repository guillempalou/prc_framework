// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file observation.hpp
//!
//!  Observation
//!
//!  Contains a feature vector for each visual descriptor of the observation.
//!


#ifndef IMAGEPLUS_SEMANTIC_OBSERVATION_HPP
#define IMAGEPLUS_SEMANTIC_OBSERVATION_HPP

#include <iostream>
#include <list>

#include <imageplus/core.hpp>

namespace imageplus {
	namespace semantic {

		//!
		//! \brief Contains a set of feature vectors for an annotation
		//! instance, indexed by visual descriptor.
		//!
		//! \author Pau Haro Negre
		//!
		//! \date 10-6-2011
		//!
		class Observation
		{
		public:

			 //! Type of a feature vector
			typedef MultiArray<float64, 1> FeatureVector;

			//! Type of the observation feature vectors container for each visual descriptor
			typedef std::map<std::string, FeatureVector> FeatureVectorsType;

			//! Type of the observation feature vectors container iterator
			typedef FeatureVectorsType::iterator FeatureVectorsIterator;

			//! Type of the observation feature vectors container const iterator
			typedef FeatureVectorsType::const_iterator FeatureVectorsConstIterator;


            //! \brief Default constructor
			Observation() {};

            //! \brief Destructor
            ~Observation() {};


            //! Get the feature vector of this observation for the given visual descriptor.
            //!
            //! \param[in] vd_name Visual descriptor name
            //!
            //! \return Feature vector of this observation for the given visual descriptor
            FeatureVector get_vd_featurevector(const std::string& vd_name) throw (ImagePlusError);

			//! Check whether there is a feature vector for the given visual descriptor in this Observation.
			//!
            //! \param[in] vd_name Visual descriptor name
            //!
            //! \return Whether there is a feature vector for the given visual descriptor in this Observation
            bool includes_vd_featurevector(const std::string& vd_name);

			//! Add a feature vector for the given visual descriptor to this Observation.
			//!
			//! \param[in] vd_name Visual descriptor name
			//! \param[in] fv      Feature vector of this observation for the given descriptor
            void add_vd_featurevector(const std::string& vd_name, const FeatureVector& fv) throw (ImagePlusError);


    		friend std::ostream& operator<<(std::ostream &os, const Observation& o);

		private:
			//! Container of features vectors for each visual descriptor
    		FeatureVectorsType _feature_vectors;
		};

		//! Output a representation of the given Observation to an ostream.
        //!
        //! \param[in,out] os Output stream where the representation will be appended
        //! \param[in]     o  %Instance of Observation class to write to the stream
		//!
		//! \return Description of the Observation is appended to the given ostream.
		std::ostream& operator<<(std::ostream &os, const Observation& o);
	}
}

#endif //IMAGEPLUS_SEMANTIC_OBSERVATION_HPP
