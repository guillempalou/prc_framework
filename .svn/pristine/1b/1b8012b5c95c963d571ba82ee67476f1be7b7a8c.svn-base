/*
 * region_test.cpp
 *
 *  Created on: Jul 31, 2012
 *      Author: guillem
 */


#include <imageplus/core/regions/region.hpp>
#include <imageplus/core/regions/hierarchical_region.hpp>

#include <imageplus/core/image_signal.hpp>
#include <imageplus/core/video_signal.hpp>

using namespace imageplus;

int main() {

	typedef ImageSignal<float64,3> ImageType;
	typedef VideoSignal<float64,3> VideoType;

	ImageType image(10,10);
	VideoType video(10,10,10);

	typedef ImageType::coord_type coord2d;
	typedef VideoType::coord_type coord3d;

	typedef Region<coord2d> Region2D;
	typedef Region<coord3d> Region3D;

	Region2D R2;
	Region3D R3;

	for (uint64 i = 0; i < 5; i++) R2.add_coordinate(coord2d(i,i));
	for (uint64 i = 0; i < 5; i++) R3.add_coordinate(coord3d(i,i,i));

	std::cout << "Position coords" << std::endl;
	for (Region2D::iterator p = R2.begin(); p != R2.end(); ++p) {
		std::cout << "(" << (*p).transpose() << ") ";
	}
	std::cout << std::endl;

	for (Region3D::iterator p = R3.begin(); p != R3.end(); ++p) {
		std::cout << "(" << (*p).transpose() << ") ";
	}
	std::cout << std::endl;

	//Create 4 hierarchical regions covering a 8x8 rectangle
	typedef HierarchicalRegion<coord2d> HRegion2D;
	typedef HierarchicalRegion<coord3d> HRegion3D;

	std::vector<HRegion2D> v(7);
	v[0] = HRegion2D(0);
	v[1] = HRegion2D(1);
	v[2] = HRegion2D(2);
	v[3] = HRegion2D(3);

	v[0].add_coordinate(coord2d(0,0)); v[0].add_coordinate(coord2d(0,1)); v[0].add_coordinate(coord2d(1,0)); v[0].add_coordinate(coord2d(1,1));
	v[1].add_coordinate(coord2d(2,0)); v[1].add_coordinate(coord2d(2,1)); v[1].add_coordinate(coord2d(3,1)); v[1].add_coordinate(coord2d(2,1));
	v[2].add_coordinate(coord2d(0,2)); v[2].add_coordinate(coord2d(1,2)); v[2].add_coordinate(coord2d(1,3)); v[2].add_coordinate(coord2d(0,3));
	v[3].add_coordinate(coord2d(2,2)); v[3].add_coordinate(coord2d(2,3)); v[3].add_coordinate(coord2d(3,2)); v[3].add_coordinate(coord2d(3,3));

	v[4] = HRegion2D(4,&v[0],&v[1]); v[0].parent(&v[4]); v[1].parent(&v[4]);
	v[5] = HRegion2D(5,&v[2],&v[3]); v[2].parent(&v[5]); v[3].parent(&v[5]);
	v[6] = HRegion2D(6,&v[4],&v[5]); v[4].parent(&v[6]); v[5].parent(&v[6]);

	for (uint64 i = 0; i < v.size(); i++) {
		std::cout << v[i].label() << " : ";
		HRegion2D::iterator p = v[i].begin();
		HRegion2D::iterator p_end = v[i].end();

		for (; p != p_end; ++p) {
			std::cout << "(" << (*p).transpose() << ") ";
		}
		std::cout << " --- " << std::endl;
	}
}


