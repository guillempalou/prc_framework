// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file bbox_math.test
//!
//!  Tests for the math operations on BBox classs 
//!

#include <imageplus/math/geometry/bbox_math.hpp>

BOOST_AUTO_TEST_SUITE ( suite_bbox_math );

using namespace imageplus;
using namespace imageplus::math::geometry;

typedef boost::mpl::list<int16,uint32> DataTypes;

BOOST_AUTO_TEST_CASE ( test_BBoxMath )
{

    Coord3D<>  tl(-1, -2, -1);
    Coord3D<>  other_tl(-3, -5, -1);
    uint64 width = 2, height = 4, depth = 2;

    BBox3D bb(tl, width, height, depth);
    BBox3D other_bb(other_tl, 4,8, depth);
 
    BOOST_CHECK(bb.origin() == tl);
    BOOST_CHECK(bb.side_x() == width);
    BOOST_CHECK(bb.side_y() == height);
    BOOST_CHECK(bb.side_z() == depth);
   
    limit_bbox_to_bbox(other_bb, bb);

    BOOST_CHECK(bb.origin() == tl);
    BOOST_CHECK(bb.side_x() == width);
    BOOST_CHECK(bb.side_y() == height);
    BOOST_CHECK(bb.side_z() == depth);
    
    limit_bbox_to_bbox(bb, other_bb);

    BOOST_CHECK(other_bb.origin() == tl);
    BOOST_CHECK(other_bb.side_x() == width);
    BOOST_CHECK(other_bb.side_y() == height);
    BOOST_CHECK(other_bb.side_z() == depth);

    limit_point_to_bbox(bb, other_tl);

    BOOST_CHECK(other_tl == tl);    

    ImageMask mask (21,21);
    mask = false;

    for (int64 j = 0; j < 6; j++)
    {
        for (int64 i = 10-j-1; i < 10+j+1; i++)
        {
            mask[i][j+7] = true;
        } 
    }

    BBox2D bb1;
    bb1 = blob_bbox(mask);

    BOOST_CHECK(bb1.origin().x() == 4);
    BOOST_CHECK(bb1.origin().y() == 7);
    BOOST_CHECK_EQUAL(bb1.side_x(), 12U);
    BOOST_CHECK_EQUAL(bb1.side_y(), 6U);
}

BOOST_AUTO_TEST_CASE_TEMPLATE ( test_BBoxMath2, T, DataTypes)
{
    MultiArray<T,2> ma(21,21);
    ma = 0;

    for (int64 j = 0; j < 6; j++)
    {
        for (int64 i = 10-j-1; i < 10+j+1; i++)
        {
            ma[i][j+7] = 1;
        } 
    }

    BBox2D bb2;
    bb2 = blob_bbox(ma);

    BOOST_CHECK(bb2.origin().x() == 4);
    BOOST_CHECK(bb2.origin().y() == 7);
    BOOST_CHECK(bb2.side_x() == 12U);
    BOOST_CHECK(bb2.side_y() == 6U);

    uint64 size = 21;
    ImagePartition<T> pa(size,size);
    pa = static_cast<T>(2);

    for (int64 j = 0; j < 6; j++)
    {
        for (int64 i = 0; i < 6-j; i++)
        {
            pa[i][j] = 1;
        } 
    }

    for (int64 j = 0; j < 6; j++)
    {
        for (int64 i = 0; i < 6-j; i++)
        {
            pa[pa.size_x()-1-i][pa.size_y()-1-j] = 3;
        } 
    }


    BBox2D bb3, bb4, bb5;
    bb3 = region_bbox(pa,static_cast<T>(1));
    bb4 = region_bbox(pa,static_cast<T>(2));
    bb5 = region_bbox(pa,static_cast<T>(3));

    BOOST_CHECK(bb3.origin().x() == 0);
    BOOST_CHECK(bb3.origin().y() == 0);
    BOOST_CHECK_EQUAL(bb3.side_x(),6U); //
    BOOST_CHECK_EQUAL(bb3.side_y(),6U); //

    BOOST_CHECK(bb4.origin().x() == 0);
    BOOST_CHECK(bb4.origin().y() == 0);
    BOOST_CHECK_EQUAL(bb4.side_x(),pa.size_x());
    BOOST_CHECK_EQUAL(bb4.side_y(),pa.size_y()); //

    BOOST_CHECK_EQUAL(bb5.origin().x(), 15); //
    BOOST_CHECK_EQUAL(bb5.origin().y(), 15); //
    BOOST_CHECK_EQUAL(bb5.side_x(), 6U);
    BOOST_CHECK_EQUAL(bb5.side_y(), 6U);

    MultiArray<BBox2D,1> bba(4);
    regions_bbox(pa, bba);

    BOOST_CHECK(bba[0].origin().x() == 0);
    BOOST_CHECK(bba[0].origin().y() == 0);
    BOOST_CHECK_EQUAL(bba[0].side_x(), 6U);
    BOOST_CHECK_EQUAL(bba[0].side_y(), 6U);

    BOOST_CHECK(bba[1].origin().x() == 0);
    BOOST_CHECK(bba[1].origin().y() == 0);
    BOOST_CHECK(bba[1].side_x() == pa.size_x());
    BOOST_CHECK_EQUAL(bba[1].side_y(), pa.size_y());

    BOOST_CHECK_EQUAL(bba[2].origin().x(),15);
    BOOST_CHECK_EQUAL(bba[2].origin().y(),15);
    BOOST_CHECK(bba[2].side_x() == 6U);
    BOOST_CHECK(bba[2].side_y() == 6U);
}


//BOOST_AUTO_TEST_CASE_TEMPLATE ( test_BBoxMath3, ContainerType, ListTypes)
BOOST_AUTO_TEST_CASE ( test_BBoxMath3 )
{
    std::list< BBox<int64,2> > bbox_list;
    for (uint64 i=0; i < 3; ++i)
    {
        bbox_list.push_back(BBox<int64,2>(Coord<int64,2>(i,i),5,5));
    }
    BBox<int64,2> res1 = bbox_list_bbox (bbox_list);

    BBox<int64,2> gt1(Coord<int64,2>(0,0), 7, 7);
    BOOST_CHECK (gt1.origin()   == res1.origin());
    BOOST_CHECK (gt1.opposite() == res1.opposite());

    BBox<int64,2> res2 = bbox_list_intersection (bbox_list);

    BBox<int64,2> gt2(Coord<int64,2>(2,2), 3, 3);
    BOOST_CHECK (gt2.origin()   == res2.origin());
    BOOST_CHECK (gt2.opposite() == res2.opposite());

    BBox<int64,2> res3 = bbox_list_mean_bbox (bbox_list);
    BBox<int64,2> gt3(Coord<int64,2>(1,1), 5, 5);
    BOOST_CHECK (gt3.origin()   == res3.origin());
    BOOST_CHECK (gt3.opposite() == res3.opposite());


    bool resb = overlapping (BBox<int64,2>(Coord<int64,2>(0,0),5,5), BBox<int64,2>(Coord<int64,2>(3,3), 2,2));
    BOOST_CHECK (resb == true);

    resb = overlapping (BBox<int64,2>(Coord<int64,2>(0,0),5,5), BBox<int64,2>(Coord<int64,2>(9,9), 2,2));
    BOOST_CHECK (resb == false);

    boost::array<uint64,2> dist1 = {{10,10}};
    resb = close_centers (BBox<int64,2>(Coord<int64,2>(0,0),5,5), BBox<int64,2>(Coord<int64,2>(3,3), 2,2), dist1);
    BOOST_CHECK (resb == true);

    boost::array<uint64,2> dist2 = {{1,1}};
    resb = close_centers (BBox<int64,2>(Coord<int64,2>(0,0),5,5), BBox<int64,2>(Coord<int64,2>(3,3), 2,2), dist2);
    BOOST_CHECK (resb == false);

}
/*
 * AGIL: Test must be template for T and D!!
 */
BOOST_AUTO_TEST_CASE( test_bbox_math_overlap_percentatge )
{
    float64 out;

    /*
     * bb2 above bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1,-2), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3,-2), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 below bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2, 5), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1, 5), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 5), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3, 5), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4, 5), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5, 5), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 left bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2,-1), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2, 0), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2, 3), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2, 4), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2, 5), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 right bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5,-1), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5, 0), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5, 3), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5, 4), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5, 5), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    /*
     * bb2 above minim intersection with bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2,-1), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1,-1), 2, 2));
    BOOST_CHECK (out == 100.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0,-1), 2, 2));
    BOOST_CHECK (out == 200.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3,-1), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4,-1), 2, 2));
    BOOST_CHECK (out == 100.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5,-1), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 below minim intersection with bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2, 4), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1, 4), 2, 2));
    BOOST_CHECK (out == 100.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 4), 2, 2));
    BOOST_CHECK (out == 200.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3, 4), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4, 4), 2, 2));
    BOOST_CHECK (out == 100.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5, 4), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 left minim intersection with bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1,-1), 2, 2));
    BOOST_CHECK (out == 100.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1, 0), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1, 3), 2, 2));
    BOOST_CHECK (out == 200.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1, 4), 2, 2));
    BOOST_CHECK (out == 100.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1, 5), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 right with minim intersection bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4,-1), 2, 2));
    BOOST_CHECK (out == 100.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4, 0), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4, 3), 2, 2));
    BOOST_CHECK (out == 200.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4, 4), 2, 2));
    BOOST_CHECK (out == 100.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4, 5), 2, 2));
    BOOST_CHECK (out == 0.0);
    
    /*
     * bb2 above total intersection with bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2, 0), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1, 0), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 0), 2, 2));
    BOOST_CHECK (out == 400.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3, 0), 2, 2));
    BOOST_CHECK (out == 400.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4, 0), 2, 2));
    BOOST_CHECK (out == 200.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5, 0), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 below total intersection with bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-2, 3), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>(-1, 3), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 3), 2, 2));
    BOOST_CHECK (out == 400.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3, 3), 2, 2));
    BOOST_CHECK (out == 400.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 4, 3), 2, 2));
    BOOST_CHECK (out == 200.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 5, 3), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 left total intersection with bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0,-1), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 0), 2, 2));
    BOOST_CHECK (out == 400.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 3), 2, 2));
    BOOST_CHECK (out == 400.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 4), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 5), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 right with total intersection bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3,-2), 2, 2));
    BOOST_CHECK (out == 0.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3,-1), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3, 0), 2, 2));
    BOOST_CHECK (out == 400.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3, 3), 2, 2));
    BOOST_CHECK (out == 400.0/25);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3, 4), 2, 2));
    BOOST_CHECK (out == 200.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 3, 5), 2, 2));
    BOOST_CHECK (out == 0.0);

    /*
     * bb2 inside bb1
     */
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 1, 1), 3, 3));
    BOOST_CHECK (out == 900.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5), 
                              BBox<int64,2>(Coord<int64,2>( 0, 0), 5, 5));
    BOOST_CHECK (out == 2500.0/25);
    BOOST_CHECK (out == 100.0);

    /*
     * Extra tests
     */    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>(0,0),5,5),
                              BBox<int64,2>(Coord<int64,2>(0,0),5,5));
    BOOST_CHECK (out == 100.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>(4,10),6,2),
                              BBox<int64,2>(Coord<int64,2>(4,10),6,2));
    BOOST_CHECK (out == 100.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 1, 1), 6,4),
                              BBox<int64,2>(Coord<int64,2>(-1,-1), 2,2));
    BOOST_CHECK (out == 0.0);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 1, 1), 6,4),
                              BBox<int64,2>(Coord<int64,2>( 0, 0), 2,2));
    BOOST_CHECK_CLOSE (out, 100.0/24, 0.0001);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 1, 1), 6,4),
                              BBox<int64,2>(Coord<int64,2>( 1, 1), 2,2));
    BOOST_CHECK_CLOSE (out, 400.0/24, 0.0001);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 1, 1), 6,4),
                              BBox<int64,2>(Coord<int64,2>( 2, 2), 2,3));
    BOOST_CHECK (out == 600.0/24);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 1, 1), 6,4),
                              BBox<int64,2>(Coord<int64,2>( 3, 3), 3,2));
    BOOST_CHECK (out == 600.0/24);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>( 1, 1), 6,4),
                              BBox<int64,2>(Coord<int64,2>( 4, 4), 3,2));
    BOOST_CHECK (out == 300.0/24);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>(0,0),5,5),
                              BBox<int64,2>(Coord<int64,2>(0,0),5,5));
    BOOST_CHECK (out == 100.0);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>(0,0), 5,5), 
                              BBox<int64,2>(Coord<int64,2>(9,9), 2,2));
    BOOST_CHECK_CLOSE (out, 0.0, 0.0001);

    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>(0,0),5,5), 
                              BBox<int64,2>(Coord<int64,2>(3,3), 2,2));
    BOOST_CHECK (out == 400.0/25);
    
    out = overlap_percentage (BBox<int64,2>(Coord<int64,2>(2,3), 4,5), 
                              BBox<int64,2>(Coord<int64,2>(3,3), 3,2));
    BOOST_CHECK (out == 600.0/20);
}

BOOST_AUTO_TEST_CASE ( test_BBoxMath4 )
{
    std::vector< BBox<int64,2> > bbox_list;
    for (uint64 i=0; i < 3; ++i)
    {
        bbox_list.push_back(BBox<int64,2>(Coord<int64,2>(i,i),5,5));
    }
    BBox<int64,2> res1 = bbox_list_bbox (bbox_list);

    BBox<int64,2> gt1(Coord<int64,2>(0,0), 7, 7);
    BOOST_CHECK (gt1.origin()   == res1.origin());
    BOOST_CHECK (gt1.opposite() == res1.opposite());

    BBox<int64,2> res2 = bbox_list_intersection (bbox_list);

    BBox<int64,2> gt2(Coord<int64,2>(2,2), 3, 3);
    BOOST_CHECK (gt2.origin()   == res2.origin());
    BOOST_CHECK (gt2.opposite() == res2.opposite());

}

BOOST_AUTO_TEST_SUITE_END ();
