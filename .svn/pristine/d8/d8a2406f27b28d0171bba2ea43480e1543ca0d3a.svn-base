// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file products.hpp
//!
//!  Vector and matrix products
//!

#ifndef IMAGEPLUS_MATH_NUMERIC_PRODUCTS_HPP
#define IMAGEPLUS_MATH_NUMERIC_PRODUCTS_HPP


#include <imageplus/core.hpp>


namespace imageplus
{
    namespace math
    {
        namespace numeric
        {
    
            //!
            //! \brief Matrix product between matrices
            //!
            //! \author Javier Ruiz Hidalgo <j.ruiz@upc.edu>
            //!
            //! \date 18-01-2008
            //!
            //! \param[in] in1 : First matrix in the product
            //! \param[in] in2 : Second matrix in the product
            //!
            //! \return a MultiArray matrix with the result
            //!
            template<typename T>
            MultiArray<T,2> prod( const MultiArray<T,2>& in1, const MultiArray<T,2>& in2) throw (ImagePlusError);
    
            //!
            //! \brief Product between a matrix and a vector
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 04-02-2008
            //!
            //! The vector in2 isn't considered as transposed, thus the function multiplies a matrix by a column vector.
            //!
            //! \param[in] in1 : Matrix in the product
            //! \param[in] in2 : Vector in the product
            //!
            //! \return a MultiArray vector with the result
            //!
            template<typename T>
            MultiArray<T,1> prod( const MultiArray<T,2>& in1, const MultiArray<T,1>& in2 ) throw (ImagePlusError);
            
            //!
            //! \brief Product between a matrix and a vector
            //!
            //! The vector in2 isn't considered as transposed, thus the function multiplies a matrix by a column vector.
            //!
            //! \param[in] in1 : Matrix in the product
            //! \param[in] in2 : Vector in the product
            //!
            //! \return a vector with the result
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 04-02-2008
            //!
            template<typename T, std::size_t S >
            boost::array<T,S> prod( const MultiArray<T,2>& in1, const boost::array<T,S>& in2 ) throw (ImagePlusError);

    
            //!
            //! \brief Product between a vector and matrix.
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 04-02-2008
            //!
            //! The vector in1 is considered as a transposed vector (row).
            //!
            //! \param[in] in1 : Vector in the product
            //! \param[in] in2 : Matrix in the product
            //!
            //! \return a MultiArray vector with the result
            //!
            template<typename T>
            MultiArray<T,1> prod( const MultiArray<T,1>& in1, const MultiArray<T,2>& in2 ) throw (ImagePlusError);
    
            //!
            //! \brief Dot product, also known as the scalar product
            //!
            //! The <a href="http://en.wikipedia.org/wiki/Dot_product">dot product</a>, also known as 
            //! the scalar product, is an operation which takes two vectors over the real numbers R 
            //! and returns a real-valued scalar quantity. It is the standard inner product of the 
            //! orthonormal Euclidean space.
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 19-02-2008
            //!
            //! \param[in] in1 : First vector in the product
            //! \param[in] in2 : Second vector in the product
            //!
            //! \return Number with the result.
            //!
            template<typename T>
            T scalar_prod( const MultiArray<T,1>& in1, const MultiArray<T,1>& in2 ) throw (ImagePlusError);

            
            //!
            //! \brief Dot product, also known as the scalar product
            //!
            //! The <a href="http://en.wikipedia.org/wiki/Dot_product">dot product</a>, also known as 
            //! the scalar product, is an operation which takes two vectors over the real numbers R 
            //! and returns a real-valued scalar quantity. It is the standard inner product of the 
            //! orthonormal Euclidean space.
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 19-02-2008
            //!
            //! \param[in] in1 : First vector in the product
            //! \param[in] in2 : Second vector in the product
            //!
            //! \return Number with the result.
            //!
            template<typename T, std::size_t S>
            T scalar_prod( const boost::array<T,S>& in1, const boost::array<T,S>& in2 ) throw (ImagePlusError);
            
            //!
            //! \brief Dot product, also known as the scalar product
            //!
            //! The <a href="http://en.wikipedia.org/wiki/Dot_product">dot product</a>, also known as 
            //! the scalar product, is an operation which takes two vectors over the real numbers R 
            //! and returns a real-valued scalar quantity. It is the standard inner product of the 
            //! orthonormal Euclidean space.
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 19-02-2008
            //!
            //! \param[in] in1 : First vector in the product
            //! \param[in] in2 : Second vector in the product
            //!
            //! \return Number with the result.
            //!
            
            
            template<typename T, std::size_t S>
            T scalar_prod( const boost::array<T,S>& in1, const MultiArray<T,1>& in2 ) throw (ImagePlusError);

    
            
            //!
            //! \brief Dot product, also known as the scalar product
            //!
            //! The <a href="http://en.wikipedia.org/wiki/Dot_product">dot product</a>, also known as 
            //! the scalar product, is an operation which takes two vectors over the real numbers R 
            //! and returns a real-valued scalar quantity. It is the standard inner product of the 
            //! orthonormal Euclidean space.
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 19-02-2008
            //!
            //! \param[in] in1 : First vector in the product
            //! \param[in] in2 : Second vector in the product
            //!
            //! \return Number with the result.
            //!

            template<typename T, std::size_t S>
            T scalar_prod( const MultiArray<T,1>& in2, const boost::array<T,S>& in1 ) throw (ImagePlusError);
     
            //!
            //! \brief Cross product between two 3 dimensional vectors
            //!
            //! The <a href="http://en.wikipedia.org/wiki/Cross_product">cross product</a> is a binary operation 
            //! on two vectors in a three-dimensional Euclidean space that results in another vector which is 
            //! perpendicular to the two input vectors.
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 04-02-2008
            //!
            //! \param[in] in1 : First vector in the product
            //! \param[in] in2 : Second vector in the product
            //!
            //! \return a MultiArray vector with the result, which is orthogonal to the input vectors.
            //!
            template<typename T>
            MultiArray<T,1> cross_prod3( const MultiArray<T,1>& in1, const MultiArray<T,1>& in2 ) throw (ImagePlusError);

            
            //!
            //! \brief Cross product between two 3 dimensional vectors
            //!
            //! The <a href="http://en.wikipedia.org/wiki/Cross_product">cross product</a> is a binary operation 
            //! on two vectors in a three-dimensional Euclidean space that results in another vector which is 
            //! perpendicular to the two input vectors.
            //!
            //! \author Marcel Alcoverro <marcel@gps.tsc.upc.edu> 
            //!
            //! \date 15-10-08
            //!
            //! \param[in] in1 : First vector in the product
            //! \param[in] in2 : Second vector in the product
            //!
            //! \return a Array vector with the result, which is orthogonal to the input vectors.
            //!
            template<typename T>
            boost::array<T,3> cross_prod3( const boost::array<T,3>& in1, const boost::array<T,3>& in2) throw (ImagePlusError);

            
            
            //!
            //! \brief Outer product between two vectors
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 24-07-2008
            //!
            //! \param[in] in1 : First vector in the product
            //! \param[in] in2 : Second vector in the product
            //!
            //! \return a MultiArray matrix with the result.
            //!
            template<typename T>
            MultiArray<T,2> outer_prod(const MultiArray<T,1>& in1,const MultiArray<T,1>& in2 ) throw (ImagePlusError);
            
            
            
            
            
            template<typename T, std::size_t S>
            T scalar_prod( const boost::array<T,S>& in1, const boost::array<T,S>& in2 ) throw (ImagePlusError)
            {

                boost::array<T,S> aux;
                aux=in1*in2;
                T result=0;
                for (uint64 i=0; i<S; i++ )
                   result+=(aux[i]);
                
                return result;
            }

            
            
            template<typename T, std::size_t S>
            T scalar_prod( const boost::array<T,S>& in1, const MultiArray<T,1>& in2 ) throw (ImagePlusError)
            {

                ASSERT( in2.dims(0) == S, "Vectors dimension missmatch." )
                boost::array<T,S> aux;
                //aux=in1*in2;
                std::transform(in1.data(),
                               in1.data()+S,
                               in2.data(),
                               aux.c_array(),
                               std::multiplies<T>());
                
                T result=0;
                for (uint64 i=0; i<S; i++ )
                   result+=(aux[i]);
                
                return result;
            }
            

            
            template<typename T, std::size_t S>
            T scalar_prod( const MultiArray<T,1>& in2, const boost::array<T,S>& in1 ) throw (ImagePlusError)
            {

                ASSERT( in2.dims(0) == S, "Vectors dimension missmatch." )
                boost::array<T,S> aux;
                //aux=in1*in2;
                std::transform(in1.data(),
                               in1.data()+S,
                               in2.data(),
                               aux.c_array(),
                               std::multiplies<T>());
                
                T result=0;
                for (uint64 i=0; i<S; i++ )
                   result+=(aux[i]);
                
                return result;
            }

            
            
            
            
        }
    }
}


#endif // IMAGEPLUS_MATH_NUMERIC_PRODUCTS_HPP
