// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file readwritemodels.test
 * 
 * Tests for ReadWriteModels class
 */ 

#ifdef USE_XML

#include <boost/filesystem.hpp>
#include <imageplus/machine_learning/svm/svm_adaptors.hpp>
#include <imageplus/semantic/model.hpp>
#include <imageplus/semantic/models.hpp>
#include <imageplus/semantic/ontology.hpp>
#include <imageplus/semantic/readwritemodels.hpp>
#include <imageplus/semantic/trainer.hpp>

BOOST_AUTO_TEST_SUITE ( ReadWriteModels_Suite );

using namespace imageplus;
using namespace semantic;
using namespace machine_learning::svm;
using namespace std;

void create_models();
void check_models(Models<SVM>&);

BOOST_AUTO_TEST_CASE( readwritemodels_functions_test )
{
	// Create a Models instance using the Trainer class
	create_models();

    // Load the written models from the file
	boost::filesystem::path models_file = string(TEST_DATA_PATH_W);
	models_file /= "semantic";
	models_file /= "models";
	models_file /= "index.xml";

    Models<SVM> read_models;
    ReadWriteModels rw_models_in(models_file.string());
    rw_models_in.read(read_models);

	// check that the models can be retrieved
    check_models(read_models);
}

BOOST_AUTO_TEST_CASE( readwritemodels_operators_test )
{
	// Create a Models instance using the Trainer class
	create_models();

    // Load the written models from the file
	boost::filesystem::path models_file = string(TEST_DATA_PATH_W);
	models_file /= "semantic";
	models_file /= "models";
	models_file /= "index.xml";

    Models<SVM> read_models;
    ReadWriteModels rw_models_in(models_file.string());
    rw_models_in >> read_models;

	// check that the models can be retrieved
    check_models(read_models);
}

BOOST_AUTO_TEST_CASE( readwritemodels_open_test )
{
	boost::filesystem::path models_file = string(TEST_DATA_PATH_R);
	models_file /= "semantic";
	models_file /= "6_models";
	models_file /= "image";
	models_file /= "F1_publi";
	models_file /= "index.xml";

    ReadWriteModels rw_models_in;
    BOOST_CHECK_THROW(rw_models_in.open("/non/existent/models.xml"), ImagePlusError);
    BOOST_CHECK_NO_THROW(rw_models_in.open(models_file.string()));
}

BOOST_AUTO_TEST_CASE( readwritemodels_read_test )
{
	boost::filesystem::path models_file = string(TEST_DATA_PATH_R);
	models_file /= "semantic";
	models_file /= "6_models";
	models_file /= "image";
	models_file /= "F1_publi";
	models_file /= "index.xml";

    Models<SVM> read_models;
    ReadWriteModels rw_models_in(models_file.string());
    rw_models_in >> read_models;

	// check that the models can be retrieved
    check_models(read_models);
}

BOOST_AUTO_TEST_CASE( readwritemodels_notfound_test )
{
    ReadWriteModels rw_models_in;
    Models<SVM> read_models;
    BOOST_CHECK_THROW(rw_models_in >> read_models, ImagePlusError);
}


// AUX FUNCTIONS
void create_models()
{
	boost::filesystem::path annotation_file = string(TEST_DATA_PATH_R);
	annotation_file /= "semantic";
	annotation_file /= "5_semantic";
	annotation_file /= "2_annotations";
	annotation_file /= "image";
	annotation_file /= "F1_publi.xml";

	boost::filesystem::path models_dir = string(TEST_DATA_PATH_W);
	models_dir /= "semantic";
	models_dir /= "models";
	boost::filesystem::create_directories(models_dir);

	Trainer trainer(annotation_file.string(), models_dir.string());
	BOOST_CHECK_NO_THROW(trainer.train());
}

void check_models(Models<SVM>& models)
{
	// Check ontology was loaded
	Ontology ontology = models.get_ontology();
	BOOST_CHECK(ontology.includes_semantic_class(1));
	BOOST_CHECK_EQUAL(ontology.get_semantic_class_name(1), "cube_ING");

	// Check there is only one model part in the model for the first semantic class
	Model<SVM>::ModelPartsType model_parts = models.get_model(1).get_parts();
	BOOST_CHECK(model_parts.size() == 1);
}

BOOST_AUTO_TEST_SUITE_END ();

#endif // USE_XML
