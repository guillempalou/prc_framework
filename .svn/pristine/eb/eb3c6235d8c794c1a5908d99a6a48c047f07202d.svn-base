// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file zigzag.hpp
//!
//!  Zig-zag scanning
//! 

#include <imageplus/core.hpp>

#ifndef IMAGEPLUS_MATH_TRANSFORMS_ZIGZAG_HPP
#define IMAGEPLUS_MATH_TRANSFORMS_ZIGZAG_HPP

namespace imageplus
{
    namespace math
    {
        namespace transforms
        {
            //!
            //! \brief Zig-zag scanning of multiarrays
            //!
            //! Zig-zag scan maps a NxN multiarray of bloc inside a multiarray to a 1 x 64 vector.
            //! It is used to group low frequency coefficients resulting from some kind of transform (DCT, etc) in top of a vector.
            //! \image html zigzag.jpg
            //!
            //! Example processing entire image (must be square)\n
            //! \code
            //! MultiArray<T,2> ma(width, width);
            //!
            //! ZigZagScan zz(width);
            //!
            //! MultiArray<Coord2D<int64>,1> zzcoord = zz.coord();    // Get zigzag coordinates
            //! MultiArray<T,1>              zzcoefs = zz.coefs(ma);  // Get image coeeficients ordered in zigzag orders
            //! .....
            //! 
            //! MultiArray<T,2> rec_ma;
            //! rec_ma = zz.dezigzag(zzcoefs); // Undo zigzag and restore image
            //! \endcode
            //! 
            //! Example processing an image in 8x8 blocks.:\n
            //! \code
            //! MultiArray<T,2> ma(width, height);
            //!
            //! const uint64 BLOCK_SIZE = 8;
            //!
            //! uint64 nblocks_x = width  / BLOCK_SIZE;
            //! uint64 nblocks_y = height / BLOCK_SIZE;
            //!
            //! // Constructor. Computes and stores coordinates of first 8x8 block
            //! Coord2D<int64> ori(0,0);
            //!
            //! ZigZagScan zz(BLOCK_SIZE, ori);
            //!
            //! for (j=0; j < nblocks_y; j++)
            //! for (i=0; i < nblocks_x; i++)
            //! {
            //!     // Update top-left coordinate of current block
            //!     Coord2D<int64> tl(i*BLOCK_SIZE,j*BLOCK_SIZE);
            //!     zz2.update_block(tl);
            //!    
            //!     // Get coordinates/coefficients
            //!     MultiArray<Coord2D<int64>,1> zzcoord = zz2.coord();     // Get zigzag coordinates
            //!     MultiArray<T,1>              zzcoefs = zz2.coefs(ma);   // Get image coeeficients ordered in zigzag orders
            //!     .....
            //!     
            //!     MultiArray<T,2> rec_ma;
            //!     rec_ma = zz2.dezigzag(zzcoefs); // Undo zigzag and restore image
            //! }
            //! \endcode
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 13-11-2008
            //!
            class ZigZagScan
            {
                public:

                    //!
                    //! \brief Default constructor
                    //!
                    ZigZagScan();

                    //!
                    //! \brief Constructor giving the dimensions of the image
                    //!
                    //! As this is image independent, only the coordenates of the zigzag are computed
                    //!
                    //! \param[in] N  : width of the square image
                    //!
                    ZigZagScan (uint64 N);
            
                    //!
                    //! \brief Constructor for a block of an image
                    //!
                    //! As this is image independent, only the coordenates of the zigzag are computed
                    //!
                    //! \param[in] top_left : Top-left coordinate of the block
                    //! \param[in] width    : width of the square block (default value 8)
                    //!
                    ZigZagScan(Coord2D<int64> top_left, uint64 width=8);


                    //!
                    //! \brief Updates the coordinate of the top-left point of the block
                    //! 
                    //! This method can be used to iteratively computing the zig-zag scan of the
                    //! blocks of an multiarray.
                    //!
                    //! \param[in] top_left : Top-left coordinate of the block
                    //!
                    void update_block(Coord2D<int64> top_left);

                    //!
                    //! \brief Return the coordinates of the zigzag scan
                    //!
                    //! \return 1D Multiarray with the zigzag scan coordinates
                    //!
                    const MultiArray< Coord2D<int64>, 1 > coords() const;


                    //!
                    //! \brief Return the first N coordinates of the zigzag scan
                    //!
                    //! \param[in] ncoefs : First N coefficients to return
                    //!
                    //! \return 1D Multiarray with the zigzag scan coordinates
                    //!
                    const MultiArray< Coord2D<int64>, 1 > coords(uint64 ncoefs) const;

                    //!
                    //! \brief Return the coefficients of the zigzag scan
                    //!
                    //! \tparam T : Type of the multiarray data\n
                    //!
                    //! \param[in] ma : Input multiarray (not necessarily square)
                    //!
                    //! \return 1D Multiarray with the multiarray coefficients arranged in a zigzag scan
                    //!
                    template<typename T>
                    MultiArray<T,1> coefs(const MultiArray<T,2>& ma) const;


                    //!
                    //! \brief Return the first N coefficients of the zigzag scan
                    //!
                    //! \tparam T : Type of the multiarray data\n
                    //!
                    //! \param[in] ma     : Input multiarray (not necessarily square)
                    //! \param[in] ncoefs : First N coefficients to return
                    //!
                    //! \return 1D Multiarray with the multiarray coefficients arranged in a zigzag scan
                    //!
                    template<typename T>
                    MultiArray<T,1> coefs(const MultiArray<T,2>& ma, uint64 ncoefs) const;

                    //!
                    //! \brief Return a 2D multiarray with the coefficients
                    //!
                    //! \tparam T : Type of the multiarray data\n
                    //!
                    //! \param[in] coeffs : 1D multiarray with the zigzag ordered coefficients 
                    //!
                    //! \return 2D Multiarray with the coefficients
                    //!
                    template<typename T>
                    MultiArray<T,2> dezigzag(const MultiArray<T,1>& coeffs) const;


                    //!
                    //! \brief Put the zig-zag ordered coefficients into a 2D multiarray
                    //!
                    //! \tparam T : Type of the multiarray data\n
                    //!
                    //! \param[in]  coeffs : 1D multiarray with the zigzag ordered coefficients 
                    //! \param[out] out    : 2D multiarray with the coefficients 
                    //!
                    template<typename T>
                    void dezigzag(const MultiArray<T,1>& coeffs, MultiArray<T,2>& out) const;

                private:

                    //! Width (and height) of the square image or bloc from where the zigzag is computed 
                    uint64 _N;

                    //! Top left coordinate of the block
                    Coord2D<int64> _tl;

                    //! 1D array with the coordinates of pixels after zigzag scan
                    MultiArray< Coord2D<int64>, 1 > _zz_coord;

                    //!
                    //! \brief Function that computes the coordinates of the zigzag ordering
                    //!
                    void _zigzag_coords();
            };
        }
    }
}

#endif

