// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file graph.test
//!
//!  Tests for the math operations on Graphs
//!

#include <imageplus/math/graphs/graph.hpp>
#include <imageplus/math/graphs/graph_io.hpp>

BOOST_AUTO_TEST_SUITE ( test_graph );

using namespace imageplus;
using namespace imageplus::math;
using namespace imageplus::math::graphs;

BOOST_AUTO_TEST_CASE( graph_test_io )
{
	uint64 NUM_NODES = 50;
	uint64 NUM_EDGES = 150;

	typedef BoostGraph<> Graph;
	typedef Graph::Node Node;
	typedef Graph::Edge Edge;

	Graph g;

	for (uint64 i = 0; i < NUM_NODES; i++) {
		Node a = g.add_node();
		g.node_properties(a).id = i;
	}

	for (uint64 i = 0; i < NUM_EDGES; i++) {
		uint64 a = rand() % NUM_NODES;
		uint64 b = rand() % NUM_NODES;

		while (a == b || g.edge_exists(a,b)) {
			a = rand() % NUM_NODES;
			b = rand() % NUM_NODES;
		}

		Edge e = g.add_edge(a,b);
		g.edge_properties(e).weight = rand() * 1.0 / RAND_MAX;
	}

	WriteGraph<Graph> wg;
	wg.write(g,std::string(TEST_DATA_PATH_W) + "/math/graphs/io_test.graph");

	ReadGraph<Graph> rg;
	Graph r;

	rg.read(std::string(TEST_DATA_PATH_W) + "/math/graphs/io_test.graph", r, true);

	BOOST_CHECK(g.num_nodes() == r.num_nodes());
	for (Graph::node_iterator n = r.nodes_begin(); n != r.nodes_end(); ++n) {
		BOOST_CHECK(g.node_properties(*n).id == r.node_properties(*n).id);
	}

	BOOST_CHECK(g.num_edges() == r.num_edges());
	for (Graph::edge_iterator e = r.edges_begin(); e != r.edges_end(); ++e) {
		Node a = r.source(*e);
		Node b = r.target(*e);

		BOOST_CHECK(g.edge_exists(a,b) == true);

		BOOST_CHECK_CLOSE(g.edge_properties(g.edge(a,b)).weight,r.edge_properties(*e).weight,0.1);
	}
}

BOOST_AUTO_TEST_SUITE_END ();
