// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file coord2d.hpp
 */

#ifndef IMAGEPLUS_CORE_COORD2D_HPP
#define IMAGEPLUS_CORE_COORD2D_HPP

#include <imageplus/core/coord.hpp>

namespace imageplus
{
    /*!
     * \brief Class to represent 2D coordinates, usually to represent the pixel positions in an Image.
     *
     * Usually, top-left pixel of the image is the origin of coordinates,
     * the positive x-axis (first) points right and the positive y-axis (second)
     * points down.
     *
     * This class is just a kind of "template typedef" for the Coord<T,D>, for D=2.
     *
     * \see Coord, Coord3D, Point2D
     *
     * \author 2008-02 - Josep Ramon Morros <ramon.morros@upc.edu> - Creation
     * \author 2011-06 - Albert Gil Moreno <albert.gil@upc.edu>    - Review
     */
    template < typename T = int64>
    class Coord2D : public Coord<T,2> 
    {
    private:

        typedef Coord<T,2> BaseCoord; //!< Base class

    public:

        typedef typename BaseCoord::data_type  data_type;                          //!< The data_type of the Coord (T)
        static const std::size_t               dimensions = BaseCoord::dimensions; //!< The dimension of the Coord space (2D)

        /*!
         * \brief Default constructor
         */
        Coord2D()
        :   BaseCoord()
        {}

        /*!
         * Constructor from (x,y) values
         *
         * \param[in] x : the value of the first dimension
         * \param[in] y : the value of the second dimension
         */

        Coord2D(T x, T y)
        :   BaseCoord(x,y)
        {}

        /*!
         * Copy constructor from the base class array using a RoundMode.
         *
         * Note that we can use this constructor as a copy constructor from a Coord<TC,D> or a Point<D>.
         *
         * \tparam TC : the type of the copy object, it will be transformed to T with the RoundMode
         *
         * \param[in] copy : the array (Coord<TC,> or Point<D>) to copy the Coord from
         * \param[in] mode : the RoundMode used to compute the Coord
         */
        template<typename TC>
        Coord2D ( const boost::array<TC, dimensions>& copy, RoundMode mode )
        :    BaseCoord(copy,mode)
        {}

        /*!
         * Copy constructor from the base class array with implicit type cast (ROUND).
         *
         * Note that we can use this constructor as a copy constructor from a Coord<TC,D>.
         * It is not recommended to use with Points.
         *
         * It call the set(array,mode) function with mode=ROUND.
         *
         * \tparam TC : the type of the copy object, it will be transformed to T with ROUND
         *
         * \param[in] copy : the array (Coord<TC,>) to copy the Coord from
         */
        template<typename TC>
        Coord2D ( const boost::array<TC, dimensions>& copy )
        :    BaseCoord(copy)
        {}

        /*!
         * Assignment operator from the base/array class, with an implicit data type conversion
         *
         * \param[in] copy : the object to copy from (it can be also a Coord<TC,2> or a Coord2D<TC>)
         *
         * \returns this, just to concatenate
         */
        template<typename TC>
        const Coord2D& operator= (const boost::array<TC,dimensions>& copy)
        {
            BaseCoord::operator=(copy);
            return *this;
        }
    };
}

#endif /* IMAGEPLUS_COORD2D_HPP */
