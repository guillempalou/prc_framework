// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file fourier.hpp
//!
//! Fourier transformations using boost::multi_array
//! Several functions offered by the fftw3 library are wrapped using
//! \c boost::multi_array.
//! There are several types of fourier-transforms. The current implementation
//! only allows fourier-transforms on double precision numbers.
//! \li \c fft is the complex-to-complex fourier transform.
//! \li \c invfft is the inverse complex-to-complex fourier transform.
//! \li \c rfft is the real-to-complex fourier transform (last dimension
//! of input-array must be even).
//! \li \c invrfft is the inverse real-to-complex fourier transform.
//!
//! The real-to-complex fourier transform will result in an array of about
//! half the size, because the fourier transform of a real function always is
//! symmetric:
//! \f$\mathrm{mm\_rfft}:\mathbf{R}^{n_1\times n_2\times\ldots n_d}\rightarrow
//! \mathbf{C}^{n_1\times n_2\times\ldots (n_d/2+1)}\f$
//!

#ifndef IMAGEPLUS_MATH_TRANSFORMS_FOURIER_HPP
#define IMAGEPLUS_MATH_TRANSFORMS_FOURIER_HPP

#include <imageplus/core.hpp>


namespace imageplus
{
    namespace math
    {
        namespace transforms
        {
            //! Constant to determine a column-wise transform
            const uint64 COL_TRANSFORM = 0;
    
            //! Constant to determine a row-wise transform
            const uint64 ROW_TRANSFORM = 1;
    
            //!
            //! \brief Discrete fourier transform of a MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray
            //! \tparam T: Type of the input and output data \n
            //! \tparam D: Dimensionality of the multiarray\n
            //!
            //! \param[in] ma: Input multiarray (complex)
            //! 
            //! \return Fourier transform of the input multiarray (complex)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T, std::size_t D>
            MultiArray<std::complex<T>, D> fft( const MultiArray<std::complex<T>, D>& ma );
    
            /** Inverse discrete fourier transform of boost::multi_array.
                @see invfft_t */
            //!
            //! \brief Inverse discrete fourier transform of a MultiArray
            //!
            //! Uses functions offered by the fftw3 library, wrapped using imageplus::MultiArray\n
            //! \tparam T: Type of the input and output data \n
            //! \tparam D: Dimensionality of the multiarray\n
            //!
            //! \param[in] ma: Input multiarray (complex)
            //! 
            //! \return Inverse fourier transform of the input multiarray (complex)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T, std::size_t D>
            MultiArray<std::complex<T>, D> ifft( const MultiArray<std::complex<T>, D>& ma );
    
            //!
            //! \brief Discrete fourier transform of a real-valued MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! The fourier transform of a real (multidimensional) function is
            //! point-symmetric. Thus it is sufficient to compute only HALF of the
            //! values of the corresponding discrete fourier transform.
            //!    
            //! If the input array is an element of \f$ \mathbf{R}^{n_1 \times n_2 \times \ldots \times n_d} \f$,
            //! then the result will be element of
            //! \f$ \mathbf{C}^{n_1 \times n_2 \times \ldots \times (n_d/2+1)} \f$. \n
            //! That is, ONLY the LOWER HALF (non-negative frequencies), plus one element, of 
            //! the last dimension of the data from the ordinary complex transform is stored.
            //! This data is simply a SUBSECTION of what would be the array in the corresponding complex transform.  
            //!
            //! In this implementation \f$n_d\f$ always must be even, so that no additional
            //! information for a later inverse transform is required
            //!
            //! \tparam T: Type of the input and output data \n
            //! \tparam D: Dimensionality of the multiarray\n
            //!
            //! \param[in] ma: Input multiarray (real)
            //! 
            //! \return Fourier transform of the input multiarray (complex)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T, std::size_t D>
            MultiArray<std::complex<T>, D> rfft( const MultiArray< T, D>& ma );
    
            //!
            //! \brief Inverse discrete fourier transform resuling in a real-valued MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! The fourier transform of a real (multidimensional) function is
            //! point-symmetric. Thus it is sufficient to compute only half of the
            //! values of the corresponding discrete fourier transform.
            //!    
            //! If the input array is an element of \f$\mathbf{C}^{n_1\times n_2\times \ldots\times n_d}\f$, 
            //! then the result will be element of
            //! \f$\mathbf{R}^{n_1\times n_2\times\ldots\times (n_d-1)*2)}\f$.
            //!
            //! In this implementation the nth dimension of the resulting array is assumed to be even
            //!
            //! \tparam T: Type of the input and output data \n
            //! \tparam D: Dimensionality of the multiarray\n
            //!
            //! \param[in] ma: Input multiarray (complex)
            //! 
            //! \return Fourier transform of the input multiarray (real)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T, std::size_t D>
            MultiArray<T, D> irfft( const MultiArray<std::complex<T>, D>& ma );
    
            //!
            //! \brief 1-D Discrete cosine transform of a 1-D real-valued MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! Normalization factors are applied to ensure ortogonality\n
            //! \tparam T: Type of the input and output data \n
            //!
            //! \param[in] ma: Input multiarray (real, 1-D)
            //! 
            //! \return Cosine transform of the input multiarray (real, 1-D)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T>
            MultiArray<T,1> dct1d( const MultiArray<T,1>& ma ) throw (ImagePlusError);
    
            //!
            //! \brief Row-wise or column-wise 1-D discrete cosine transform of a 2-D real-valued MultiArray
            //!
            //! 1-D transform applied to the rows or columns of the 2-D array.\n
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! Normalization factors are applied to ensure ortogonality\n
            //! \tparam T: Type of the input and output data \n
            //!
            //! \param[in] ma       : Input multiarray (real, 2-D)
            //! \param[in] direction: Whether to perform the transform row-wise or column-wise
            //! 
            //! \return Row-wise of column-wise cosine transform of the input multiarray (real, 2-D)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 08-4-2008
            //!
            template<typename T>
            MultiArray<T,2> dct1d( const MultiArray<T,2>& ma, uint64 direction )  throw (ImagePlusError);
    
            //!
            //! \brief 2-D Discrete cosine transform of a real-valued 2-D MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! Normalization factors are applied to ensure ortogonality\n
            //! \tparam T: Type of the input and output data \n
            //!
            //! \param[in] ma: Input multiarray (real, 2-D)
            //! 
            //! \return Cosine transform of the input multiarray (real, 2-D)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T>
            MultiArray<T,2> dct2d( const MultiArray<T,2>& ma ) throw (ImagePlusError);
    
            //!
            //! \brief 3-D Discrete cosine transform of a real-valued 3-D MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! Normalization factors are applied to ensure ortogonality\n
            //! \tparam T: Type of the input and output data \n
            //!
            //! \param[in] ma: Input multiarray (real, 3-D)
            //! 
            //! \return Cosine transform of the input multiarray (real, 3-D)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 09-4-2008
            //!
            template<typename T>
            MultiArray<T,3> dct3d( const MultiArray<T,3>& ma ) throw (ImagePlusError);
    
            //!
            //! \brief 1-D Inverse discrete cosine transform resulting in a real-valued 1-D MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! Normalization factors are applied to ensure ortogonality\n
            //! \tparam T: Type of the input and output data \n
            //!
            //! \param[in] ma: Input multiarray (real, 1-D)
            //! 
            //! \return Inverse cosine transform of the input multiarray (real, 1-D)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T>
            MultiArray<T,1> idct1d( const MultiArray<T,1>& ma ) throw (ImagePlusError);

            //!
            //! \brief Row-wise or column-wise 1-D inverse discrete cosine transform of a 2-D real-valued MultiArray
            //!
            //! 1-D transform applied to the rows or columns of the 2-D array.\n
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! Normalization factors are applied to ensure ortogonality\n
            //! \tparam T: Type of the input and output data \n
            //!
            //! \param[in] ma       : Input multiarray (real, 2-D)
            //! \param[in] direction: Whether to perform the transform row-wise or column-wise
            //! 
            //! \return Row-wise of column-wise inverse cosine transform of the input multiarray (real, 2-D)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 09-4-2008
            //!
            template<typename T>
            MultiArray<T,2> idct1d( const MultiArray<T,2>& ma, uint64 direction )  throw (ImagePlusError);
    
            //!
            //! \brief 2-D Inverse discrete cosine transform resulting in a real-valued 2-D MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! Normalization factors are applied to ensure ortogonality\n
            //! \tparam T: Type of the input and output data \n
            //!
            //! \param[in] ma: Input multiarray (real, 2-D)
            //! 
            //! \return Inverse cosine transform of the input multiarray (real, 2-D)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T>
            MultiArray<T,2> idct2d( const MultiArray<T,2>& ma ) throw (ImagePlusError);
    
            //!
            //! \brief 3-D Inverse discrete cosine transform resulting in a real-valued 3-D MultiArray
            //!
            //! Functions offered by the fftw3 library are wrapped using imageplus::MultiArray\n
            //! Normalization factors are applied to ensure ortogonality\n
            //! \tparam T: Type of the input and output data \n
            //!
            //! \param[in] ma: Input multiarray (real, 3-D)
            //! 
            //! \return Inverse cosine transform of the input multiarray (real, 3-D)
            //!
            //! \author Josep Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 25-3-2008
            //!
            template<typename T>
            MultiArray<T,3> idct3d( const MultiArray<T,3>& ma ) throw (ImagePlusError);
        }
    }
}


#endif //IMAGEPLUS_MATH_TRANSFORMS_FOURIER_HPP
