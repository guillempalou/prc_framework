// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file imagepartition.test
//!
//! Tests for basic functions working with ImagePartition 
//!
#include <imageplus/core.hpp>
#include <imageplus/core/imagepartition.hpp>
#include <imageplus/io/readimage.hpp>

BOOST_AUTO_TEST_SUITE ( ImagePartition_Suite );

using namespace imageplus;
using namespace std;


BOOST_AUTO_TEST_CASE( relabel_partition )
{  
    ImagePartition<> temp_part;
    temp_part.resize(2,2);
    
    temp_part[0][0] = 3;
    temp_part[1][0] = 8;
    temp_part[0][1] = 4;
    temp_part[1][1] = 9;
    
    ImagePartition<> out_part1(temp_part);
    
    part_bimap bimap;
    
    relabel(temp_part, out_part1, bimap);
    
    BOOST_CHECK( out_part1[0][0] == 1 );
    BOOST_CHECK( out_part1[1][0] == 2 );
    BOOST_CHECK( out_part1[0][1] == 3 );
    BOOST_CHECK( out_part1[1][1] == 4 );
    
    part_bimap::left_const_iterator it;
    
    it = bimap.left.find(3);
    BOOST_CHECK( it->second == 1 );
    it = bimap.left.find(8);
    BOOST_CHECK( it->second == 2 );
    it = bimap.left.find(4);
    BOOST_CHECK( it->second == 3 );
    it = bimap.left.find(9);
    BOOST_CHECK( it->second == 4 );
    
    
    part_bimap::right_const_iterator it2;
    
    it2 = bimap.right.find(1);
    BOOST_CHECK( it2->second == 3 );
    it2 = bimap.right.find(2);
    BOOST_CHECK( it2->second == 8 );
    it2 = bimap.right.find(3);
    BOOST_CHECK( it2->second == 4 );
    it2 = bimap.right.find(4);
    BOOST_CHECK( it2->second == 9 );
    
    ImagePartition<> out_part2(temp_part);
    relabel(temp_part, out_part2, bimap);
    BOOST_CHECK( out_part1(0)==out_part2(0) );
    
    uint32 init = 7;
    uint32 num_regions;
    
    part_bimap bimap2;
    
    num_regions = relabel(temp_part, out_part1, bimap2, init);
    
    BOOST_CHECK( out_part1[0][0] == 7 );
    BOOST_CHECK( out_part1[1][0] == 8 );
    BOOST_CHECK( out_part1[0][1] == 9 );
    BOOST_CHECK( out_part1[1][1] == 10 );
    
    it = bimap2.left.find(3);
    BOOST_CHECK( it->second == 7 );
    it = bimap2.left.find(8);
    BOOST_CHECK( it->second == 8 );
    it = bimap2.left.find(4);
    BOOST_CHECK( it->second == 9 );
    it = bimap2.left.find(9);
    BOOST_CHECK( it->second == 10 );
    
    it2 = bimap2.right.find(7);
    BOOST_CHECK( it2->second == 3 );
    it2 = bimap2.right.find(8);
    BOOST_CHECK( it2->second == 8 );
    it2 = bimap2.right.find(9);
    BOOST_CHECK( it2->second == 4 );
    it2 = bimap2.right.find(10);
    BOOST_CHECK( it2->second == 9 );
    
    BOOST_CHECK( num_regions == 4);
    
    init = 25;
    num_regions = relabel(temp_part, out_part1, init);
    
    BOOST_CHECK( out_part1[0][0] == 25 );
    BOOST_CHECK( out_part1[1][0] == 26 );
    BOOST_CHECK( out_part1[0][1] == 27 );
    BOOST_CHECK( out_part1[1][1] == 28 );
    
    BOOST_CHECK( num_regions == 4);
    
    relabel(temp_part, temp_part);
    
    BOOST_CHECK( temp_part[0][0] == 1 );
    BOOST_CHECK( temp_part[1][0] == 2 );
    BOOST_CHECK( temp_part[0][1] == 3 );
    BOOST_CHECK( temp_part[1][1] == 4 );

    
}



BOOST_AUTO_TEST_CASE( compute_region_areas )
{
    ImagePartition<> part(5,5);
    part = 1; 
    part[3][0] = 2;
    part[3][1] = 2;
    part[0][2] = 3;
    part[1][2] = 3;
    part[2][2] = 3;
    part[3][2] = 3;
    part[4][2] = 3;
    part[0][3] = 4;
    part[1][3] = 4;
    part[2][3] = 4;
    part[3][3] = 4;
    part[4][3] = 5;
    part[4][4] = 5;
    part[3][4] = 5;
    part[0][4] = 7;
    part[1][4] = 7;
    part[2][4] = 7;

    partition_table table = region_areas(part);

    partition_table::left_const_iterator iter_end = table.left.end();
    
    partition_table::left_iterator iter;
    
    iter = table.left.find(1);
    BOOST_CHECK(iter->second == 8);
    
    iter = table.left.find(2);
    BOOST_CHECK(iter->second == 2);
    
    iter = table.left.find(3);
    BOOST_CHECK(iter->second == 5);
    
    iter = table.left.find(4);
    BOOST_CHECK(iter->second == 4);
    
    iter = table.left.find(5);
    BOOST_CHECK(iter->second == 3);
    
    iter = table.left.find(6);
    BOOST_CHECK(iter == iter_end);
    
    iter = table.left.find(7);
    BOOST_CHECK(iter->second == 3);
}


BOOST_AUTO_TEST_CASE( compute_mean_of_regions )
{ 
    ImageRGB<uint8> temp_rgb(2,2);
    
    temp_rgb(RED_CHANNEL)[0][0] = 1;
    temp_rgb(RED_CHANNEL)[1][0] = 3;    
    temp_rgb(RED_CHANNEL)[0][1] = 5;
    temp_rgb(RED_CHANNEL)[1][1] = 6;
       
    temp_rgb(GREEN_CHANNEL)[0][0] = 5;
    temp_rgb(GREEN_CHANNEL)[1][0] = 6;    
    temp_rgb(GREEN_CHANNEL)[0][1] = 0;
    temp_rgb(GREEN_CHANNEL)[1][1] = 0;
        
    temp_rgb(BLUE_CHANNEL)[0][0] = 65;
    temp_rgb(BLUE_CHANNEL)[1][0] = 1;    
    temp_rgb(BLUE_CHANNEL)[0][1] = 8;
    temp_rgb(BLUE_CHANNEL)[1][1] = 9;

    ImagePartition<> temp_part(2,2);
    
    temp_part[0][0] = 25;
    temp_part[1][0] = 25;
    temp_part[0][1] = 2;
    temp_part[1][1] = 4;
    
    ImageRGB<uint8> out_rgb(2,2);
    
    mean_of_regions(temp_rgb, temp_part, out_rgb);

    BOOST_CHECK( out_rgb(RED_CHANNEL)[0][0] == 2);
    BOOST_CHECK( out_rgb(RED_CHANNEL)[1][0] == 2);
    BOOST_CHECK( out_rgb(RED_CHANNEL)[0][1] == 5);
    BOOST_CHECK( out_rgb(RED_CHANNEL)[1][1] == 6);
    
    BOOST_CHECK( out_rgb(GREEN_CHANNEL)[0][0] == 5);
    BOOST_CHECK( out_rgb(GREEN_CHANNEL)[1][0] == 5);
    BOOST_CHECK( out_rgb(GREEN_CHANNEL)[0][1] == 0);
    BOOST_CHECK( out_rgb(GREEN_CHANNEL)[1][1] == 0);
  
    BOOST_CHECK( out_rgb(BLUE_CHANNEL)[0][0] == 33);
    BOOST_CHECK( out_rgb(BLUE_CHANNEL)[1][0] == 33);
    BOOST_CHECK( out_rgb(BLUE_CHANNEL)[0][1] == 8);
    BOOST_CHECK( out_rgb(BLUE_CHANNEL)[1][1] == 9);
   
}


BOOST_AUTO_TEST_CASE( num_regions_test )
{
    ImagePartition<uint32> partition(3,3);
     partition[0][0] = 1;    partition[1][0] = 25;   partition[2][0] = 30;
     partition[0][1] = 2;    partition[1][1] = 2;    partition[2][1] = 25;
     partition[0][2] = 2;    partition[1][2] = 1;    partition[2][2] = 25;
     
    BOOST_CHECK_EQUAL( num_regions(partition.colors_begin(),partition.colors_end()), (std::size_t)4 );
}

BOOST_AUTO_TEST_SUITE_END ();


