// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * 
 * \example io_capture_example.hpp
 * 
 * This is an example about how to use the Capture classes. 
 *
 */

/*
 * To link the IP camera drivers you need to USE_SMARTFLOW
 */
#ifdef USE_SMARTFLOW

/*
 * This is the main header file and namespace
 */
#include <imageplus/io/captureip.hpp>

using namespace imageplus;
using namespace imageplus::io;

/*
 * The Capture* classes have been designed following the C++ stream idea.
 * So, we should use the ">>" operator to get frames from the devices.
 */
void capture_ip()
{
    /*
     * Creating the capture object from an IP address
     */
    CaptureIP cap ( "192.168.1.2" );

    
    /*
     * Creating the objects to store captured frames, and their timestamp.
     */
    ImageRGB<uint8>     rgb; // to capture rgb images 
    MultiArray<uint8,2> bay; // to capture raw data in the bayer pattern (NOT RECOMENDED)
    Timestamp           ts;
    
    /*
     * Staring capture
     */
    cap.start();
    
    /*
     * Main capture loop
     */
    uint16 frame=0;
    bool bayer_mode = false; // or true (not recomended in general, only useful for recordings, to save to disk)
    while(++frame < 100) 
    {
        /*
         * Use the operator ">>" to capture new frames, and their asociated timestamp
         * 
         * NOTE: You should always read first the frame, and later the timestamp.
         */ 
        if( bayer_mode )
        {
            cap >> bay >> ts;
        }
        else
        {
            cap >> rgb >> ts;
        }
        
        /*
         * Here you can do whatever you want with your captured image
         */ 
        //...
    }
    
    /*
     * Beforo exit we should stop/close the camera
     */
    cap.stop();
}
 
#endif // USE_SMARTFLOW
