// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file multiarray_comparison.cpp
//!
//!  Methods to compare multiarrays
//!

#include <imageplus/core/multiarray_comparison.hpp>

using namespace imageplus;



template<typename T, std::size_t D>
uint64 imageplus::comparison_count (const MultiArray<T,D>& ma1, const MultiArray<T,D>& ma2, const int8 op[3]) throw (ImagePlusError)
{
    // test that images have same dimensions
    compatible (ma1, ma2);


    uint64 outval = 0;        /*Return value.*/

    const T* da  = ma1.data();
    const T* end = da + ma1.num_elements();
    const T* db  = ma2.data();

    uint64 opp = (op[1] == 0) ? op[0] : op[0]*256+op[1];
    
    switch(opp)
    {
        case ('='*256 + '='): 
            while(da != end)
            {
                outval += (*da++ == *db++);
            }
            break;

        case ('!'*256 + '='): 
            while(da != end)
            {
                outval += (*da++ != *db++);
            }
            break;
        case ('>'*256 + '='):
            while(da != end)
            {
                outval += (*da++ >= *db++);
            }
            break;
        case ('<'*256 + '='): 
            while(da != end)
            {
                outval += (*da++ <= *db++);
            }
            break;
        case '>': 
            while(da != end)
            {
                outval += (*da++ > *db++);
            }
            break;
        case '<': 
            while(da != end)
            {
                outval += (*da++ < *db++);
            }
            break;
        default: 
            throw ImagePlusError("Bad operation code.");
            break;
    }
    return outval;
}


template<std::size_t D>
uint64  imageplus::comparison_count (const MultiArray<bool,D>& ma1, const MultiArray<bool,D>& ma2, const int8 op[3]) throw (ImagePlusError)
{
    // test that images have same dimensions
    compatible (ma1, ma2);

    uint64 outval = 0;        /*Return value.*/

    const bool* da  = ma1.data();
    const bool* end = da + ma1.num_elements();
    const bool* db  = ma2.data();

    uint64 opp = (op[1] == 0) ? op[0] : op[0]*256+op[1];
    
    switch(opp)
    {
        case ('='*256 + '='): 
            while(da != end)
            {
                outval += (*da++ == *db++);
            }
            break;
        case ('!'*256 + '='): 
            while(da != end)
            {
                outval += (*da++ != *db++);
            }
            break;
        default: 
            throw ImagePlusError("Bad operation code.");
            break;
    }
    return outval;
}

template<typename T, std::size_t D>
uint64 imageplus::comparison_count (const MultiArray<T,D>& ma1, T val, const int8 op[3])  throw (ImagePlusError)
{
    uint64 outval = 0;        /*Return value.*/

    const T* da  = ma1.data();
    const T* end = da + ma1.num_elements();

    uint64 opp = (op[1] == 0) ? op[0] : op[0]*256+op[1];
    
    switch(opp)
    {
        case ('='*256 + '='): 
            //outval = std::count_if (da, end, boost::bind(std::equal_to<T>(),_1, val));

            while(da != end)
            {
                outval += (*da++ == val);
            }
            break;
        case ('!'*256 + '='): 
            //outval = std::count_if (da, end, boost::bind(std::not_equal_to<T>(),_1, val));
            while(da != end)
            {
                outval += (*da++ != val);
            }
            break;
        case ('>'*256 + '='):
            //outval = std::count_if (da, end, boost::bind(std::greater_equal<T>(),_1, val));
            while(da != end)
            {
                outval += (*da++ >= val);
            }
            break;
        case ('<'*256 + '='): 
            //outval = std::count_if (da, end, boost::bind(std::less_equal<T>(),_1, val));
            while(da != end)
            {
                outval += (*da++ <= val);
            }
            break;
        case '>': 
            //outval = std::count_if (da, end, boost::bind(std::greater<T>(),_1, val));
            while(da != end)
            {
                outval += (*da++ > val);
            }
            break;
        case '<': 
            //outval = std::count_if (da, end, boost::bind(std::less<T>(),_1, val));
            while(da != end)
            {
                outval += (*da++ < val);
            }
            break;
        default: 
            throw ImagePlusError("Bad operation code.");
            break;
    }
    return outval;
}


template<std::size_t D>
uint64 imageplus::comparison_count (const MultiArray<bool,D>& ma1, bool val, const int8 op[3])  throw (ImagePlusError)
{
    uint64 outval = 0;        /*Return value.*/

    const bool* da  = ma1.data();
    const bool* end = da + ma1.num_elements();

    uint64 opp = (op[1] == 0) ? op[0] : op[0]*256+op[1];
    
    switch(opp)
    {
        case ('='*256 + '='): 
            //outval = std::count_if (da, end, boost::bind(std::equal_to<bool>(),_1, val));
            while(da != end)
            {
                outval += (*da++ == val);
            }
            break;
        case ('!'*256 + '='): 
            //outval = std::count_if (da, end, boost::bind(std::not_equal_to<bool>(),_1, val));
            while(da != end)
            {
                outval += (*da++ != val);
            }
            break;
        default: 
            throw ImagePlusError("Bad operation code.");
            break;
    }
    return outval;
}



// Instantiations
namespace imageplus
{
    template void notsame( const MultiArray<bool,3>&, const MultiArray<bool,3>& );
    template void notsame( const MultiArray<uint8,3>&, const MultiArray<uint8,3>& );
    template void notsame( const MultiArray<int16,3>&, const MultiArray<int16,3>& );
    template void notsame( const MultiArray<int64,3>&, const MultiArray<int64,3>& );
    template void notsame( const MultiArray<float64,3>&, const MultiArray<float64,3>& );

    template void notsame( const MultiArray<bool,2>&, const MultiArray<bool,2>& );
    template void notsame( const MultiArray<uint8,2>&, const MultiArray<uint8,2>& );
    template void notsame( const MultiArray<int16,2>&, const MultiArray<int16,2>& );
    template void notsame( const MultiArray<int64,2>&, const MultiArray<int64,2>& );
    template void notsame( const MultiArray<float64,2>&, const MultiArray<float64,2>& );



    template void compatible( const MultiArray<bool,3>&, const MultiArray<bool,3>& );
    template void compatible( const MultiArray<uint8,3>&, const MultiArray<uint8,3>& );
    template void compatible( const MultiArray<int16,3>&, const MultiArray<int16,3>& );
    template void compatible( const MultiArray<int64,3>&, const MultiArray<int64,3>& );
    template void compatible( const MultiArray<float64,3>&, const MultiArray<float64,3>& );

    template void compatible( const MultiArray<bool,2>&, const MultiArray<bool,2>& );
    template void compatible( const MultiArray<uint8,2>&, const MultiArray<uint8,2>& );
    template void compatible( const MultiArray<int16,2>&, const MultiArray<int16,2>& );
    template void compatible( const MultiArray<int64,2>&, const MultiArray<int64,2>& );
    template void compatible( const MultiArray<float64,2>&, const MultiArray<float64,2>& );


    template uint64 comparison_count ( const MultiArray<uint8,1>&,   const MultiArray<uint8,1>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int16,1>&,   const MultiArray<int16,1>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<uint32,1>&,  const MultiArray<uint32,1>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int64,1>&,   const MultiArray<int64,1>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<float64,1>&, const MultiArray<float64,1>& , const int8 op[3]) throw (ImagePlusError);

    template uint64 comparison_count ( const MultiArray<uint8,2>&,   const MultiArray<uint8,2>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int16,2>&,   const MultiArray<int16,2>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<uint32,2>&,  const MultiArray<uint32,2>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int64,2>&,   const MultiArray<int64,2>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<float64,2>&, const MultiArray<float64,2>& , const int8 op[3]) throw (ImagePlusError);

    template uint64 comparison_count ( const MultiArray<uint8,3>&,   const MultiArray<uint8,3>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int16,3>&,   const MultiArray<int16,3>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<uint32,3>&,  const MultiArray<uint32,3>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int64,3>&,   const MultiArray<int64,3>& ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<float64,3>&, const MultiArray<float64,3>& , const int8 op[3]) throw (ImagePlusError);

    template uint64 comparison_count ( const MultiArray<bool,1>&, const MultiArray<bool,1>& , const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<bool,2>&, const MultiArray<bool,2>& , const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<bool,3>&, const MultiArray<bool,3>& , const int8 op[3]) throw (ImagePlusError);



    template uint64 comparison_count ( const MultiArray<uint8,1>&,   uint8   , const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int16,1>&,   int16   , const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<uint32,1>&,  uint32  , const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int64,1>&,   int64   , const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<float64,1>&, float64 , const int8 op[3]) throw (ImagePlusError);

    template uint64 comparison_count ( const MultiArray<uint8,2>&,   uint8 ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int16,2>&,   int16 ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<uint32,2>&,  uint32 ,  const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int64,2>&,   int64 ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<float64,2>&, float64 , const int8 op[3]) throw (ImagePlusError);

    template uint64 comparison_count ( const MultiArray<uint8,3>&,   uint8 ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int16,3>&,   int16 ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<uint32,3>&,  uint32,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<int64,3>&,   int64 ,   const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<float64,3>&, float64 , const int8 op[3]) throw (ImagePlusError);

    template uint64 comparison_count ( const MultiArray<bool,1>&, bool , const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<bool,2>&, bool , const int8 op[3]) throw (ImagePlusError);
    template uint64 comparison_count ( const MultiArray<bool,3>&, bool , const int8 op[3]) throw (ImagePlusError);

#if 0
    template MultiArray<uint8,1> ma_compare ( const MultiArray<uint8,1>& , const MultiArray<uint8,1>& , const int8 op[3] , const MultiArray<uint8,1>& , const MultiArray<uint8,1>& ) throw (ImagePlusError);

    template MultiArray<int16,1> ma_compare(const MultiArray<int16,1>&, const MultiArray<int16,1>&, const int8 op[3], const MultiArray<int16,1>&, const MultiArray<int16,1>& );
    template MultiArray<int64,1> ma_compare(const MultiArray<int64,1>&, const MultiArray<int64,1>&, const int8 op[3], const MultiArray<int64,1>&, const MultiArray<int64,1>& ) throw (ImagePlusError);
    template MultiArray<float64,1> ma_compare(const MultiArray<float64,1>&, const MultiArray<float64,1>&, const int8 op[3], const MultiArray<float64,1>&, const MultiArray<float64,1>& ) throw (ImagePlusError);

    template MultiArray<uint8,2> ma_compare(const MultiArray<uint8,2>&, const MultiArray<uint8,2>&, const int8 op[3], const MultiArray<uint8,2>&, const MultiArray<uint8,2>& ) throw (ImagePlusError);
    template MultiArray<int16,2> ma_compare(const MultiArray<int16,2>&, const MultiArray<int16,2>&, const int8 op[3], const MultiArray<int16,2>&, const MultiArray<int16,2>& ) throw (ImagePlusError);
    template MultiArray<int64,2> ma_compare(const MultiArray<int64,2>&, const MultiArray<int64,2>&, const int8 op[3], const MultiArray<int64,2>&, const MultiArray<int64,2>& ) throw (ImagePlusError);
    template MultiArray<float64,2> ma_compare(const MultiArray<float64,2>&, const MultiArray<float64,2>&, const int8 op[3], const MultiArray<float64,2>&, const MultiArray<float64,2>& ) throw (ImagePlusError);

    template MultiArray<uint8,3> ma_compare(const MultiArray<uint8,3>&, const MultiArray<uint8,3>&, const int8 op[3], const MultiArray<uint8,3>&, const MultiArray<uint8,3>& ) throw (ImagePlusError);
    template MultiArray<int16,3> ma_compare(const MultiArray<int16,3>&, const MultiArray<int16,3>&, const int8 op[3], const MultiArray<int16,3>&, const MultiArray<int16,3>& ) throw (ImagePlusError);
    template MultiArray<int64,3> ma_compare(const MultiArray<int64,3>&, const MultiArray<int64,3>&, const int8 op[3], const MultiArray<int64,3>&, const MultiArray<int64,3>& ) throw (ImagePlusError);
    template MultiArray<float64,3> ma_compare(const MultiArray<float64,3>&, const MultiArray<float64,3>&, const int8 op[3], const MultiArray<float64,3>&, const MultiArray<float64,3>& ) throw (ImagePlusError);


    template MultiArray<uint8,1>   ma_compare(const MultiArray<uint8,1>&,   const MultiArray<uint8,1>&,   const int8 op[3], uint8,   uint8 ) throw (ImagePlusError);
    template MultiArray<int16,1>   ma_compare(const MultiArray<int16,1>&,   const MultiArray<int16,1>&,   const int8 op[3], int16,   int16 ) throw (ImagePlusError);
    template MultiArray<int64,1>   ma_compare(const MultiArray<int64,1>&,   const MultiArray<int64,1>&,   const int8 op[3], int64,   int64 ) throw (ImagePlusError);
    template MultiArray<float64,1> ma_compare(const MultiArray<float64,1>&, const MultiArray<float64,1>&, const int8 op[3], float64, float64 ) throw (ImagePlusError);

    template MultiArray<uint8,2>   ma_compare(const MultiArray<uint8,2>&,   const MultiArray<uint8,2>&,   const int8 op[3], uint8,   uint8 ) throw (ImagePlusError);
    template MultiArray<int16,2>   ma_compare(const MultiArray<int16,2>&,   const MultiArray<int16,2>&,   const int8 op[3], int16,   int16 ) throw (ImagePlusError);
    template MultiArray<int64,2>   ma_compare(const MultiArray<int64,2>&,   const MultiArray<int64,2>&,   const int8 op[3], int64,   int64 ) throw (ImagePlusError);
    template MultiArray<float64,2> ma_compare(const MultiArray<float64,2>&, const MultiArray<float64,2>&, const int8 op[3], float64, float64 ) throw (ImagePlusError);

    template MultiArray<uint8,3>   ma_compare(const MultiArray<uint8,3>&,   const MultiArray<uint8,3>&,   const int8 op[3], uint8,   uint8 ) throw (ImagePlusError);
    template MultiArray<int16,3>   ma_compare(const MultiArray<int16,3>&,   const MultiArray<int16,3>&,   const int8 op[3], int16,   int16 ) throw (ImagePlusError);
    template MultiArray<int64,3>   ma_compare(const MultiArray<int64,3>&,   const MultiArray<int64,3>&,   const int8 op[3], int64,   int64 ) throw (ImagePlusError);
    template MultiArray<float64,3> ma_compare(const MultiArray<float64,3>&, const MultiArray<float64,3>&, const int8 op[3], float64, float64 ) throw (ImagePlusError);





    template MultiArray<uint8,1>   ma_compare(const MultiArray<uint8,1>&,   uint8,   const int8 op[3], uint8,   uint8 ) throw (ImagePlusError);
    template MultiArray<int16,1>   ma_compare(const MultiArray<int16,1>&,   int16,   const int8 op[3], int16,   int16 ) throw (ImagePlusError);
    template MultiArray<int64,1>   ma_compare(const MultiArray<int64,1>&,   int64,   const int8 op[3], int64,   int64 ) throw (ImagePlusError);
    template MultiArray<float64,1> ma_compare(const MultiArray<float64,1>&, float64, const int8 op[3], float64, float64 ) throw (ImagePlusError);

    template MultiArray<uint8,2>   ma_compare(const MultiArray<uint8,2>&,   uint8,   const int8 op[3], uint8,   uint8 ) throw (ImagePlusError);
    template MultiArray<int16,2>   ma_compare(const MultiArray<int16,2>&,   int16,   const int8 op[3], int16,   int16 ) throw (ImagePlusError);
    template MultiArray<int64,2>   ma_compare(const MultiArray<int64,2>&,   int64,   const int8 op[3], int64,   int64 ) throw (ImagePlusError);
    template MultiArray<float64,2> ma_compare(const MultiArray<float64,2>&, float64, const int8 op[3], float64, float64 ) throw (ImagePlusError);

    template MultiArray<uint8,3>   ma_compare(const MultiArray<uint8,3>&,   uint8,   const int8 op[3], uint8,   uint8 ) throw (ImagePlusError);
    template MultiArray<int16,3>   ma_compare(const MultiArray<int16,3>&,   int16,   const int8 op[3], int16,   int16 ) throw (ImagePlusError);
    template MultiArray<int64,3>   ma_compare(const MultiArray<int64,3>&,   int64,   const int8 op[3], int64,   int64 ) throw (ImagePlusError);
    template MultiArray<float64,3> ma_compare(const MultiArray<float64,3>&, float64, const int8 op[3], float64, float64 ) throw (ImagePlusError);




    template void ma_compare(const MultiArray<uint8,1>&, uint8, const int8 op[3], const MultiArray<uint8,1>&, const MultiArray<uint8,1>&, MultiArray<uint8,1>& ) throw (ImagePlusError);
    template void ma_compare(const MultiArray<int16,1>&, int16, const int8 op[3], const MultiArray<int16,1>&, const MultiArray<int16,1>&, MultiArray<int16,1>& ) throw (ImagePlusError);
    template void  ma_compare(const MultiArray<int64,1>&, int64, const int8 op[3], const MultiArray<int64,1>&, const MultiArray<int64,1>&, MultiArray<int64,1>& ) throw (ImagePlusError);
    template void ma_compare(const MultiArray<float64,1>&, float64, const int8 op[3], const MultiArray<float64,1>&, const MultiArray<float64,1>&, MultiArray<float64,1>& ) throw (ImagePlusError);

    template void ma_compare(const MultiArray<uint8,2>&, uint8, const int8 op[3], const MultiArray<uint8,2>&, const MultiArray<uint8,2>&, MultiArray<uint8,2>& ) throw (ImagePlusError);
    template void ma_compare(const MultiArray<int16,2>&, int16, const int8 op[3], const MultiArray<int16,2>&, const MultiArray<int16,2>&, MultiArray<int16,2>& ) throw (ImagePlusError);
    template void ma_compare(const MultiArray<int64,2>&, int64, const int8 op[3], const MultiArray<int64,2>&, const MultiArray<int64,2>&, MultiArray<int64,2>& ) throw (ImagePlusError);
    template void ma_compare(const MultiArray<float64,2>&, float64, const int8 op[3], const MultiArray<float64,2>&, const MultiArray<float64,2>&, MultiArray<float64,2>& ) throw (ImagePlusError);

    template void ma_compare(const MultiArray<uint8,3>&, uint8, const int8 op[3], const MultiArray<uint8,3>&, const MultiArray<uint8,3>&, MultiArray<uint8,3>& ) throw (ImagePlusError);
    template void ma_compare(const MultiArray<int16,3>&, int16, const int8 op[3], const MultiArray<int16,3>&, const MultiArray<int16,3>&, MultiArray<int16,3>& ) throw (ImagePlusError);
    template void ma_compare(const MultiArray<int64,3>&, int64, const int8 op[3], const MultiArray<int64,3>&, const MultiArray<int64,3>&, MultiArray<int64,3>& ) throw (ImagePlusError);
    template void ma_compare(const MultiArray<float64,3>&, float64, const int8 op[3], const MultiArray<float64,3>&, const MultiArray<float64,3>&, MultiArray<float64,3>& ) throw (ImagePlusError);

#endif

}
