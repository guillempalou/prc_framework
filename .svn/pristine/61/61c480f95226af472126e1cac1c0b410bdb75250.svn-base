/*
 * partition_test.cpp
 *
 *  Created on: Aug 2, 2012
 *      Author: guillem
 */

#include <imageplus/core/image_signal.hpp>
#include <imageplus/core/video_signal.hpp>

#include <imageplus/segmentation/partition/partition.hpp>
#include <imageplus/core/regions/hierarchical_region.hpp>

using namespace imageplus;
using namespace imageplus::segmentation;

#define uint64 imageplus::uint64
#define int64 imageplus::int64

int main() {

	typedef ImageSignal<float64,1> ImageType;
	typedef VideoSignal<float64,1> VideoType;

	typedef ImageType::coord_type coord2d;
	typedef VideoType::coord_type coord3d;

	typedef ImageType::value_type rgb_type;

	typedef Region<coord2d> Region2D;
	typedef Region<coord3d> Region3D;

	typedef HierarchicalRegion<coord2d> HRegion2D;
	typedef HierarchicalRegion<coord3d> HRegion3D;

	uint64 N = 10;
	uint64 Nv = 10;
	ImageType image(N,N);
	VideoType video(Nv,Nv,Nv);

	Partition<uint64, 2> p_2d(N,N);
	Partition<uint64, 3> p_3d(Nv,Nv,Nv);

	uint64 A = 0.4*Nv;
	uint64 B = 0.6*Nv;
	for (uint64 i = A; i <= B; i++) {
		for (uint64 k = A; k <= B; k++) {
			if (i==A || i == B || k == A || k == B) image(i,k)(0) = 2;
		}
	}

	//p_2d.set_unique_labels();
	p_2d.set_flatzone_labels<Connectivity2D4>(image);

	/*for (uint64 x = 0; x < N; x++) {
		for (uint64 y = 0; y < N; y++) {
			std::cout << image(x,y).transpose() << " ";
		}
		std::cout << std::endl;
	}
	for (uint64 x = 0; x < N; x++) {
		for (uint64 y = 0; y < N; y++) {
			std::cout << p_2d(x,y).transpose() << " ";
		}
		std::cout << std::endl;
	}*/

	for (uint64 i = A; i <= B; i++) {
		for (uint64 k = A; k <= B; k++) {
			for (uint64 j = A; j <= B; j++) {
				if (i==A || i == B || k == A || k == B || j == A || j == B) video(i,k,j)(0) = 2;
			}
		}
	}

	p_3d.set_flatzone_labels<Connectivity3D6>(video);

	/*for (uint64 t = 0; t < N; t++) {
		for (uint64 x = 0; x < N; x++) {
			for (uint64 y = 0; y < N; y++) {
				std::cout << p_3d(x,y,t).transpose() << " ";
			}
			std::cout << std::endl;
		}
		std::cout << std::endl;
	}*/
}

