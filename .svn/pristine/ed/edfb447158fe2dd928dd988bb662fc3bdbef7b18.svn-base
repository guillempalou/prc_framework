// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file modelpart.test
//!
//! Tests for ModelPart class
//!
#include <imageplus/machine_learning/svm/svm_adaptors.hpp>
#include <imageplus/semantic/modelpart.hpp>


BOOST_AUTO_TEST_SUITE ( Semantic_ModelPart_Suite );

using namespace imageplus;
using namespace imageplus::semantic;
using namespace imageplus::machine_learning::svm;
using namespace std;

BOOST_AUTO_TEST_CASE( modelpart_test )
{
	ModelPart<SVM> model_part;

	// check results when there is no classifier for the provided vd name
	BOOST_CHECK(!model_part.includes_vd_classifier("ColorStructure"));
	BOOST_CHECK_THROW(model_part.get_vd_classifier("ColorStructure"), ImagePlusError);

	// add a classifier model for "ColorStructure" vd
	SVM classifier;
	model_part.add_vd_classifier("ColorStructure", classifier);

	BOOST_REQUIRE(model_part.includes_vd_classifier("ColorStructure"));
	SVM classifier2 = model_part.get_vd_classifier("ColorStructure");

	// TODO improve this test, it should check that both are equal
	//      using an interface for any classifier, not only SVM
	BOOST_CHECK_EQUAL(classifier.parameters().svm_type, classifier2.parameters().svm_type);
}

BOOST_AUTO_TEST_CASE( modelpart_test_cout )
{
	ModelPart<SVM> model_part;
	SVM classifier;
	model_part.add_vd_classifier("ColorStructure", classifier);

	stringstream expected;
	expected << "model part with classifiers for visual descriptors: ColorStructure,";

	stringstream obtained;
	obtained << model_part;

	BOOST_CHECK_EQUAL(obtained.str(), expected.str());
}


BOOST_AUTO_TEST_SUITE_END ();
