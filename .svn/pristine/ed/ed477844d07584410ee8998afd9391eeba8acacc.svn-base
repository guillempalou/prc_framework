// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file camera.hpp
//!
//!  base class to store camera parameters
//!


#ifndef IMAGEPLUS_CAMERA_HPP
#define IMAGEPLUS_CAMERA_HPP

#include <imageplus/core/imageplus_types.hpp>
#include <imageplus/core/multiarray.hpp>
#include <imageplus/core/exceptions.hpp>


namespace imageplus
{

    //!
    //! \brief class to store camera parameters
    //!
    //! This class stores the camera parameters needed for multiview environment operations. This parameters follow the
    //! pinhole camera model , and should be computed previously. The parameters will be read with the method read_parameters from a file.
    //! More information can be found in <A HREF="http://gps-tsc.upc.es/imatge/Main/CHIL/files/WG5_RoomSetup/PFC_OscarGarcia_041008.pdf">Oscar Garcia PFC</A>.
    //! The file format should be as follows:
    //!
    //! \code
    //!  [Image size:]
    //!    768  //width
    //!    576  //height
    //!
    //!  [Rotation matrix:]
    //!    6.8261928423112028e-001   -7.3016345505108493e-001    2.9870415190539658e-002
    //!   -3.9638278635854707e-001   -4.0429296099211443e-001   -8.2427415849998786e-001
    //!    6.1393126608312387e-001    5.5082531768255794e-001   -5.6540239646245016e-001
    //!
    //!  [Translation vector:]
    //!    9.1869486020875968e-001    2.0152284530688755e+002    1.1527779367349397e+002
    //!
    //!  [Calibration matrix:]
    //!    5.5216688954527012e+002    0.0000000000000000e+000    3.8206740749448994e+002
    //!    0.0000000000000000e+000    5.4370406078596704e+002    3.0934563057051582e+002
    //!    0.0000000000000000e+000    0.0000000000000000e+000    1.0000000000000000e+000
    //!
    //!  [Projection matrix:]
    //!    6.1148289412970541e+002   -1.9271968272588148e+002   -1.9952837356239405e+002    4.4551160653919258e+004
    //!   -2.5597975935359386e+001   -4.9420319405879610e+001   -6.2306596803713671e+002    1.4522947110920184e+005
    //!    6.1393126608312387e-001    5.5082531768255794e-001   -5.6540239646245016e-001    1.1527779367349397e+002
    //!
    //!  [Distortion parameters:]
    //!   -3.7158430763281464e-001  //kappa1
    //!    1.5427446086242583e-001  //kappa2
    //!   -9.2183481277601561e-004  //tau1
    //!   -1.5875244995451997e-004  //tau2
    //! \endcode
    //!
    //! \author Marcel Alcoverro <marcel@gps.tsc.upc.edu>
    //!
    //! \date 23-1-2008
    //!
    class Camera
    {
        public:

            //!
            //! \brief Default constructor
            //!
            Camera();

            //!
            //! \brief destructor
            //!
            ~Camera();

            //!
            //! \brief Read camera parameters from a file
            //!
            //! \param[in] filename : Name of the file where parameters are stored in the format previously described
            //!
            void read_parameters(const std::string& filename) throw (ImagePlusError);


            //!
            //! \brief Write camera parameters to a file
            //!
            //! \param[in] filename : Name of the file where parameters will be stored in the format previously described
            //!
            //! \exception ImagePlusFileNotFound : Exception is thrown when output file is not found
            //!
            //! \author Carolina Mart√≠nez <alcarol@gps.tsc.upc.edu>
            //! \author Ramon Morros < ramon.morros@upc.edu>
            //!
            //! \date 31-3-2009
            //!
            void write_parameters(const std::string& filename) throw (ImagePlusFileNotFound);

            //!
            //! \brief Rotation matrix R
            //!
            //! \return Reference to the multiarray that stores the matrix.
            //!
            const MultiArray<float64,2>& rot() const;

            //!
            //! \brief Translation vector
            //!
            //!
            //! \return Reference to the multiarray that stores the vector.
            //!
            const MultiArray<float64,1>& trans() const;

            //!
            //! \brief Calibration matrix K (intrinsic parameters)
            //!
            //!
            //! \return Reference to the multiarray that stores the matrix.
            const MultiArray<float64,2>& k() const;

            //!
            //! \brief Projection matrix P=K*[Rot|trans]
            //!
            //!
            //! \return Reference to the multiarray that stores the matrix.
            const MultiArray<float64,2>& p() const;

            //!
            //! \brief Distortion parameters radial (k1,k2) and decentering (p1,p2)
            //!
            //!
            //! \return Reference to the multiarray that stores the parameters as a vector (k1,k2,p1,p2).
            const MultiArray<float64,1>& distortion() const;

            //!
            //! \brief Camera image width
            //!
            //!
            //! \return image width.
            const uint32  im_width() const;

            //!
            //! \brief Camera image height
            //!
            //!
            //! \return image height.
            const uint32  im_height() const;

            //!
            //! \brief Rotation matrix R
            //!
            //!
            //! \return Reference to the multiarray that stores the matrix.
            //!
            MultiArray<float64,2>& rot();

            //!
            //! \brief Translation vector
            //!
            //!
            //! \return Reference to the multiarray that stores the vector.
            //!
            MultiArray<float64,1>& trans();

            //!
            //! \brief Calibration matrix K (intrinsic parameters)
            //!
            //!
            //! \return Reference to the multiarray that stores the matrix.
            MultiArray<float64,2>& k();

            //!
            //! \brief Projection matrix P=K*[Rot|trans]
            //!
            //!
            //! \return Reference to the multiarray that stores the matrix.
            MultiArray<float64,2>& p();

            //!
            //! \brief Distortion parameters radial (k1,k2) and decentering (p1,p2)
            //!
            //!
            //! \return Reference to the multiarray that stores the parameters as a vector (k1,k2,p1,p2).
            MultiArray<float64,1>& distortion();

            //!
            //! \brief Camera image width
            //!
            //!
            //! \return image width.
            int64& im_width();

            //!
            //! \brief Camera image height
            //!
            //!
            //! \return image height.
            int64& im_height();

        protected:

            //! Image width in pixels
            int64 _width;
            //! Image height in pixels
            int64 _height;
            //! Rotation matrix
            MultiArray<float64,2> _rot;
            //! Translation vector
            MultiArray<float64,1> _trans;
            //! Calibration matrix (intrinsic parameters)
            MultiArray<float64,2> _k;
            //! Projection matrix: P=K*[Rot|trans]
            MultiArray<float64,2> _p;
            //! Distortion parameters: radial (k1,k2) and decentering (p1,p2)
            MultiArray<float64,1> _distortion;
    };
}

#endif
