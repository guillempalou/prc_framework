// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file foreground2d.test
//!
//!  Tests for foreground2d functions
//!

#include <iostream>
#include <stdio.h>
#include <imageplus/core.hpp>
#include <imageplus/io/readimage.hpp>
#include <imageplus/foreground2d/pixel_model.hpp>
#include <imageplus/foreground2d/onegaussian_pm.hpp>
#include <imageplus/foreground2d/onegaussian_ss.hpp>
#include <imageplus/foreground2d/foreground2d.hpp>
#include <imageplus/foreground2d/frame_model.hpp>
#include <cmath>
#include <iostream>
#include <fstream>


BOOST_AUTO_TEST_SUITE ( suite_foreground2d );

using namespace imageplus;
using namespace imageplus::foreground2d;
using namespace std;
    
BOOST_AUTO_TEST_CASE ( test_segmentation_one_gaussian_pm )
{    
    
    float64 initial_variance = 20;
    float64 ro = 0.01;
    float64 std_dev_factor_2 = 2.5;

    int32 initial_frame = 0;
    int32 current_frame = 0;
    
    int32 frames2process = 7;
    int32 training_frames = 2;
    int8 framenumber[10];
    
    sprintf(framenumber,"%06d",current_frame);
    
    string inputdir = string(TEST_DATA_PATH_R) + "/Foreground2D/seq";
    string resultdir = string(TEST_DATA_PATH_R) + "/Foreground2D/mask";

    string ifiletype = "jpg";
    string ofiletype = "png";
    
    //init io objects
    io::ReadImage readImage;
    ImageRGB<uint8> currentImage;
    readImage.open(inputdir + string(framenumber) + "." + ifiletype );
    
    readImage >> currentImage ;
    
    size_t im_x= currentImage.size_x();
    size_t im_y= currentImage.size_y();
    ImageGray<uint8> resultImage(im_x,im_y);
    
    ImageGray<uint8> maskRead(im_x,im_y);


    FrameModel<OneGaussianPM> fmodelPM(im_x,im_y);

    fmodelPM.set_pixel_models(OneGaussianPM(initial_variance, ro, std_dev_factor_2));


    //init method object
    Foreground2D foreground2d(training_frames,current_frame, im_x,im_y);

    int32 numframes = initial_frame + frames2process;
    
    while(current_frame < numframes)
    {
        readImage.open(inputdir + string(framenumber) + "." + ifiletype );
        readImage >> currentImage ;
    
        //Segment cuurentImage and store result in 'resultImage'
            foreground2d.segmentation<OneGaussianPM,3>(fmodelPM,currentImage, resultImage);            

        readImage.open(resultdir + string(framenumber) + "." + ofiletype );
        readImage >> maskRead ;

        // Check image 'resultImage' currently segmented is equal to the mask for checking stored in disk 'maskRead'
        BOOST_CHECK(maskRead == resultImage);
        
        current_frame ++;
        sprintf(framenumber,"%06d",current_frame);
        
    }

    
}

BOOST_AUTO_TEST_CASE ( test_segmentation_one_gaussian_ss )
{
	
    float64 initial_variance = 20;
    float64 ro = 0.01;
    float64 std_dev_factor_2 = 2.5;
    float64 bd_low = 0.7;
    float64 bd_high = 1.2;
    float64 cd = 40;

    int32 initial_frame = 0;
    int32 current_frame = 0;
    
    int32 frames2process = 7;
    int32 training_frames = 2;
    int8 framenumber[10];
    
    sprintf(framenumber,"%06d",current_frame);
    
    string inputdir = string(TEST_DATA_PATH_R) + "/Foreground2D/seq";
    string resultdir = string(TEST_DATA_PATH_R) + "/Foreground2D/mask";

    string ifiletype = "jpg";
    string ofiletype = "png";
    
    //init io objects
    io::ReadImage readImage;
    ImageRGB<uint8> currentImage;
    readImage.open(inputdir + string(framenumber) + "." + ifiletype );
    
    readImage >> currentImage ;
    
    size_t im_x= currentImage.size_x();
    size_t im_y= currentImage.size_y();
    ImageGray<uint8> resultImage(im_x,im_y);
    
    ImageGray<uint8> maskRead(im_x,im_y);


    FrameModel<OneGaussianSS> fmodelSS(im_x,im_y);

    fmodelSS.set_pixel_models(OneGaussianSS(initial_variance, ro, std_dev_factor_2, bd_low, bd_high, cd));


    //init method object
    Foreground2D foreground2d(training_frames,current_frame, im_x,im_y);

    int32 numframes = initial_frame + frames2process;
    
    while(current_frame < numframes)
    {
    	
        readImage.open(inputdir + string(framenumber) + "." + ifiletype );
        readImage >> currentImage ;
    
        //Segment cuurentImage and store result in 'resultImage'
        foreground2d.segmentation_ss<OneGaussianSS,3>(fmodelSS,currentImage, resultImage);

        readImage.open(resultdir + string(framenumber) + "." + ofiletype );
        readImage >> maskRead ;

        // Check image 'resultImage' currently segmented is equal to the mask for checking stored in disk 'maskRead'
        BOOST_CHECK(maskRead == resultImage);
        
        current_frame ++;
        sprintf(framenumber,"%06d",current_frame);
        
    }
    
}



BOOST_AUTO_TEST_SUITE_END ();
