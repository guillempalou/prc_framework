// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file bbox.test
//!
//!  Tests for the BBox class
//!

#include <imageplus/core/bbox.hpp>
#include <imageplus/core/coord.hpp>
#include <imageplus/core/coord2d.hpp>
#include <imageplus/core/coord3d.hpp>


BOOST_AUTO_TEST_SUITE ( suite_bbox );

using namespace imageplus;

BOOST_AUTO_TEST_CASE ( test_BBox )
{

    Coord<int64,1> p1d(3);
    uint64 w1 = 5;

    // Contructor for 1 dimensions
    BBox<int64,1> bb_1d(p1d, w1);
    BOOST_CHECK(bb_1d.dimension() == 1);
    BOOST_CHECK(bb_1d.origin() == p1d);
    BOOST_CHECK(bb_1d.side(0) == w1);

    BBox<int64,1> bb_copy_1d(bb_1d);
    BOOST_CHECK(bb_copy_1d.dimension() == 1);
    BOOST_CHECK(bb_copy_1d.origin() == bb_1d.origin());
    BOOST_CHECK(bb_copy_1d.side(0) == w1);

    Coord<int64,1> center(5);
    Coord<int64,1> opposite(7);

    // center
    BOOST_CHECK(bb_1d.center() == center);
    
    // oposite
    BOOST_CHECK(bb_1d.opposite() == opposite);



    Coord2D<>  tl_2d(-1, -2);
    Coord3D<>  tl_3d(-1, -2, -1);
    uint64 width = 3, height = 5, depth = 3; 

    Coord2D<>  op_2d(1, 2);
    Coord3D<>  op_3d(1, 2, 1);

    // Default constructor
//    BBox<int64,0> bb;
//    BOOST_CHECK(bb.dimension() == 0);

    // Contructor for 2 dimensions
    BBox<int64,2> bb_2d(tl_2d, width, height);
    BOOST_CHECK(bb_2d.dimension() == 2);
    BOOST_CHECK(bb_2d.origin() == tl_2d);
    BOOST_CHECK(bb_2d.side(0) == width);
    BOOST_CHECK(bb_2d.side(1) == height);

    // Contructor for 3 dimensions
    BBox<int64,3> bb_3d(tl_3d, width, height, depth);
    BOOST_CHECK(bb_3d.dimension() == 3);
    BOOST_CHECK(bb_3d.origin() == tl_3d);
    BOOST_CHECK(bb_3d.side(0) == width);
    BOOST_CHECK(bb_3d.side(1) == height);
    BOOST_CHECK(bb_3d.side(2) == depth);
    
    // Contructor for n dimensions
    BBox<int64,3> bb_other_3d(tl_3d, op_3d);
    BOOST_CHECK(bb_other_3d.dimension() == 3);
    BOOST_CHECK(bb_other_3d.origin() == tl_3d);
    BOOST_CHECK(bb_other_3d.side(0) == width);
    BOOST_CHECK(bb_other_3d.side(1) == height);
    BOOST_CHECK(bb_other_3d.side(2) == depth);

    // Copy constructor
    BBox<int64,2> bb_copy_2d(bb_2d);
    BOOST_CHECK(bb_copy_2d.dimension() == 2);
    BOOST_CHECK(bb_copy_2d.origin() == bb_2d.origin());
    BOOST_CHECK(bb_copy_2d.side(0) == width);
    BOOST_CHECK(bb_copy_2d.side(1) == height);

    // operator =
    BBox<int64,3> bb_copy_3d = bb_other_3d; 
    BOOST_CHECK(bb_copy_3d.dimension() == 3);
    BOOST_CHECK(bb_copy_3d.origin() == tl_3d);
    BOOST_CHECK(bb_copy_3d.side(0) == width);
    BOOST_CHECK(bb_copy_3d.side(1) == height);
    BOOST_CHECK(bb_copy_3d.side(2) == depth);
    
    // origin
    bb_copy_2d.origin() = bb_2d.origin();
    BOOST_CHECK(bb_copy_2d.dimension() == 2);
    BOOST_CHECK(bb_copy_2d.origin() == tl_2d);
    
    // sides
    bb_copy_2d.side(0) = bb_2d.side(1);
    bb_copy_2d.side(1) = bb_2d.side(0);
    BOOST_CHECK(bb_copy_2d.dimension() == 2);
    BOOST_CHECK(bb_copy_2d.origin() == tl_2d);
    BOOST_CHECK(bb_copy_2d.side(0) == height);
    BOOST_CHECK(bb_copy_2d.side(1) == width);

    // center
    BOOST_CHECK(bb_2d.center() == Coord2D<> (0,0));
    BOOST_CHECK(bb_3d.center() == Coord3D<> (0,0,0));
    
    // oposite
    BOOST_CHECK(bb_2d.opposite() == op_2d);
    BOOST_CHECK(bb_3d.opposite() == op_3d);
    
    // contains
    BOOST_CHECK(   bb_2d.contains(Coord2D<> ( 0, 0 )));
    BOOST_CHECK(   bb_2d.contains(Coord2D<> (-1, 2 )));
    BOOST_CHECK(   bb_2d.contains(Coord2D<> ( 1,-2 )));
    
    BOOST_CHECK( ! bb_2d.contains(Coord2D<> ( 1, 3 )));
    BOOST_CHECK( ! bb_2d.contains(Coord2D<> (-3, 1 )));
    BOOST_CHECK( ! bb_2d.contains(Coord2D<> (-3, 3 )));
    
    BOOST_CHECK(   bb_3d.contains(Coord3D<> ( 0, 0, 0 )));
    BOOST_CHECK(   bb_3d.contains(Coord3D<> (-1, 2, 1 )));
    BOOST_CHECK(   bb_3d.contains(Coord3D<> ( 1,-2,-1 )));
    
    BOOST_CHECK( ! bb_3d.contains(Coord3D<> ( 1, 3,-1 )));
    BOOST_CHECK( ! bb_3d.contains(Coord3D<> (-3, 1, 3 )));
    BOOST_CHECK( ! bb_3d.contains(Coord3D<> (-3, 3,-3 )));
}

BOOST_AUTO_TEST_SUITE_END ();
