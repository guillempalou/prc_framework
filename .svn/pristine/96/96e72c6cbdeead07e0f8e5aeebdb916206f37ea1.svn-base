// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//
//  This file is used as a context check for the build system.
//  It is compiled, linked and executed to check if local environment is 
//  ready for building the software.
//
//  Author: Albert Gil, UPC <agil@gps.tsc.upc.edu>
//
//  Date: 28-5-2009
//

#ifdef MSVC
 #include<windows.h>
//#include<windef.h>
//#include<wingdi.h>
#endif
#include <GL/glu.h>   // Header File For The GLU Library
#include <GL/glut.h>  // Header File For The GLUT Library
#include <GL/gl.h>    // Header File For The OpenGL Library
#include <string>
#include <cstring>
#include <cstdlib>
#include <iostream>
//#include <stdio>


int is_extension_supported(const char *extension)
{
	const GLubyte *extensions = NULL;
	const GLubyte *start;
	GLubyte *where, *terminator;
	/* Extension names should not have spaces. */
	where = (GLubyte *) strchr(extension, ' ');
	if (where || *extension == '\0')
			return 0;
	extensions = glGetString(GL_EXTENSIONS);
        /*
         * It takes a bit of care to be fool-proof about parsing the
         * OpenGL extensions string. Don't be fooled by sub-strings,
         * etc.
         */
	start = extensions;
	for (;;) 
	{
		where = (GLubyte *) strstr((const char *) start, extension);
		if (!where)
			break;
		terminator = where + strlen(extension);
		if (where == start || *(where - 1) == ' ')
			if (*terminator == ' ' || *terminator == '\0')
				return 1;
		start = terminator;
	}
	return 0;
}

//NVIDIA Corporation Advanced OpenGL Development 6
void print_extensions()
{
	
	//const GLubyte *extensions = NULL;
	//extensions = glGetString(GL_EXTENSIONS);
	std::string ext((const char*)glGetString(GL_EXTENSIONS));
	std::cout << ext;
}

int main(int argc, char* argv[])
{


    /*
     * This Context check has been removed to avoid problems with 64bits platform.
     * OpenGL applications can not be checked without a window, and scons can't handle windows
     */

#if 0
    // basic opengl check:
    glVertex3f(300.0f,  100.0f,  50.0f);
    
    // glu check
    GLenum error = glGetError();
    gluErrorString(error);
    
    // check glut
    //glutInit(&argc, argv); // commented, because scons can not render a windows in context checks....
#endif
    
    return 0;
}
