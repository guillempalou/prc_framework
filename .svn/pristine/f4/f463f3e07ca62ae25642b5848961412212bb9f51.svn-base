// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file color_layout.test
 */ 

#include <imageplus/descriptors/color/color_layout.hpp> 

BOOST_AUTO_TEST_SUITE ( Descriptors_Color_Layout_Suite );

using namespace imageplus;
using namespace descriptors;

#ifdef USE_FFTW3

BOOST_AUTO_TEST_CASE( ColorLayout_test)
{    
    ImagePartition<> my_im_part(16,16);
    my_im_part = 1;
    my_im_part[4][3] = 2;
    
    ImageRGB<uint8> my_image(16,16);
    my_image(0)[0][0] = 0;
    my_image(1)[0][0] = 0;
    my_image(2)[0][0] = 0;
    
    my_image(0)[1][0] = 15;
    my_image(1)[1][0] = 20;
    my_image(2)[1][0] = 15;
    
    my_image(0)[2][0] = 255;
    my_image(1)[2][0] = 0;
    my_image(2)[2][0] = 120;
    
    my_image(0)[3][0] = 255;
    my_image(1)[3][0] = 255;
    my_image(2)[3][0] = 255;
    
    my_image(0)[4][0] = 10;
    my_image(1)[4][0] = 10;
    my_image(2)[4][0] = 10;
    
    my_image(0)[0][1] = 20;
    my_image(1)[0][1] = 20;
    my_image(2)[0][1] = 20;
    
    my_image(0)[1][1] = 100;
    my_image(1)[1][1] = 50;
    my_image(2)[1][1] = 200;
    
    my_image(0)[2][1] = 50;
    my_image(1)[2][1] = 100;
    my_image(2)[2][1] = 50;
    
    my_image(0)[3][1] = 10;
    my_image(1)[3][1] = 10;
    my_image(2)[3][1] = 10;
    
    my_image(0)[4][1] = 20;
    my_image(1)[4][1] = 20;
    my_image(2)[4][1] = 20;
    
    my_image(0)[0][2] = 200;
    my_image(1)[0][2] = 200;
    my_image(2)[0][2] = 200;
    
    my_image(0)[1][2] = 0;
    my_image(1)[1][2] = 20;
    my_image(2)[1][2] = 40;
    
    my_image(0)[2][2] = 30;
    my_image(1)[2][2] = 30;
    my_image(2)[2][2] = 30;
    
    my_image(0)[3][2] = 100;
    my_image(1)[3][2] = 50;
    my_image(2)[3][2] = 50;
    
    my_image(0)[4][2] = 200;
    my_image(1)[4][2] = 200;
    my_image(2)[4][2] = 200;
    
    my_image(0)[0][3] = 150;
    my_image(1)[0][3] = 150;
    my_image(2)[0][3] = 150;
    
    my_image(0)[1][3] = 250;
    my_image(1)[1][3] = 250;
    my_image(2)[1][3] = 250;
    
    my_image(0)[2][3] = 5;
    my_image(1)[2][3] = 5;
    my_image(2)[2][3] = 5;
    
    my_image(0)[3][3] = 180;
    my_image(1)[3][3] = 180;
    my_image(2)[3][3] = 180;
    
    my_image(0)[4][3] = 50;
    my_image(1)[4][3] = 50;
    my_image(2)[4][3] = 50;
    
    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    
    partition_type my_part(my_im_part);
    merge_regions(1,2,3,my_part);
    
    ColorLayout<ImageRGB<uint8> > desc;
    desc = calc_descriptor(new ColorLayout<ImageRGB<uint8> >(),  my_image, my_part[3]);
    
    std::vector<uint8> y_coeff;
    y_coeff.resize(6);
    
    y_coeff[0]=2;
    y_coeff[1]=19;
    y_coeff[2]=20;
    y_coeff[3]=18;
    y_coeff[4]=20;
    y_coeff[5]=18;
    

    
    BOOST_CHECK_EQUAL( desc.y_coeff()[0], y_coeff[0]);
    BOOST_CHECK_EQUAL( desc.y_coeff()[1], y_coeff[1]);
    BOOST_CHECK_EQUAL( desc.y_coeff()[2], y_coeff[2]);
    BOOST_CHECK_EQUAL( desc.y_coeff()[3], y_coeff[3]);
    BOOST_CHECK_EQUAL( desc.y_coeff()[4], y_coeff[4]);
    BOOST_CHECK_EQUAL( desc.y_coeff()[5], y_coeff[5]);
    
    std::vector<uint8> cb_coeff;
    cb_coeff.resize(3);
    
    cb_coeff[0]=32;
    cb_coeff[1]=16;
    cb_coeff[2]=16;
    
    BOOST_CHECK_EQUAL( desc.cb_coeff()[0], cb_coeff[0]);
    BOOST_CHECK_EQUAL( desc.cb_coeff()[1], cb_coeff[1]);
    BOOST_CHECK_EQUAL( desc.cb_coeff()[2], cb_coeff[2]);
    
    std::vector<uint8> cr_coeff;
    cr_coeff.resize(3);
    
    cr_coeff[0]=32;
    cr_coeff[1]=16;
    cr_coeff[2]=17;
    
    BOOST_CHECK_EQUAL( desc.cr_coeff()[0], cr_coeff[0]);
    BOOST_CHECK_EQUAL( desc.cr_coeff()[1], cr_coeff[1]);
    BOOST_CHECK_EQUAL( desc.cr_coeff()[2], cr_coeff[2]);

}

#endif

BOOST_AUTO_TEST_SUITE_END ();


