// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file convert_types.cpp
//!
//! \author Javier Ruiz Hidalgo <j.ruiz@upc.edu>
//! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
//!

#include <iostream>
#include <typeinfo>

#include <imageplus/core/exceptions.hpp>
#include <imageplus/core/multiarray_arithmetic.hpp>
#include <imageplus/core/imavol_arithmetic.hpp>
#include <imageplus/core/clipping.hpp>
#include <imageplus/core/convert_types.hpp>

using namespace imageplus;

namespace imageplus
{

    template<typename T1,typename T2, std::size_t N, std::size_t D>
    ImaVol<T1,N,D> convert( const ImaVol<T2,N,D>& in)
    {
        ImaVol<T1,N,D> out(in.dims());

        for (std::size_t i = 0; i < N; i++)
        {
            // Define iterators to channel data
            const T2* it1;
            T1* it2;

            it1 = in(i).data();
            it2 = out(i).data();

            // Copy data.
            while (it1 != in(i).data()+in(i).num_elements())
            {
                *it2++ = static_cast<T1>(*it1++);
            }
        }

        return out;
    }


    ImageGray<uint8> convert( const ImageMask& in, uint8 val)
    {
        ImageGray<uint8> out(in.dims());

        // Define iterators to channel data
        const bool* it1;
        uint8* it2;

        it1 = in(0).data();
        it2 = out(0).data();

        // Copy data.
        while (it1 != in(0).data()+in(0).num_elements())
        {
            *it2++ = (*it1++ == true) ? val : static_cast<uint8>(0);
        }

        return out;
    }


    ImageMask convert( const ImageGray<uint8>& in)
    {
        ImageMask out(in.dims());

        // Define iterators to channel data
        const uint8* it1;
        bool* it2;

        it1 = in(0).data();
        it2 = out(0).data();

        // Copy data.
        while (it1 != in(0).data()+in(0).num_elements())
        {
            *it2++ = (*it1++ != 0) ? true : false;
        }

        return out;
    }


    template<typename T1,typename T2, std::size_t D>
    MultiArray<T1,D> convert( const MultiArray<T2,D>& in )
    {
        MultiArray<T1,D> out(in.dims());

        // Define iterators to channel data
        const T2* it1;
        T1*       it2;

        it1 = in.data();
        it2 = out.data();

        // Copy data.
        uint64 nelem = in.num_elements();
        while (it1 != in.data()+nelem)
        {
            *it2++ = static_cast<T1>(*it1++);
        }

        return out;
    }


    template<std::size_t D>
    MultiArray<uint8,D> convert( const MultiArray<bool,D>& in )
    {
        MultiArray<uint8,D> out(in.dims());

        // Define iterators to channel data
        const bool* it1;
        uint8*       it2;

        it1 = in.data();
        it2 = out.data();

        // Copy data.
        uint64 nelem = in.num_elements();
        while (it1 != in.data()+nelem)
        {
            *it2++ = (*it1++ == true) ? static_cast<uint8>(1) : static_cast<uint8>(0);
        }

        return out;
    }


    template<std::size_t D>
    MultiArray<bool,D> convert( const MultiArray<uint8,D>& in )
    {
        MultiArray<bool,D> out(in.dims());

        // Define iterators to channel data
        const uint8* it1;
        bool*       it2;

        it1 = in.data();
        it2 = out.data();

        // Copy data.
        uint64 nelem = in.num_elements();
        while (it1 != in.data()+nelem)
        {
            *it2++ = (*it1++ != 0) ? true : false;
        }

        return out;
    }




    // To uint8 images
    template ImaVol<uint8,1,2> convert<uint8>( const ImaVol<uint8,1,2>& in);
    template ImaVol<uint8,3,2> convert<uint8>( const ImaVol<uint8,3,2>& in);

    template ImaVol<uint8,1,2> convert<uint8>( const ImaVol<int64,1,2>& in);
    template ImaVol<uint8,3,2> convert<uint8>( const ImaVol<int64,3,2>& in);

    template ImaVol<uint8,1,2> convert<uint8>( const ImaVol<int16,1,2>& in);
    template ImaVol<uint8,3,2> convert<uint8>( const ImaVol<int16,3,2>& in);

    template ImaVol<uint8,1,2> convert<uint8>( const ImaVol<uint16,1,2>& in);
    template ImaVol<uint8,3,2> convert<uint8>( const ImaVol<uint16,3,2>& in);
    
    template ImaVol<uint8,1,2> convert<uint8>( const ImaVol<float64,1,2>& in);
    template ImaVol<uint8,3,2> convert<uint8>( const ImaVol<float64,3,2>& in);

    template ImaVol<uint8,1,2> convert<uint8>( const ImaVol<uint32,1,2>& in);
    template ImaVol<uint8,3,2> convert<uint8>( const ImaVol<uint32,3,2>& in);



    // To uint16 images
    template ImaVol<uint16,1,2> convert<uint16>( const ImaVol<uint8,1,2>& in);
    template ImaVol<uint16,3,2> convert<uint16>( const ImaVol<uint8,3,2>& in);

    template ImaVol<uint16,1,2> convert<uint16>( const ImaVol<int64,1,2>& in);
    template ImaVol<uint16,3,2> convert<uint16>( const ImaVol<int64,3,2>& in);

    template ImaVol<uint16,1,2> convert<uint16>( const ImaVol<int16,1,2>& in);
    template ImaVol<uint16,3,2> convert<uint16>( const ImaVol<int16,3,2>& in);

    template ImaVol<uint16,1,2> convert<uint16>( const ImaVol<float64,1,2>& in);
    template ImaVol<uint16,3,2> convert<uint16>( const ImaVol<float64,3,2>& in);



    // To uint32 images
    template ImaVol<uint32,1,2> convert<uint32>( const ImaVol<uint8,1,2>& in);
    template ImaVol<uint32,3,2> convert<uint32>( const ImaVol<uint8,3,2>& in);

    template ImaVol<uint32,1,2> convert<uint32>( const ImaVol<int64,1,2>& in);
    template ImaVol<uint32,3,2> convert<uint32>( const ImaVol<int64,3,2>& in);

    template ImaVol<uint32,1,2> convert<uint32>( const ImaVol<int16,1,2>& in);
    template ImaVol<uint32,3,2> convert<uint32>( const ImaVol<int16,3,2>& in);

    template ImaVol<uint32,1,2> convert<uint32>( const ImaVol<float64,1,2>& in);
    template ImaVol<uint32,3,2> convert<uint32>( const ImaVol<float64,3,2>& in);



    // To uint8 volumes
    template ImaVol<uint8,1,3> convert<uint8>(const ImaVol<uint8,1,3>& in);
    template ImaVol<uint8,3,3> convert<uint8>(const ImaVol<uint8,3,3>& in);

    template ImaVol<uint8,1,3> convert<uint8>( const ImaVol<int64,1,3>& in);
    template ImaVol<uint8,3,3> convert<uint8>( const ImaVol<int64,3,3>& in);

    template ImaVol<uint8,1,3> convert<uint8>( const ImaVol<float64,1,3>& in);
    template ImaVol<uint8,3,3> convert<uint8>( const ImaVol<float64,3,3>& in);


    // To int16 images
    template ImaVol<int16,1,2> convert<int16>( const ImaVol<uint8,1,2>& in);
    template ImaVol<int16,3,2> convert<int16>( const ImaVol<uint8,3,2>& in);

    template ImaVol<int16,1,2> convert<int16>( const ImaVol<int64,1,2>& in);
    template ImaVol<int16,3,2> convert<int16>( const ImaVol<int64,3,2>& in);

    template ImaVol<int16,1,2> convert<int16>( const ImaVol<float64,1,2>& in);
    template ImaVol<int16,3,2> convert<int16>( const ImaVol<float64,3,2>& in);


    // To int64 images
    template ImaVol<int64,1,2> convert<int64>( const ImaVol<uint8,1,2>& in);
    template ImaVol<int64,3,2> convert<int64>( const ImaVol<uint8,3,2>& in);

    template ImaVol<int64,1,2> convert<int64>( const ImaVol<int64,1,2>& in);
    template ImaVol<int64,3,2> convert<int64>( const ImaVol<int64,3,2>& in);

    template ImaVol<int64,1,2> convert<int64>( const ImaVol<float64,1,2>& in);
    template ImaVol<int64,3,2> convert<int64>( const ImaVol<float64,3,2>& in);


    // To int64 volumes
    template ImaVol<int64,1,3> convert<int64>( const ImaVol<uint8,1,3>& in);
    template ImaVol<int64,3,3> convert<int64>( const ImaVol<uint8,3,3>& in);

    template ImaVol<int64,1,3> convert<int64>( const ImaVol<int64,1,3>& in);
    template ImaVol<int64,3,3> convert<int64>( const ImaVol<int64,3,3>& in);

    template ImaVol<int64,1,3> convert<int64>( const ImaVol<float64,1,3>& in);
    template ImaVol<int64,3,3> convert<int64>( const ImaVol<float64,3,3>& in);



    // To float64 images
    template ImaVol<float64,1,2> convert<float64>( const ImaVol<uint8,1,2>& in);
    template ImaVol<float64,3,2> convert<float64>( const ImaVol<uint8,3,2>& in);

    template ImaVol<float64,1,2> convert<float64>( const ImaVol<uint16,1,2>& in);
    template ImaVol<float64,3,2> convert<float64>( const ImaVol<uint16,3,2>& in);

    template ImaVol<float64,1,2> convert<float64>( const ImaVol<int64,1,2>& in);
    template ImaVol<float64,3,2> convert<float64>( const ImaVol<int64,3,2>& in);

    template ImaVol<float64,1,2> convert<float64>( const ImaVol<float64,1,2>& in);
    template ImaVol<float64,3,2> convert<float64>( const ImaVol<float64,3,2>& in);

    // To float64 volumes
    template ImaVol<float64,1,3> convert<float64>( const ImaVol<uint8,1,3>& in);
    template ImaVol<float64,3,3> convert<float64>( const ImaVol<uint8,3,3>& in);

    template ImaVol<float64,1,3> convert<float64>( const ImaVol<int64,1,3>& in);
    template ImaVol<float64,3,3> convert<float64>( const ImaVol<int64,3,3>& in);

    template ImaVol<float64,1,3> convert<float64>( const ImaVol<float64,1,3>& in);
    template ImaVol<float64,3,3> convert<float64>( const ImaVol<float64,3,3>& in);


    // MultiArray convert instantiations
    // =================================

    // To uint8 vectors
    template MultiArray<uint8,1> convert<uint8>( const MultiArray<uint8,1>& in);
    template MultiArray<uint8,1> convert<uint8>( const MultiArray<int64,1>& in);
    template MultiArray<uint8,1> convert<uint8>( const MultiArray<float64,1>& in);

    // To uint8 matrices
    template MultiArray<uint8,2> convert<uint8>( const MultiArray<uint8,2>& in);
    template MultiArray<uint8,2> convert<uint8>( const MultiArray<int16,2>& in);
    template MultiArray<uint8,2> convert<uint8>( const MultiArray<uint16,2>& in);
    template MultiArray<uint8,2> convert<uint8>( const MultiArray<uint32,2>& in);
    template MultiArray<uint8,2> convert<uint8>( const MultiArray<int64,2>& in);
    template MultiArray<uint8,2> convert<uint8>( const MultiArray<float32,2>& in);
    template MultiArray<uint8,2> convert<uint8>( const MultiArray<float64,2>& in);

    // To uint8 volumes
    template MultiArray<uint8,3> convert<uint8>(const MultiArray<uint8,3>& in);
    template MultiArray<uint8,3> convert<uint8>( const MultiArray<int64,3>& in);
    template MultiArray<uint8,3> convert<uint8>( const MultiArray<float64,3>& in);


    // To uint16 vectors
    template MultiArray<uint16,1> convert<uint16>( const MultiArray<uint8,1>& in);
    template MultiArray<uint16,1> convert<uint16>( const MultiArray<int64,1>& in);
    template MultiArray<uint16,1> convert<uint16>( const MultiArray<float64,1>& in);

    // To uint16 matrices
    template MultiArray<uint16,2> convert<uint16>( const MultiArray<uint8,2>& in);
    template MultiArray<uint16,2> convert<uint16>( const MultiArray<uint32,2>& in);
    template MultiArray<uint16,2> convert<uint16>( const MultiArray<int64,2>& in);
    template MultiArray<uint16,2> convert<uint16>( const MultiArray<float64,2>& in);

    // To uint16 volumes
    template MultiArray<uint16,3> convert<uint16>(const MultiArray<uint8,3>& in);
    template MultiArray<uint16,3> convert<uint16>( const MultiArray<int64,3>& in);
    template MultiArray<uint16,3> convert<uint16>( const MultiArray<float64,3>& in);


    // To uint32 vectors
    template MultiArray<uint32,1> convert<uint32>( const MultiArray<uint8,1>& in);
    template MultiArray<uint32,1> convert<uint32>( const MultiArray<int64,1>& in);
    template MultiArray<uint32,1> convert<uint32>( const MultiArray<float64,1>& in);

    // To uint32 matrices
    template MultiArray<uint32,2> convert<uint32>( const MultiArray<uint8,2>& in);
    template MultiArray<uint32,2> convert<uint32>( const MultiArray<int64,2>& in);
    template MultiArray<uint32,2> convert<uint32>( const MultiArray<float64,2>& in);

    // To uint32 volumes
    template MultiArray<uint32,3> convert<uint32>(const MultiArray<uint8,3>& in);
    template MultiArray<uint32,3> convert<uint32>( const MultiArray<int64,3>& in);
    template MultiArray<uint32,3> convert<uint32>( const MultiArray<float64,3>& in);



    // To int64 vectors
    template MultiArray<int64,1> convert<int64>( const MultiArray<uint8,1>& in);
    template MultiArray<int64,1> convert<int64>( const MultiArray<int64,1>& in);
    template MultiArray<int64,1> convert<int64>( const MultiArray<float64,1>& in);

    // To int64 matrices
    template MultiArray<int64,2> convert<int64>( const MultiArray<uint8,2>& in);
    template MultiArray<int64,2> convert<int64>( const MultiArray<int64,2>& in);
    template MultiArray<int64,2> convert<int64>( const MultiArray<float64,2>& in);

    // To int64 volumes
    template MultiArray<int64,3> convert<int64>( const MultiArray<uint8,3>& in);
    template MultiArray<int64,3> convert<int64>( const MultiArray<int64,3>& in);
    template MultiArray<int64,3> convert<int64>( const MultiArray<float64,3>& in);



    // To float64 vectors
    template MultiArray<float64,1> convert<float64>( const MultiArray<uint8,1>& in);
    template MultiArray<float64,1> convert<float64>( const MultiArray<int64,1>& in);
    template MultiArray<float64,1> convert<float64>( const MultiArray<float32,1>& in);
    template MultiArray<float64,1> convert<float64>( const MultiArray<float64,1>& in);

    // To float64 matrices
    template MultiArray<float64,2> convert<float64>( const MultiArray<uint8,2>& in);
    template MultiArray<float64,2> convert<float64>( const MultiArray<int64,2>& in);
    template MultiArray<float64,2> convert<float64>( const MultiArray<float32,2>& in);
    template MultiArray<float64,2> convert<float64>( const MultiArray<float64,2>& in);

    // To float64 volumes
    template MultiArray<float64,3> convert<float64>( const MultiArray<uint8,3>& in);
    template MultiArray<float64,3> convert<float64>( const MultiArray<int64,3>& in);
    template MultiArray<float64,3> convert<float64>( const MultiArray<float64,3>& in);

    template MultiArray<uint8,3> convert<uint8>( const MultiArray<bool,3>& in );
    template MultiArray<uint8,2> convert<uint8>( const MultiArray<bool,2>& in );
    template MultiArray<uint8,1> convert<uint8>( const MultiArray<bool,1>& in );

    template MultiArray<bool,3> convert<bool>( const MultiArray<uint8,3>& in );
    template MultiArray<bool,2> convert<bool>( const MultiArray<uint8,2>& in );
    template MultiArray<bool,1> convert<bool>( const MultiArray<uint8,1>& in );
} // namespace imageplus
