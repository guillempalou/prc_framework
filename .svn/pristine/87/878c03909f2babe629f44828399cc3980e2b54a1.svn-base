// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file shortest_paths.test
//!
//!  Tests for the math operations on Graphs
//!

#include <imageplus/math/graphs/graph.hpp>
#include <imageplus/math/graphs/graph_io.hpp>
#include <imageplus/math/graphs/algorithms/connected_components.hpp>

BOOST_AUTO_TEST_SUITE ( test_connected_components );

using namespace imageplus;
using namespace imageplus::math;
using namespace imageplus::math::graphs;

BOOST_AUTO_TEST_CASE( connected_components_test )
{
	typedef BoostGraph<kGraphUndirected> Graph;
	typedef Graph::Node Node;
	typedef Graph::Edge Edge;

	Graph g;

	ReadGraph<Graph> rg;

	rg.read(std::string(TEST_DATA_PATH_R) + "/math/graphs/test.graph", g, true);

	ConnectedComponents<Graph> connected;

	Graph::node_iterator n = g.nodes_begin();

	uint64 N = connected.calculate(g);

	BOOST_CHECK_EQUAL(N,1);
}

BOOST_AUTO_TEST_CASE( strongly_connected_components_test )
{
	typedef BoostGraph<> Graph;
	typedef Graph::Node Node;
	typedef Graph::Edge Edge;

	Graph g;

	ReadGraph<Graph> rg;

	rg.read(std::string(TEST_DATA_PATH_R) + "/math/graphs/test.graph", g, true);

	StronglyConnectedComponents<Graph> connected;

	Graph::node_iterator n = g.nodes_begin();

	uint64 N = connected.calculate(g);

	BOOST_CHECK_EQUAL(N,6);
}

BOOST_AUTO_TEST_SUITE_END ();

