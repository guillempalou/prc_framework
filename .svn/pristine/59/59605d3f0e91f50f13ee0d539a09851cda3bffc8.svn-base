/*
 * photo_consistency.hpp
 *
 *  Created on: Dec 5, 2012
 *      Author: guillem
 */

#ifndef PHOTO_CONSISTENCY_HPP_
#define PHOTO_CONSISTENCY_HPP_

#include <imageplus/core/image_signal.hpp>

namespace imageplus {
	namespace optical_flow {

	template<class ImageModel, class OpticalFlowType>
	ImageSignal<float64,1> photo_consistency_error(ImageModel& img1, ImageModel& img2, OpticalFlowType& forward) {

		ImageSignal<float64,1> reverse(forward.sizes());

		for (typename OpticalFlowType::iterator v = forward.begin(); v != forward.end(); ++v) {

			ImageSignal<float64,1>::coord_type pos = v.pos();
			//std::cout << pos.transpose() << " ::: " << forward.lower_point().transpose() << " ::: "  << forward.upper_point().transpose() << " " << forward(pos).transpose() << std::endl;

			typename OpticalFlowType::coord_float_type pos_float = pos.template cast<float64>();
			typename OpticalFlowType::value_type displacement = forward.interpolate_value(pos_float);
			typename OpticalFlowType::coord_float_type new_pos = pos_float + displacement;

			//std::cout << pos_float.transpose() << " ::: " << displacement.transpose() << " ::: " << new_pos.transpose() << " - " << forward.sizes().transpose() << std::endl;

			for (uint64 i = 0; i < 2; i++) pos(i) = round(new_pos(i));

			ImageSignal<float64,1>::coord_type a = pos - forward.lower_point();
			ImageSignal<float64,1>::coord_type b = forward.upper_point() - pos;

			//Check if the trajectory falls inside the video
			if (a.minCoeff() < 0 || b.minCoeff() < 0) {
				reverse(v.pos())(0) = -1; // error, we don't know because the flow goes outside the image
				continue;
			}

			// Check if the point should be tracked
			// check forward/backward consistency

			typename	ImageModel::value_type  i1  = img1.interpolate_value(pos_float);
			typename 	ImageModel::value_type  i2 	= img2.interpolate_value(new_pos);

			float64 error = (i1 - i2).norm();

			//std::cout << pos_float.transpose() << " ::: " << new_pos.transpose() << " ::: " << error << std::endl;

			reverse(v.pos())(0) = 1-std::exp(-error/14.0);
		}
		return reverse;
	}

	}

}


#endif /* PHOTO_CONSISTENCY_HPP_ */
