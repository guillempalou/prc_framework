// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file imavol_logical.hpp
//!
//!  Overloaded logical operators for imavols
//!

#ifndef IMAGEPLUS_CORE_IMAVOL_LOGICAL_HPP
#define IMAGEPLUS_CORE_IMAVOL_LOGICAL_HPP

#include <imageplus/core/imageplus_types.hpp>
#include <imageplus/core/imavol.hpp>


namespace imageplus
{
    //!
    //! \brief Overloading of operator == for two imavols or derived classes
    //!
    //! Template T is the type of the data \n
    //! Template N is the number of channels in the image/volume \n
    //! Template D is the number of dimensions (2 for images, 3 for volumes) \n
    //!
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 7-2-2008
    //!
    //! \param[in] input1 : First operand (imavol)
    //! \param[in] input2 : Second operand (imavol)
    //!
    //! \return 'true' if all pixels/voxels in each channel are equal. 'false' otherwise
    //!
    template<typename T, std::size_t N, std::size_t D>
    bool operator==( const ImaVol<T,N,D>& input1, const ImaVol<T,N,D>& input2)
    {
        for (uint64 i = 0; i < N; i++)
        {
            bool test = input1(i).operator==(input2(i));
            if (test == false)
            {
                return false;
            }
        }

        return true;
    }

    /*!
     * Equal-To operator (==) between an ImaVol and a scalar
     *
     * \tparam T : data type of the ImaVol and the scalar
     * \tparam N : number of channels of the ImaVol
     * \tparam D : dimensions of the ImaVol
     *
     * \param[in] iv  : ImaVol to compare
     * \param[in] val : scalar value to compare
     *
     * \returns true if all elements of all channels of the ImaVol are equal-to val, false otherwise
     *
     * \author 2011-07 Albert Gil - Creation
     */
    template<typename T, std::size_t N, std::size_t D>
    bool operator==( const ImaVol<T,N,D>& iv, const T& val)
    {
        for (std::size_t ii = 0; ii < N; ++ii)
        {
            if( ! (iv(ii) == val) ) return false;
        }

        return true;
    }
}

#endif
