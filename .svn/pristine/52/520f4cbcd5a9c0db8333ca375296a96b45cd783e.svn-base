// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file localization.test
//!
//! Tests for geometric localization descriptors 
//!
#include <imageplus/descriptors/geometry/localization.hpp>

#include <imageplus/core/imagepartition.hpp>
#include <imageplus/core/imagergb.hpp>
#include <imageplus/core/coord2d.hpp>
#include <imageplus/core/partition.hpp>
#include <imageplus/core/region_contour.hpp>
#include <imageplus/core/partition_functions.hpp>

BOOST_AUTO_TEST_SUITE ( Descriptors_Geometric_Localization_Suite );

using namespace imageplus;
using namespace descriptors;
using namespace std;

BOOST_AUTO_TEST_CASE( Centroid_test)
{   
    ImagePartition<> my_im_part(6,5);
    my_im_part[0][0] = 3;   my_im_part[0][1] = 3;   my_im_part[0][2] = 5;   my_im_part[0][3] = 4;   my_im_part[0][4] = 4;
    my_im_part[1][0] = 3;   my_im_part[1][1] = 5;   my_im_part[1][2] = 5;   my_im_part[1][3] = 5;   my_im_part[1][4] = 4;
    my_im_part[2][0] = 6;   my_im_part[2][1] = 5;   my_im_part[2][2] = 3;   my_im_part[2][3] = 5;   my_im_part[2][4] = 1;
    my_im_part[3][0] = 6;   my_im_part[3][1] = 5;   my_im_part[3][2] = 5;   my_im_part[3][3] = 5;   my_im_part[3][4] = 1;
    my_im_part[4][0] = 6;   my_im_part[4][1] = 2;   my_im_part[4][2] = 5;   my_im_part[4][3] = 2;   my_im_part[4][4] = 1;
    my_im_part[5][0] = 6;   my_im_part[5][1] = 2;   my_im_part[5][2] = 2;   my_im_part[5][3] = 2;   my_im_part[5][4] = 1;    

    ImageRGB<uint8> my_image(6,5);
    
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);
    
    merge_regions( 1,  2,  8, my_part);
    merge_regions( 3,  4,  9, my_part);
    merge_regions( 5,  6, 10, my_part);
    merge_regions( 8,  9, 11, my_part);
    merge_regions(10, 11, 12, my_part);
    
    Centroid<Coord2D<int64> > desc = calc_descriptor(new Centroid<Coord2D<int64> >(), my_image, my_part[5]);
    boost::array<float64,2> exact_value;
    
    exact_value[0]=2;
    exact_value[1]=2;
    BOOST_CHECK( desc == exact_value);
    
    exact_value[0]=2.5;
    exact_value[1]=2;
    
    Centroid<Coord2D<int64> > desc2 = calc_descriptor(new Centroid<Coord2D<int64> >(), my_image);
    BOOST_CHECK( desc2 == exact_value);
}


BOOST_AUTO_TEST_CASE( Centroid_with_CollaborativeDescriptors_test)
{   
    ImagePartition<> my_im_part(6,5);
    my_im_part[0][0] = 3;   my_im_part[0][1] = 3;   my_im_part[0][2] = 5;   my_im_part[0][3] = 4;   my_im_part[0][4] = 4;
    my_im_part[1][0] = 3;   my_im_part[1][1] = 5;   my_im_part[1][2] = 5;   my_im_part[1][3] = 5;   my_im_part[1][4] = 4;
    my_im_part[2][0] = 6;   my_im_part[2][1] = 5;   my_im_part[2][2] = 3;   my_im_part[2][3] = 5;   my_im_part[2][4] = 1;
    my_im_part[3][0] = 6;   my_im_part[3][1] = 5;   my_im_part[3][2] = 5;   my_im_part[3][3] = 5;   my_im_part[3][4] = 1;
    my_im_part[4][0] = 6;   my_im_part[4][1] = 2;   my_im_part[4][2] = 5;   my_im_part[4][3] = 2;   my_im_part[4][4] = 1;
    my_im_part[5][0] = 6;   my_im_part[5][1] = 2;   my_im_part[5][2] = 2;   my_im_part[5][3] = 2;   my_im_part[5][4] = 1;
    
    ImageRGB<uint8> my_image(6,5);

    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);
    
    merge_regions( 1,  2,  8, my_part);
    merge_regions( 3,  4,  9, my_part);
    merge_regions( 5,  6, 10, my_part);
    merge_regions( 8,  9, 11, my_part);
    merge_regions(10, 11, 12, my_part);  
   
    Centroid<Coord2D<int64> > desc;
    desc= calc_descriptor(new Centroid<Coord2D<int64> > ,  my_image, my_part[11]);
    
    
    boost::array< float64,  2> exact_value;
    
    exact_value[0]=2.5625;
    exact_value[1]=2.5;

    BOOST_CHECK( desc == exact_value);
}


BOOST_AUTO_TEST_CASE( Orientation_test)
{   
    ImagePartition<> my_im_part(6,5);
    my_im_part[0][0] = 3;
    my_im_part[1][0] = 3;
    my_im_part[2][0] = 6;
    my_im_part[3][0] = 6;
    my_im_part[4][0] = 6;
    my_im_part[5][0] = 6;
    my_im_part[0][0] = 3;
    my_im_part[1][1] = 5;
    my_im_part[2][1] = 5;
    my_im_part[3][1] = 5;
    my_im_part[4][1] = 2;
    my_im_part[5][1] = 2;
    my_im_part[0][2] = 5;
    my_im_part[1][2] = 5;
    my_im_part[2][2] = 3;
    my_im_part[3][2] = 5;
    my_im_part[4][2] = 5;
    my_im_part[5][2] = 2;
    
    my_im_part[0][3] = 4;
    my_im_part[1][3] = 5;
    my_im_part[2][3] = 5;
    my_im_part[3][3] = 5;
    my_im_part[4][3] = 2;
    my_im_part[5][3] = 2;
    my_im_part[0][4] = 1;
    my_im_part[1][4] = 4;
    my_im_part[2][4] = 1;
    my_im_part[3][4] = 1;
    my_im_part[4][4] = 1;
    my_im_part[5][4] = 7;
    ImageRGB<uint8> my_image(6,5);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(0)[0][0] = 25;
    my_image(0)[2][0] = 2;
    my_image(0)[1][2] = 6;
    
    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);
    
    merge_regions(1, 2, 8, my_part);
    merge_regions(3, 4, 9, my_part);
    merge_regions(5, 6, 10, my_part);
    merge_regions(9, 10, 11, my_part);
    merge_regions(7, 11, 12, my_part);
    
    Orientation<RegionType::CoordType> desc;
    
    desc= calc_descriptor(new Orientation<RegionType::CoordType>, my_image, my_part[5]);
    BOOST_CHECK( desc == (float64)0);
    
    desc= calc_descriptor(new Orientation<RegionType::CoordType>, my_image, my_part[7]);
    BOOST_CHECK( desc == (float64)0);
    
    desc= calc_descriptor(new Orientation<RegionType::CoordType>, my_image, my_part[4]);
    BOOST_CHECK_CLOSE( (float64)desc, (float64) -45/180*M_PI, 1e-10);
}



BOOST_AUTO_TEST_CASE( Orientation_with_CollaborativeDescriptors_test)
{   
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 3;
    my_im_part[1][0] = 2;
    my_im_part[2][0] = 1;

    my_im_part[0][1] = 2;
    my_im_part[1][1] = 5;
    my_im_part[2][1] = 1;
    
    my_im_part[0][2] = 2;
    my_im_part[1][2] = 1;
    my_im_part[2][2] = 4;
    
    ImageRGB<uint8> my_image(3,3);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(0)[0][0] = 25;
    my_image(0)[2][0] = 2;
    my_image(0)[1][2] = 6;
    
    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);
    
    merge_regions(1, 2, 8, my_part);
    merge_regions(3, 4, 9, my_part);
    merge_regions(5, 9, 11, my_part);
    
    Orientation<RegionType::CoordType> desc;
    desc= calc_descriptor(new Orientation<RegionType::CoordType>, my_image, my_part[11]);
    BOOST_CHECK_CLOSE( (float64)desc, (float64) -45/180*M_PI, 1e-10);
}


BOOST_AUTO_TEST_CASE( OrientedBoundingBox_with_CollaborativeDescriptors_test)
{   
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 3;
    my_im_part[1][0] = 2;
    my_im_part[2][0] = 1;

    my_im_part[0][1] = 2;
    my_im_part[1][1] = 5;
    my_im_part[2][1] = 1;
    
    my_im_part[0][2] = 2;
    my_im_part[1][2] = 1;
    my_im_part[2][2] = 4;
    
    ImageRGB<uint8> my_image(3,3);

    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);
    
    merge_regions(1, 2,  8, my_part);
    merge_regions(3, 4,  9, my_part);
    merge_regions(5, 9, 11, my_part);
    
    OrientedBoundingBox<RegionType::CoordType> desc;
    desc= calc_descriptor(new OrientedBoundingBox<RegionType::CoordType>, my_image, my_part[11]);
    desc= calc_descriptor(new OrientedBoundingBox<RegionType::CoordType>, my_image, my_part[1]);
}

BOOST_AUTO_TEST_SUITE_END ();


