// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

#include <imageplus/core/neighbors.hpp>


BOOST_AUTO_TEST_SUITE ( NeighborsSuite );

using namespace imageplus;

typedef boost::mpl::list<uint8, int64,float64> DataTypes;



BOOST_AUTO_TEST_CASE_TEMPLATE( neighbors_Check, T, DataTypes )
{	

    MultiArray<T,2> ori(6,6);

    ori[0][0] = 3;
    ori[1][0] = 7; // 5
    ori[2][0] = 7;
    ori[3][0] = 21; //14
    ori[4][0] = 21;
    ori[5][0] = 21;

    ori[0][1] = 4;  //3.5 
    ori[1][1] = 9;  //5.75
    ori[2][1] = 9;  //8
    ori[3][1] = 8;  //11.25
    ori[4][1] = 8;  //14.5
    ori[5][1] = 8;  //14.5

    ori[0][2] = 4;
    ori[1][2] = 9;  //6.5
    ori[2][2] = 9;
    ori[3][2] = 8;  //8.5
    ori[4][2] = 8;
    ori[5][2] = 8;

    ori[0][3] = 0;  //2
    ori[1][3] = 3;  //4
    ori[2][3] = 3;  //6
    ori[3][3] = 5;  //6.25
    ori[4][3] = 5;  //6.5
    ori[5][3] = 5;  //6.5

    ori[0][4] = 0;
    ori[1][4] = 3;  //1.5
    ori[2][4] = 3;
    ori[3][4] = 5;  //4
    ori[4][4] = 5;
    ori[5][4] = 5;

    ori[0][5] = 0;
    ori[1][5] = 3;  //1.5
    ori[2][5] = 3;
    ori[3][5] = 5;  //4
    ori[4][5] = 5;
    ori[5][5] = 5;


    Point2D p1(2.5,2.5);
    Point2D p2(2,2);
    Point2D p3(0,0);
    Point2D p4(4.5,5);
    Point2D p5(5.5, 5.5);


    std::vector< Coord2D<> > c1;
    c1 = neighbors(ori, p1, 1, 4, true); // (2.5,2.5)

    BOOST_CHECK_EQUAL (c1.size(), static_cast<std::size_t>(4));
    BOOST_CHECK_EQUAL (c1[0].x(), 2); BOOST_CHECK_EQUAL(c1[0].y(), 2);
    BOOST_CHECK_EQUAL (c1[1].x(), 3); BOOST_CHECK_EQUAL(c1[1].y(), 2);
    BOOST_CHECK_EQUAL (c1[2].x(), 2); BOOST_CHECK_EQUAL(c1[2].y(), 3);
    BOOST_CHECK_EQUAL (c1[3].x(), 3); BOOST_CHECK_EQUAL(c1[3].y(), 3);



    std::vector<T> v1;
    v1 = neighbors_values(ori, p1, 1, 4); // (2.5,2.5)

    BOOST_CHECK_EQUAL (v1.size(), static_cast<std::size_t>(4));
    BOOST_CHECK_EQUAL (v1[0], 9);
    BOOST_CHECK_EQUAL (v1[1], 8);
    BOOST_CHECK_EQUAL (v1[2], 3);
    BOOST_CHECK_EQUAL (v1[3], 5);


    std::vector< Coord2D<> > c2;
    c2 = neighbors(ori, p1, 2, 4, true); //(2.5,2.5);

    BOOST_CHECK_EQUAL (c2.size(), static_cast<std::size_t>(16));

    BOOST_CHECK_EQUAL (c2[0].x(), 1); BOOST_CHECK_EQUAL(c2[0].y(), 1);
    BOOST_CHECK_EQUAL (c2[1].x(), 2); BOOST_CHECK_EQUAL(c2[1].y(), 1);
    BOOST_CHECK_EQUAL (c2[2].x(), 3); BOOST_CHECK_EQUAL(c2[2].y(), 1);
    BOOST_CHECK_EQUAL (c2[3].x(), 4); BOOST_CHECK_EQUAL(c2[3].y(), 1);

    BOOST_CHECK_EQUAL (c2[4].x(), 1); BOOST_CHECK_EQUAL(c2[4].y(), 2);
    BOOST_CHECK_EQUAL (c2[5].x(), 2); BOOST_CHECK_EQUAL(c2[5].y(), 2);
    BOOST_CHECK_EQUAL (c2[6].x(), 3); BOOST_CHECK_EQUAL(c2[6].y(), 2);
    BOOST_CHECK_EQUAL (c2[7].x(), 4); BOOST_CHECK_EQUAL(c2[7].y(), 2);

    BOOST_CHECK_EQUAL (c2[8].x(), 1); BOOST_CHECK_EQUAL(c2[8].y(), 3);
    BOOST_CHECK_EQUAL (c2[9].x(), 2); BOOST_CHECK_EQUAL(c2[9].y(), 3);
    BOOST_CHECK_EQUAL (c2[10].x(), 3); BOOST_CHECK_EQUAL(c2[10].y(), 3);
    BOOST_CHECK_EQUAL (c2[11].x(), 4); BOOST_CHECK_EQUAL(c2[11].y(), 3);

    BOOST_CHECK_EQUAL (c2[12].x(), 1); BOOST_CHECK_EQUAL(c2[12].y(), 4);
    BOOST_CHECK_EQUAL (c2[13].x(), 2); BOOST_CHECK_EQUAL(c2[13].y(), 4);
    BOOST_CHECK_EQUAL (c2[14].x(), 3); BOOST_CHECK_EQUAL(c2[14].y(), 4);
    BOOST_CHECK_EQUAL (c2[15].x(), 4); BOOST_CHECK_EQUAL(c2[15].y(), 4);



    std::vector< T > v2;
    v2 = neighbors_values (ori, p1, 2, 4); //(2.5,2.5);

    BOOST_CHECK_EQUAL (v2.size(), static_cast<std::size_t>(16));

    BOOST_CHECK_EQUAL (v2[0], 9);
    BOOST_CHECK_EQUAL (v2[1], 9);
    BOOST_CHECK_EQUAL (v2[2], 8);
    BOOST_CHECK_EQUAL (v2[3], 8);

    BOOST_CHECK_EQUAL (v2[4], 9);
    BOOST_CHECK_EQUAL (v2[5], 9);
    BOOST_CHECK_EQUAL (v2[6], 8);
    BOOST_CHECK_EQUAL (v2[7], 8);

    BOOST_CHECK_EQUAL (v2[8],  3);
    BOOST_CHECK_EQUAL (v2[9],  3);
    BOOST_CHECK_EQUAL (v2[10], 5);
    BOOST_CHECK_EQUAL (v2[11], 5);

    BOOST_CHECK_EQUAL (v2[12], 3);
    BOOST_CHECK_EQUAL (v2[13], 3);
    BOOST_CHECK_EQUAL (v2[14], 5);
    BOOST_CHECK_EQUAL (v2[15], 5);



    std::vector< Coord2D<> > c3;
    c3 = neighbors(ori, p2, 1, 4, true); //(2,2)

    BOOST_CHECK_EQUAL (c3.size(), static_cast<std::size_t>(4));
    BOOST_CHECK_EQUAL (c3[0].x(), 2); BOOST_CHECK_EQUAL(c3[0].y(), 1);
    BOOST_CHECK_EQUAL (c3[1].x(), 1); BOOST_CHECK_EQUAL(c3[1].y(), 2);
    // BOOST_CHECK_EQUAL (c3[2].x(), 2); BOOST_CHECK_EQUAL(c3[2].y(), 2);
    BOOST_CHECK_EQUAL (c3[2].x(), 3); BOOST_CHECK_EQUAL(c3[2].y(), 2);
    BOOST_CHECK_EQUAL (c3[3].x(), 2); BOOST_CHECK_EQUAL(c3[3].y(), 3);


    std::vector<T> v3;
    v3 = neighbors_values (ori, p2, 1, 4); //(2,2)

    BOOST_CHECK_EQUAL (v3.size(), static_cast<std::size_t>(4));
    BOOST_CHECK_EQUAL (v3[0], 9);
    BOOST_CHECK_EQUAL (v3[1], 9);
    BOOST_CHECK_EQUAL (v3[2], 8);
    BOOST_CHECK_EQUAL (v3[3], 3);




    std::vector< Coord2D<> > c4;
    c4 = neighbors(ori, p2, 1, 8, true); // (2,2);

    BOOST_CHECK_EQUAL (c4.size(), static_cast<std::size_t>(8));

    BOOST_CHECK_EQUAL (c4[0].x(), 1); BOOST_CHECK_EQUAL(c4[0].y(), 1);
    BOOST_CHECK_EQUAL (c4[1].x(), 2); BOOST_CHECK_EQUAL(c4[1].y(), 1);
    BOOST_CHECK_EQUAL (c4[2].x(), 3); BOOST_CHECK_EQUAL(c4[2].y(), 1);
    BOOST_CHECK_EQUAL (c4[3].x(), 1); BOOST_CHECK_EQUAL(c4[3].y(), 2);
    BOOST_CHECK_EQUAL (c4[4].x(), 3); BOOST_CHECK_EQUAL(c4[4].y(), 2);
    BOOST_CHECK_EQUAL (c4[5].x(), 1); BOOST_CHECK_EQUAL(c4[5].y(), 3);
    BOOST_CHECK_EQUAL (c4[6].x(), 2); BOOST_CHECK_EQUAL(c4[6].y(), 3);
    BOOST_CHECK_EQUAL (c4[7].x(), 3); BOOST_CHECK_EQUAL(c4[7].y(), 3);


    std::vector< Coord2D<> > c5; //(0,0)
    c5 = neighbors(ori, p3, 1, 4, true);

    BOOST_CHECK_EQUAL (c5.size(), static_cast<std::size_t>(2));
    BOOST_CHECK_EQUAL (c5[0].x(), 1); BOOST_CHECK_EQUAL(c5[0].y(), 0);
    BOOST_CHECK_EQUAL (c5[1].x(), 0); BOOST_CHECK_EQUAL(c5[1].y(), 1);


    std::vector<T> v5; //(0,0)
    v5 = neighbors_values(ori, p3, 1, 4);

    BOOST_CHECK_EQUAL (v5.size(), static_cast<std::size_t>(2));
    BOOST_CHECK_EQUAL (v5[0], 7);
    BOOST_CHECK_EQUAL (v5[1], 4);



    std::vector< Coord2D<> > c6; //(0,0)
    c6 = neighbors(ori, p3, 1, 4, false);

    BOOST_CHECK_EQUAL (c6.size(), static_cast<std::size_t>(4));
    BOOST_CHECK_EQUAL (c6[0].x(), 0); BOOST_CHECK_EQUAL(c6[0].y(), -1);
    BOOST_CHECK_EQUAL (c6[1].x(), -1); BOOST_CHECK_EQUAL(c6[1].y(), 0);
    BOOST_CHECK_EQUAL (c6[2].x(), 1); BOOST_CHECK_EQUAL(c6[2].y(), 0);
    BOOST_CHECK_EQUAL (c6[3].x(), 0); BOOST_CHECK_EQUAL(c6[3].y(), 1);


    std::vector< Coord2D<> > c7;
    c7 = neighbors(ori, p4, 1, 4, true); //(4.5, 5)
    BOOST_CHECK_EQUAL (c7.size(), static_cast<std::size_t>(2));
    BOOST_CHECK_EQUAL (c7[0].x(), 4); BOOST_CHECK_EQUAL(c7[0].y(), 5);
    BOOST_CHECK_EQUAL (c7[1].x(), 5); BOOST_CHECK_EQUAL(c7[1].y(), 5);


    std::vector< Coord2D<> > c8;
    c8 = neighbors(ori, p4, 1, 4, false); //(4.5, 5)
    BOOST_CHECK_EQUAL (c8.size(), static_cast<std::size_t>(2));
    BOOST_CHECK_EQUAL (c8[0].x(), 4); BOOST_CHECK_EQUAL(c8[0].y(), 5);
    BOOST_CHECK_EQUAL (c8[1].x(), 5); BOOST_CHECK_EQUAL(c8[1].y(), 5);

    std::vector< Coord2D<> > c9; // (5.5, 5.5)
    c9 = neighbors(ori, p5, 1, 4, true);

    BOOST_CHECK_EQUAL (c9.size(), static_cast<std::size_t>(1));
    BOOST_CHECK_EQUAL (c9[0].x(), 5); BOOST_CHECK_EQUAL(c9[0].y(), 5);

    std::vector< Coord2D<> > c10; // (5.5, 5.5)
    c10 = neighbors(ori, p5, 1, 4, false);

    BOOST_CHECK_EQUAL (c10.size(), static_cast<std::size_t>(4));
    BOOST_CHECK_EQUAL (c10[0].x(), 5); BOOST_CHECK_EQUAL(c10[0].y(), 5);
    BOOST_CHECK_EQUAL (c10[1].x(), 6); BOOST_CHECK_EQUAL(c10[1].y(), 5);
    BOOST_CHECK_EQUAL (c10[2].x(), 5); BOOST_CHECK_EQUAL(c10[2].y(), 6);
    BOOST_CHECK_EQUAL (c10[3].x(), 6); BOOST_CHECK_EQUAL(c10[3].y(), 6);



    // Version with mask

    MultiArray<bool,2> mask(6,6);

    mask[0][0] = true;
    mask[1][0] = true; 
    mask[2][0] = true;
    mask[3][0] = true;
    mask[4][0] = true;
    mask[5][0] = true;

    mask[0][1] = true; 
    mask[1][1] = true; 
    mask[2][1] = true; 
    mask[3][1] = false;
    mask[4][1] = false;
    mask[5][1] = true;

    mask[0][2] = true;
    mask[1][2] = true; 
    mask[2][2] = true;
    mask[3][2] = false;
    mask[4][2] = false;
    mask[5][2] = true;

    mask[0][3] = false;
    mask[1][3] = false;
    mask[2][3] = true; 
    mask[3][3] = false;
    mask[4][3] = false;
    mask[5][3] = false;

    mask[0][4] = false;
    mask[1][4] = false;
    mask[2][4] = true;
    mask[3][4] = false;
    mask[4][4] = false;
    mask[5][4] = false;

    mask[0][5] = false;
    mask[1][5] = false;
    mask[2][5] = true;
    mask[3][5] = false;
    mask[4][5] = true;
    mask[5][5] = false;


    std::vector< Coord2D<> > c11;  //(2.5, 2.5) 
    c11 = neighbors(ori, mask, p1, 1, 4);

    BOOST_CHECK_EQUAL (c11.size(), static_cast<std::size_t>(2));
    BOOST_CHECK_EQUAL (c11[0].x(), 2); BOOST_CHECK_EQUAL(c11[0].y(), 2);
    BOOST_CHECK_EQUAL (c11[1].x(), 2); BOOST_CHECK_EQUAL(c11[1].y(), 3);


    std::vector<T> v11;
    v11 = neighbors_values(ori, mask, p1, 1, 4); // (2.5,2.5)

    BOOST_CHECK_EQUAL (v11.size(), static_cast<std::size_t>(2));
    BOOST_CHECK_EQUAL (v11[0], 9);
    BOOST_CHECK_EQUAL (v11[1], 3);



    std::vector< Coord2D<> > c12;
    c12 = neighbors(ori, mask, p2, 1, 4, true); //(2,2)

    BOOST_CHECK_EQUAL (c12.size(), static_cast<std::size_t>(3));
    BOOST_CHECK_EQUAL (c12[0].x(), 2); BOOST_CHECK_EQUAL(c12[0].y(), 1);
    BOOST_CHECK_EQUAL (c12[1].x(), 1); BOOST_CHECK_EQUAL(c12[1].y(), 2);
    BOOST_CHECK_EQUAL (c12[2].x(), 2); BOOST_CHECK_EQUAL(c12[2].y(), 3);


    std::vector<T> v12;
    v12 = neighbors_values (ori, mask, p2, 1, 4); //(2,2)

    BOOST_CHECK_EQUAL (v12.size(), static_cast<std::size_t>(3));
    BOOST_CHECK_EQUAL (v12[0], 9);
    BOOST_CHECK_EQUAL (v12[1], 9);
    BOOST_CHECK_EQUAL (v12[2], 3);


    Coord2D<> p6(4,2);

    std::vector< Coord2D<> > c13;
    c13 = nearest_valid_neighbors(mask, p6); //(4,2)

    BOOST_CHECK_EQUAL (c13.size(), static_cast<std::size_t>(4));
    BOOST_CHECK_EQUAL (c13[0].x(), 4); BOOST_CHECK_EQUAL(c13[0].y(), 0);
    BOOST_CHECK_EQUAL (c13[1].x(), 2); BOOST_CHECK_EQUAL(c13[1].y(), 2);
    BOOST_CHECK_EQUAL (c13[2].x(), 5); BOOST_CHECK_EQUAL(c13[2].y(), 2);
    BOOST_CHECK_EQUAL (c13[3].x(), 4); BOOST_CHECK_EQUAL(c13[3].y(), 5);


    std::vector<T> v13;
    v13 = nearest_valid_neighbors_values (ori, mask, p6); //(4,2)

    BOOST_CHECK_EQUAL (v13.size(), static_cast<std::size_t>(4));
    BOOST_CHECK_EQUAL (v13[0], 21);
    BOOST_CHECK_EQUAL (v13[1], 9);
    BOOST_CHECK_EQUAL (v13[2], 8);
    BOOST_CHECK_EQUAL (v13[3], 5);
}

BOOST_AUTO_TEST_SUITE_END ();

