// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file writebitstream.hpp
//!
//!  Class for writing streams of bits to disk
//!

#ifndef IMAGEPLUS_IO_WRITEBITSTREAM_HPP
#define IMAGEPLUS_IO_WRITEBITSTREAM_HPP

#include <fstream>
#include <string>

#include <imageplus/io/io_types.hpp>

namespace imageplus
{
    namespace io
    {
        //!
        //! \brief Class for writing bitstreams to disk
        //!
        //! Wrapper class that allows you to write to file an specified number of bits. It keeps a buffer 
        //!  of 8 bits and when full, it is written to file.
        //! 
        //! Usage:
        //! \code
        //!    WriteBitStream writeBS;
        //!    writeBS.open("test.b");
        //!
        //!    uint64 to_write = 10; // 1010
        //!    uint8  n_bits_to_write = 4;
        //!    writeBS.write(to_write, n_bits_to_write);
        //!     //...
        //!    writeBS.force_write();
        //!    writeBS.close();
        //! \endcode
        //!
        //! \author Jordi Pont Tuset <jpont@gps.tsc.upc.edu>
        //!
        //! \date 29-12-2008
        //!
        //! \todo Use boost::dynamic_bitset to handle the sets of bits?
        //!
        class WriteBitStream
        {
            public:

                //!
                //! \brief Default Constructor
                //!
                WriteBitStream();

                //!
                //! \brief Constructor from file name
                //!
                //! \param[in] filename : File name
                //! \param[in] mode     : APPEND or NEW (default: NEW)
                //!
                explicit WriteBitStream( const std::string& filename, OpenMode mode = NEW );

                //!
                //! \brief Destructor
                //!
                ~WriteBitStream();

                //!
                //! \brief Open a binary file
                //!
                //! \param[in] filename : File name
                //! \param[in] mode     : APPEND or NEW (default: NEW)
                //!
                void open( const std::string& filename, OpenMode mode = NEW );
                
                //!
                //! \brief Close the bitstream
                //!
                void close( );

                //!
                //! \brief Writes the specified number of bits to the file
                //!
                //! \param[in] to_write: Number to be written to disk (the upper bits from bits_to_write are ignored)
                //! \param[in] n_bits_to_write: Number of bits from \b to_write to be written to the file
                //!
                void write( uint64 to_write, uint8 n_bits_to_write );

                //!
                //! \brief If the buffer is not empty, it writes the bits in it adding zeros up to a byte
                //!
                void force_write( );
                
            private:

                //! Stores the file name in disk
                std::string _filename;
                
                //! Output filestream to write to disk
                std::ofstream _fp;

                //! Stores the current buffer byte
                uint8 _buffer;
                
                //! Stores the current free space in the buffer
                uint8 _space;
        };
    } // namespace io
} //namespace imageplus

#endif
