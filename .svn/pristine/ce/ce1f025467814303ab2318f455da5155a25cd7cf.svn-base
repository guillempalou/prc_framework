/*!
 * \example hello_imavol_iterators.cpp
 *
 * This is an example of how to loop in an ImaVol.
 * 
 * See the \ref imavol "Getting Started Guide" for more information.
 * 
 * \todo Add logic using coords
 */
#include <imageplus/core.hpp>

using namespace imageplus;

void hello_imavol_iterators( ImageGray<int16>   & gry, 
                             ImageRGB <uint8>   & rgb,
                             Volume   <uint8,1> & vol )
{
    ImageGray<int16>   ::Color  gry_color = 0; 
    ImageRGB <uint8>   ::Color  rgb_color = 0;
    Volume   <uint8,1> ::Color  vol_color = 0;
    
    /*
     * The standard way to loop for all pixels/voxels of any ImaVol is using iterators.
     */
    for( ImageGray<int16>::iterator<> it = gry.colors_begin(); it != gry.colors_end(); ++it)
    {
        /*
         * We can read or write the pixel's color
         */
        gry_color = (*it).value(); // read
        (*it).value() = 0;         // write
        
        /*
         * We can known the current pixel/voxel position by:
         */
        (*it).position();
    }
    
    /*
     * Iterators works equally for different color spaces
     */
    for( ImageRGB<uint8>::iterator<>  it = rgb.colors_begin(); it != rgb.colors_end(); ++it)
    {
        /*
         * As an example, here we can do a kind of swap with the previous color...
         */
        ImageRGB<uint8>::Color  tmp = (*it).value();
        (*it).value() = rgb_color;
        rgb_color = tmp;
    }
    
    /*
     * Iterators also works equally for volumes
     */
    for( Volume<uint8,1>::iterator<>  it = vol.colors_begin(); it != vol.colors_end(); ++it)
    {
        (*it).value() = vol_color;
    }
}
