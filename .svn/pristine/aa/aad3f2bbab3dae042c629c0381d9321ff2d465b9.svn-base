// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file detector.cpp
//!
//!  Detector
//!

#include <string>

#include <boost/assign.hpp>
#include <boost/filesystem.hpp>
#include <boost/foreach.hpp>

#include <imageplus/core.hpp>

#include <imageplus/descriptors/color/color_structure.hpp>

#include <imageplus/io/readimage.hpp>

#include <imageplus/machine_learning/svm/svm_adaptors.hpp>

#include <imageplus/semantic/models.hpp>
#include <imageplus/semantic/readwriteannotation.hpp>
#include <imageplus/semantic/readwritemodels.hpp>
#include <imageplus/semantic/detector.hpp>

#ifdef USE_XML
#include <imageplus/io/xml_auxiliar.hpp>
XERCES_CPP_NAMESPACE_USE
#endif

using namespace imageplus;
using namespace imageplus::descriptors;
using namespace imageplus::io;
using namespace imageplus::machine_learning::svm;
using namespace imageplus::semantic;

Detector::Detector(const std::string& models_file, const std::string& output_dir) throw (ImagePlusError)
{
	_models_file = models_file;
    ReadWriteModels rw_models(_models_file);
    rw_models >> _models;

    _output_dir = output_dir;
	boost::filesystem::path output_path = _output_dir;
    if (!boost::filesystem::is_directory(output_path))
        throw ImagePlusError("Detector: Output directory " + output_path.string() + " not found.");
}

void Detector::detect(const std::string& regions_file, int sc_id) throw (ImagePlusError)
{
	// FIXME would it be better as a parameter?
	std::list<std::string> visual_descriptors = boost::assign::list_of("ColorStructure");

	Ontology ontology = _models.get_ontology();
	if (ontology.includes_semantic_class(sc_id))
	{
		// use the model of each visual descriptor to detect if the image is an
		// instance of the given semantic class
		LabelsType labels;
		BOOST_FOREACH(std::string vd_name, visual_descriptors)
		{
			ModelPart<SVM> mp = _models.get_model(sc_id).get_parts().front();
			SVM classifier = mp.get_vd_classifier(vd_name);
			InputDataType input_data;
			input_data.push_back(_read_descriptor(regions_file, vd_name));
			labels = classifier.classify(input_data);
			//BOOST_FOREACH(double label, labels)
			//	std::cout << "label: (" << label << ") " << Instance::instance_type_names[static_cast<int>(label)] << std::endl;
		}

		// create annotation with the detection result
		Annotation annotation;
		annotation.set_ontology(ontology);
		AnnotatedSemanticClass& asc = annotation.annotate(sc_id);
		std::list<std::string> still_regions;
		Instance instance("SegmentInstance0", regions_file, 8, 1.0, still_regions);
		asc.add_instance(instance, static_cast<Instance::InstanceType>(static_cast<int64>(labels.front())));

		// write annotation to the output directory
		boost::filesystem::path regions_path = regions_file;
		boost::filesystem::path output_path = _output_dir;
		output_path /= regions_path.filename();
	    ReadWriteAnnotation rw_annotation(output_path.string());
	    rw_annotation << annotation;
	    //std::cout << "Annotation with detection result saved in '" << _output_dir << "'" << std::endl;
	}
	else
		throw ImagePlusError("Detector: Semantic class id " + boost::lexical_cast<std::string>(sc_id) + " not found in the Ontology.");
}

Observation::FeatureVector Detector::_read_descriptor(const std::string& filename, const std::string& vd_name) const throw (ImagePlusError)
{
#ifdef USE_XML
	/* This definition will be useful in this case*/
	typedef ImageRGB<uint8> ImageType;

	/* It will contain the uris related to the previous XML file ("ImageFile", "ThumbnailFile", "PartitionSearchFile", "BinaryPartitionTree") */
	std::map<std::string, std::string> uris;
	/* The XML header is read. The uris explained before are saved */
	XERCES_CPP_NAMESPACE::DOMNode *image_node = bpt_xml_read_header(filename, uris);

	/* The read operator is used for reading the Image, which is saved in my_image */
	ReadImage ri(uris["ImageFile"]);
	ImageType my_image;
    ri >> my_image;

    /* First, we have to obtain the pointer to the XML node corresponding to the region Region1 (this is an image, only 1 region) */
	XERCES_CPP_NAMESPACE::DOMNode *region_node = bpt_xml_search_region(image_node, my_image);

	// READ VISUAL DESCRIPTOR FROM XML
	read_descriptor(new ColorStructure<ImageType>(), region_node, my_image);

	/* We get the descriptors from my_reg by using the function get_descriptor. The identifier of the descriptor we want to get must be given. */
	ColorStructure<ImageType> color_structure_vd = get_descriptor<ColorStructure<ImageType> > ("ColorStructure", my_image);

	/* Return the FeatureVector for the descriptor */
	return color_structure_vd.fv();
#else // No USE_XML
    throw ImagePlusError("Enable the flag USE_XML for _read_descriptor.");
#endif
}
