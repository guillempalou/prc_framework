// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file imageriq.cpp
//!
//! \author Antonella Battisti
//! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
//!
//!  Implementation for ImageRIQ class
//!

#include <imageplus/core/check_size.hpp>

#include <imageplus/core/imagercq.hpp>

using namespace imageplus;


template<typename T>
ImageRCQ<T>::ImageRCQ()
        : Image<T,3>()
{
}


template<typename T>
ImageRCQ<T>::ImageRCQ(uint64 x, uint64 y)
        : Image<T,3>(x,y)
{
}


template<typename T>
ImageRCQ<T>::ImageRCQ(const ImaVol<T,3,2>& copy)
        : Image<T,3>(copy)
{
    check_size_rcq(copy);
}


template<typename T>
ImageRCQ<T>::ImageRCQ(const Image<T,3>& copy)
        : Image<T,3>(copy)
{
    check_size_rcq(copy);
}


template<typename T>
ImageRCQ<T>::ImageRCQ(const ImageRCQ<T>& copy)
        : Image<T,3>(copy)
{
#ifndef NDEBUG
    check_size_rcq(copy);
#endif
}


template<typename T>
ImageRCQ<T>::ImageRCQ(const std::vector< std::vector<uint64> >& dims)
        : Image<T,3>(dims)
{
    if ( (dims[0][0] != dims[1][0]) || (dims[0][1] != dims[1][1]) )
    {
        throw ImagePlusError("U channel dimensions must be equal to Y channel dimensions");
    }

    if ( (dims[0][0] != dims[2][0]) || (dims[0][1] != dims[2][1]) )
    {
        throw ImagePlusError("V channel dimensions must be equal to Y channel dimensions");
    }
}


template<typename T>
ImageRCQ<T>::~ImageRCQ()
{
}


template<typename T>
ImageRCQ<T>& ImageRCQ<T>::operator=( const ImaVol<T,3,2>& copy )
{
    check_size_rcq(copy);

    (*this).Image<T,3>::operator=( copy );

    return *this;
}


template<typename T>
ImageRCQ<T>& ImageRCQ<T>::operator=( const Image<T,3>& copy )
{
    check_size_rcq(copy);

    (*this).Image<T,3>::operator=( copy );

    return *this;
}


template<typename T>
ImageRCQ<T>& ImageRCQ<T>::operator=( const ImageRCQ<T>& copy )
{
#ifndef NDEBUG
    check_size_rcq(copy);
#endif

    (*this).Image<T,3>::operator=( copy );

    return *this;
}


template<typename T>
const T& ImageRCQ<T>::operator=(const T& val)
{
    (*this).Image<T,3>::operator=( val );

    return val;
}



// ImageRCQ instantiations
namespace imageplus
{
    template class ImageRCQ<uint8>;
    template class ImageRCQ<uint16>;
    template class ImageRCQ<uint32>;
    template class ImageRCQ<uint64>;
    template class ImageRCQ<int8>;
    template class ImageRCQ<int16>;
    template class ImageRCQ<int32>;
    template class ImageRCQ<int64>;
    template class ImageRCQ<float64>;
}
