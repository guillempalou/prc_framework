// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file timestamp.test
//!
//!  Tests for the Timestamp classs 
//!

#include <imageplus/core/timestamp.hpp>

#include <boost/thread/thread.hpp> // just for sleep() function


BOOST_AUTO_TEST_SUITE ( suite_timestamp );

using namespace imageplus;

BOOST_AUTO_TEST_CASE ( test_timestamp )
{
    /*
     * Default Constructor
     */
    Timestamp ts1;
    
    BOOST_CHECK( ts1.hours()   == 0 );
    BOOST_CHECK( ts1.minutes() == 0 );
    BOOST_CHECK( ts1.seconds() == 0 );
    BOOST_CHECK( ts1.millis()  == 0 );
    BOOST_CHECK( ts1.micros()  == 0 );

    /*
     * Specific constructor
     */
    Timestamp ts2(1,2,3,4);
    
    BOOST_CHECK( ts2.hours()   == 1 );
    BOOST_CHECK( ts2.minutes() == 2 );
    BOOST_CHECK( ts2.seconds() == 3 );
    BOOST_CHECK( ts2.millis()  == 0 );
    BOOST_CHECK( ts2.micros()  == 4 );
    
    /*
     * Copy constructor
     */
    Timestamp ts3(ts2);
    
    BOOST_CHECK( ts3.hours()   == ts2.hours()   );
    BOOST_CHECK( ts3.minutes() == ts2.minutes() );
    BOOST_CHECK( ts3.seconds() == ts2.seconds() );
    BOOST_CHECK( ts3.millis()  == ts2.millis()  );
    BOOST_CHECK( ts3.micros()  == ts2.micros()  );
    
    /*
     * Constructor by seconds
     */
    Timestamp ts4(3.5);
    
    BOOST_CHECK( ts4.hours()   == 0 );
    BOOST_CHECK( ts4.minutes() == 0 );
    BOOST_CHECK( ts4.seconds() == 3 );
    BOOST_CHECK( ts4.millis()  == 500 );
    BOOST_CHECK( ts4.micros()  == 500000 );

#ifndef MSVC
    /*
     * Constructor and implicit cast from/to a timespec
     */
    timespec tsp = ts4;

    BOOST_CHECK( tsp.tv_sec  == 3 );
    BOOST_CHECK( tsp.tv_nsec == 500000000 );
    
    Timestamp ts5 = tsp;
    
    BOOST_CHECK( ts5.hours()   == 0 );
    BOOST_CHECK( ts5.minutes() == 0 );
    BOOST_CHECK( ts5.seconds() == 3 );
    BOOST_CHECK( ts5.millis()  == 500 );
    BOOST_CHECK( ts5.micros()  == 500000 );
#endif

    /*
     * Copy assignements
     */
    ts4 = 20.3562;
    BOOST_CHECK( ts4.hours()   == 0 );
    BOOST_CHECK( ts4.minutes() == 0 );
    BOOST_CHECK( ts4.seconds() == 20);
    BOOST_CHECK( ts4.millis()  == 356 );
    BOOST_CHECK( ts4.micros()  == 356200 );
    
    /*
     * Constructor by string
     */
    Timestamp ts6("13.5");
    BOOST_CHECK( are_similars(ts6, 13.5, 0.00001) );
}


BOOST_AUTO_TEST_CASE ( test_timestamp_operators )
{
    Timestamp ts1  = 13.58;
    Timestamp ts11 = 13.58;
    Timestamp ts2 = 15;
        
    BOOST_CHECK( ts1 == ts11  );
    BOOST_CHECK( ts1 == 13.58 );
    BOOST_CHECK( ts1 != ts2   );
    BOOST_CHECK( ts1 != 5.3   );
    BOOST_CHECK( ts1 <  ts2   );
    BOOST_CHECK( ts1 <  55.3  );
    BOOST_CHECK( ts1 <= ts2   );
    BOOST_CHECK( ts1 <= ts11  );
    BOOST_CHECK( ts1 <= 55.3  );
    BOOST_CHECK( ts2 >  ts1   );
    BOOST_CHECK( ts2 >  5.3   );
    BOOST_CHECK( ts2 >= ts1   );
    BOOST_CHECK( ts1 >= ts11  );
    BOOST_CHECK( ts2 >= 5.3   );
    
    BOOST_CHECK( 55.3  >  ts1  );
    BOOST_CHECK( 55.3  >= ts1  );
    BOOST_CHECK( 13.58 >= ts1  );
    BOOST_CHECK(  5.3  <  ts2  );
    BOOST_CHECK(  5.3  <= ts2  );
    BOOST_CHECK(  15.0 <= ts2  );
    
    BOOST_CHECK( are_similars(ts1+ts2, 28.58, 0.00001) );
    BOOST_CHECK( are_similars(ts2-ts1,  1.42, 0.00001) );
    BOOST_CHECK( are_similars(ts1-ts2, -1.42, 0.00001) );
    
    BOOST_CHECK( are_similars(ts1   + 15.0,  28.58, 0.00001) );
    BOOST_CHECK( are_similars(13.58 + ts2,   28.58, 0.00001) );
    BOOST_CHECK( are_similars(ts2   - 13.58,  1.42, 0.00001) );
    BOOST_CHECK( are_similars(13.58 - ts2,   -1.42, 0.00001) );
}

BOOST_AUTO_TEST_CASE ( test_timestamp_helpers )
{
    Timestamp tsn = -6.3;
    Timestamp tss =  6.30001;
    
    Timestamp ts = abs(tsn);
    
    BOOST_CHECK( ts ==  6.3 );
    BOOST_CHECK( ts != -6.3 );
    
    BOOST_CHECK( are_similars(ts, tss    , 0.1) );
    BOOST_CHECK( are_similars(ts, 6.30001, 0.1) );
    

    Timestamp clk1 = clock_ts();
#ifdef MSVC // to avoid problems with clock precision in windows... 
    boost::this_thread::sleep(boost::posix_time::milliseconds(75));
#else
    boost::this_thread::sleep(boost::posix_time::milliseconds(50));
#endif
    Timestamp clk2 = clock_ts();
    
    BOOST_CHECK( clk1         != clk2 );
    BOOST_CHECK( clk1         < clk2 );
    BOOST_CHECK( clk1 + 0.050 <= clk2 );
    BOOST_CHECK( clk2 - clk1  >=  0.050); // diference should be at least and close to 50ms
    BOOST_CHECK( clk2 - clk1  <  60.0);   // but much less than 60s (e.g.)!!
}



BOOST_AUTO_TEST_SUITE_END ();
