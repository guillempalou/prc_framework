// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file readimage_tiff.test
//!
//! Tests for class ReadImage for TIFF support 
//!



// replaced by io_image.test, except for auto RGB<->GRAY conversion
#if 0

#include <imageplus/io/readimage.hpp>


BOOST_AUTO_TEST_SUITE ( ReadImageSuite_TIFF );

using namespace imageplus;
using namespace imageplus::io;

using namespace std;


BOOST_AUTO_TEST_CASE( ReadImageRGBfromRGBTest_TIFF)
{
    //
    // Default constructor
    //
    ReadImage rimg1;
    rimg1.open(string(TEST_DATA_PATH_R) + "/io/readimage_rgb_uint8.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageRGB<uint8> img1;
    rimg1 >> img1;
        
    BOOST_CHECK(img1.size_x() == 640);
    BOOST_CHECK(img1.size_y() == 240);
    
    // The following values has been obtained manually and checked visually
    BOOST_CHECK( img1(0)[0][0] == 25);    
    BOOST_CHECK( img1(1)[0][0] == 49);
    BOOST_CHECK( img1(2)[0][0] == 29);
    
    BOOST_CHECK( img1(0)[50][100] == 73);
    BOOST_CHECK( img1(1)[50][100] == 53);
    BOOST_CHECK( img1(2)[50][100] == 48);
    
    BOOST_CHECK( img1(0)[200][100] == 157);
    BOOST_CHECK( img1(1)[200][100] == 145);
    BOOST_CHECK( img1(2)[200][100] == 138);
    
    BOOST_CHECK( img1(0)[223][103] == 150);
    BOOST_CHECK( img1(1)[224][153] == 144);
    BOOST_CHECK( img1(2)[225][175] == 134);

    // Code to get the values
//    std::cout << (int)img1(0)[0][0] << std::endl;
//    std::cout << (int)img1(1)[0][0] << std::endl;
//    std::cout << (int)img1(2)[0][0] << std::endl;
//    
//    std::cout << (int)img1(0)[50][100] << std::endl;
//    std::cout << (int)img1(1)[50][100] << std::endl;
//    std::cout << (int)img1(2)[50][100] << std::endl;
//    
//    std::cout << (int)img1(0)[200][100] << std::endl;
//    std::cout << (int)img1(1)[200][100] << std::endl;
//    std::cout << (int)img1(2)[200][100] << std::endl;
//    
//    std::cout << (int)img1(0)[223][103] << std::endl;
//    std::cout << (int)img1(1)[224][153] << std::endl;
//    std::cout << (int)img1(2)[225][175] << std::endl;

    
    //
    // Constructor with filename
    //
    ReadImage rimg2(string(TEST_DATA_PATH_R) + "/io/readimage_rgb_uint8.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageRGB<uint8> img2;
    rimg2 >> img2;
    
    // checking against previous image    
    BOOST_CHECK(img2.size_x() == img1.size_x());
    BOOST_CHECK(img2.size_y() == img1.size_y());
    
    BOOST_CHECK( img2(0)[0][0] == img1(0)[0][0]);    
    BOOST_CHECK( img2(1)[0][0] == img1(1)[0][0]);
    BOOST_CHECK( img2(2)[0][0] == img1(2)[0][0]);
    
    BOOST_CHECK( img2(0)[50][100] == img1(0)[50][100]);
    BOOST_CHECK( img2(1)[50][100] == img1(1)[50][100]);
    BOOST_CHECK( img2(2)[50][100] == img1(2)[50][100]);
    
    BOOST_CHECK( img2(0)[200][100] == img1(0)[200][100]);
    BOOST_CHECK( img2(1)[200][100] == img1(1)[200][100]);
    BOOST_CHECK( img2(2)[200][100] == img1(2)[200][100]);
    
    BOOST_CHECK( img2(0)[223][103] == img1(0)[223][103]);
    BOOST_CHECK( img2(1)[224][153] == img1(1)[224][153]);
    BOOST_CHECK( img2(2)[225][175] == img1(2)[225][175]);
}


BOOST_AUTO_TEST_CASE( ReadImageRGBfromGRAYTest_TIFF)
{
    //
    // Default constructor
    //
    ReadImage rimg1;
    rimg1.open(string(TEST_DATA_PATH_R) + "/io/readimage_gray_uint8.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageRGB<uint8> img1;
    rimg1 >> img1;
    
    // Checking sizes
    BOOST_CHECK(img1.size_x() == 640);
    BOOST_CHECK(img1.size_y() == 240);
    
//        std::cout << (int)img1(0)[0][0] << std::endl;
//        std::cout << (int)img1(1)[0][0] << std::endl;
//        std::cout << (int)img1(2)[0][0] << std::endl;
//        
//        std::cout << (int)img1(0)[50][100] << std::endl;
//        std::cout << (int)img1(1)[50][100] << std::endl;
//        std::cout << (int)img1(2)[50][100] << std::endl;
//        
//        std::cout << (int)img1(0)[200][100] << std::endl;
//        std::cout << (int)img1(1)[200][100] << std::endl;
//        std::cout << (int)img1(2)[200][100] << std::endl;
//        
//        std::cout << (int)img1(0)[223][103] << std::endl;
//        std::cout << (int)img1(1)[224][153] << std::endl;
//        std::cout << (int)img1(2)[225][175] << std::endl;
    
    // Checking values
    BOOST_CHECK( img1(0)[0][0] == 40);    
    BOOST_CHECK( img1(1)[0][0] == 40);
    BOOST_CHECK( img1(2)[0][0] == 40);
    
    BOOST_CHECK( img1(0)[50][100] == 58);
    BOOST_CHECK( img1(1)[50][100] == 58);
    BOOST_CHECK( img1(2)[50][100] == 58);
    
    BOOST_CHECK( img1(0)[200][100] == 148);
    BOOST_CHECK( img1(1)[200][100] == 148);
    BOOST_CHECK( img1(2)[200][100] == 148);
    
    BOOST_CHECK( img1(0)[223][103] == 141);
    BOOST_CHECK( img1(1)[224][153] == 145);
    BOOST_CHECK( img1(2)[225][175] == 134);
    
    
    // Constructor with filename
    //
    ReadImage rimg2(string(TEST_DATA_PATH_R) + "/io/readimage_gray_uint8.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageRGB<uint8> img2;
    rimg2 >> img2;
            
    // Checking sizes
    BOOST_CHECK(img2.size_x() == img1.size_x());
    BOOST_CHECK(img2.size_y() == img1.size_y());
    
    // Checking values
    BOOST_CHECK( img2(0)[0][0] == img1(0)[0][0]);    
    BOOST_CHECK( img2(1)[0][0] == img1(1)[0][0]);
    BOOST_CHECK( img2(2)[0][0] == img1(2)[0][0]);
    
    BOOST_CHECK( img2(0)[50][100] == img1(0)[50][100]);
    BOOST_CHECK( img2(1)[50][100] == img1(1)[50][100]);
    BOOST_CHECK( img2(2)[50][100] == img1(2)[50][100]);
    
    BOOST_CHECK( img2(0)[200][100] == img1(0)[200][100]);
    BOOST_CHECK( img2(1)[200][100] == img1(1)[200][100]);
    BOOST_CHECK( img2(2)[200][100] == img1(2)[200][100]);
    
    BOOST_CHECK( img2(0)[223][103] == img1(0)[223][103]);
    BOOST_CHECK( img2(1)[224][153] == img1(1)[224][153]);
    BOOST_CHECK( img2(2)[225][175] == img1(2)[225][175]);
    
}


BOOST_AUTO_TEST_CASE( ReadImageGRAYfromRGBTest_TIFF)
{
    //
    // Default constructor
    //
    ReadImage rimg1;
    rimg1.open(string(TEST_DATA_PATH_R) + "/io/readimage_rgb_uint8.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageGray<uint8> img1;
    rimg1 >> img1;
    
    // Checking sizes
    BOOST_CHECK(img1.size_x() == 640);
    BOOST_CHECK(img1.size_y() == 240);
    
    // Checking values
    // TODO: Why these diferences beetween ImageMagick and boost::gil?? 
    //       Due to diferences rounding in RGB->Gray conversion (Y = 0,30*R+0,59*G+0,11*B)
    //       Due to different versions of ImageMagick?
#if USE_IMAGEMAGICK
    int32 MAGICK_TOLERANCE = 1;

    BOOST_CHECK( abs(img1(0)[0][0]     -  39) <= MAGICK_TOLERANCE );    
    BOOST_CHECK( abs(img1(0)[50][100]  -  58) <= MAGICK_TOLERANCE );
    BOOST_CHECK( abs(img1(0)[200][100] - 147) <= MAGICK_TOLERANCE );
    BOOST_CHECK( abs(img1(0)[223][103] - 140) <= MAGICK_TOLERANCE );
#else
    BOOST_CHECK( img1(0)[0][0]     ==  40);    
    BOOST_CHECK( img1(0)[50][100]  ==  58);
    BOOST_CHECK( img1(0)[200][100] == 148);
    BOOST_CHECK( img1(0)[223][103] == 141);
#endif
        
    
    //
    // Constructor with filename
    //
    ReadImage rimg2(string(TEST_DATA_PATH_R) + "/io/readimage_rgb_uint8.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageGray<uint8> img2;
    rimg2 >> img2;

    // Checking sizes
    BOOST_CHECK(img2.size_x() == img1.size_x());
    BOOST_CHECK(img2.size_y() == img1.size_y());
    
    // Checking values
    BOOST_CHECK( img2(0)[0][0]     == img1(0)[0][0]);    
    BOOST_CHECK( img2(0)[50][100]  == img1(0)[50][100]);
    BOOST_CHECK( img2(0)[200][100] == img1(0)[200][100]);
    BOOST_CHECK( img2(0)[223][103] == img1(0)[223][103]);
}

BOOST_AUTO_TEST_CASE( ReadImageGrayfromGRAYTest_TIFF)
{
    //
    // Default constructor
    //
    ReadImage rimg1;
    rimg1.open(string(TEST_DATA_PATH_R) + "/io/readimage_gray_uint8.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageGray<uint8> img1;
    rimg1 >> img1;
        
    // Checking sizes
    BOOST_CHECK(img1.size_x() == 640);
    BOOST_CHECK(img1.size_y() == 240);
    
    // Checking values
    BOOST_CHECK( img1(0)[0][0]     ==  40);    
    BOOST_CHECK( img1(0)[50][100]  ==  58);
    BOOST_CHECK( img1(0)[200][100] == 148);
    BOOST_CHECK( img1(0)[223][103] == 141);
    
    //
    // Constructor with filename
    //
    ReadImage rimg2(string(TEST_DATA_PATH_R) + "/io/readimage_gray_uint8.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageGray<uint8> img2;
    rimg2 >> img2;

    // Checking sizes
    BOOST_CHECK(img2.size_x() == img1.size_x());
    BOOST_CHECK(img2.size_y() == img1.size_y());
    
    // Checking values
    BOOST_CHECK( img2(0)[0][0]     == img1(0)[0][0]);    
    BOOST_CHECK( img2(0)[50][100]  == img1(0)[50][100]);
    BOOST_CHECK( img2(0)[200][100] == img1(0)[200][100]);
    BOOST_CHECK( img2(0)[223][103] == img1(0)[223][103]);
}


BOOST_AUTO_TEST_CASE( ReadImageGrayfromGRAYTest_TIFF_uin16)
{
    //
    // Default constructor
    //
    ReadImage rimg1;
    rimg1.open(string(TEST_DATA_PATH_R) + "/io/readimage_gray_uint16.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageGray<uint8> img1;
    rimg1 >> img1;
        
    // Checking sizes
    BOOST_CHECK(img1.size_x() == 256);
    BOOST_CHECK(img1.size_y() == 256);
    
    // Checking values
    BOOST_CHECK( img1(0)[0][0]     ==  40);    
    BOOST_CHECK( img1(0)[50][100]  ==  58);
    BOOST_CHECK( img1(0)[200][100] == 148);
    BOOST_CHECK( img1(0)[223][103] == 141);
    
    //
    // Constructor with filename
    //
    ReadImage rimg2(string(TEST_DATA_PATH_R) + "/io/readimage_gray_uint16.tiff");
    
    BOOST_CHECK(rimg1.format() == TIFF);
    
    ImageGray<uint8> img2;
    rimg2 >> img2;

    // Checking sizes
    BOOST_CHECK(img2.size_x() == img1.size_x());
    BOOST_CHECK(img2.size_y() == img1.size_y());
    
    // Checking values
    BOOST_CHECK( img2(0)[0][0]     == img1(0)[0][0]);    
    BOOST_CHECK( img2(0)[50][100]  == img1(0)[50][100]);
    BOOST_CHECK( img2(0)[200][100] == img1(0)[200][100]);
    BOOST_CHECK( img2(0)[223][103] == img1(0)[223][103]);
}




BOOST_AUTO_TEST_CASE( ReadImageExceptionsTest_TIFF)
{
    ReadImage rimg;
    BOOST_CHECK_THROW(rimg.open(string(TEST_DATA_PATH_R) + "/nofile.tiff")      , ImagePlusFileNotFound);
    BOOST_CHECK_THROW(ReadImage rimg2(string(TEST_DATA_PATH_R) + "/nofile.tiff"), ImagePlusFileNotFound);
    BOOST_CHECK_THROW(ReadImage rimg3(string(TEST_DATA_PATH_R) + "/io");        , ImagePlusFileError);
}


BOOST_AUTO_TEST_SUITE_END ();



#endif
