// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file volumeyuv.hpp
//!
//!  Interface for VolumeYUV class
//!

#ifndef IMAGEPLUS_CORE_VOLUMEYUV_HPP
#define IMAGEPLUS_CORE_VOLUMEYUV_HPP

#include <imageplus/core/volume.hpp>


namespace imageplus
{

    //!
    //! \brief base class to yuv volumes
    //!
    //! \author Javier Ruiz Hidalgo <j.ruiz@upc.edu>
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 10-1-2008
    //!
    //! Template T is the type of the data
    //!
    //! The declaration should be:
    //! \code
    //!    VolumeYUV<uint8> a(4,4,4);
    //! \endcode
    //!
    //! This creates an VolumeYUV of uint8 values with size 4x4x4.
    //!
    //! The access of a pixel is done as the ImaVol class:
    //! \code
    //!    a(Y_CHANNEL)[1][3][2] = 0 // Access to voxel (x=1,y=3,z=2) in the y channel
    //! \endcode
    //! or
    //! \code
    //!    a(U_CHANNEL)[1][3][2] = 0 // Access to voxel (x=1,y=3,z=2) in the u channel
    //! \endcode
    //!
    //! See file multiarray.hpp to a more detail explanation on access
    //!
    template<typename T>
    class VolumeYUV :public Volume <T,3>
    {
        public:

            //!
            //! \brief Default constructor
            //!
            VolumeYUV();

            //!
            //! \brief Constructor for 2 dimensions
            //!
            //! \param[in] x : X size of the volume
            //! \param[in] y : Y size of the volume
            //! \param[in] z : Z size of the volume
            //!
            VolumeYUV(uint64 x, uint64 y, uint64 z);

            //!
            //! \brief Copy constructor for ImaVol
            //!
            //! \param[in] copy : Creates a copy (including values) of this imavol
            //!
            VolumeYUV( const ImaVol<T,3,3>& copy );

            //!
            //! \brief Copy constructor for Volume
            //!
            //! \param[in] copy : Creates a copy (including values) of this volume
            //!
            VolumeYUV( const Volume<T,3>& copy );

            //!
            //! \brief Copy constructor for VolumeYUV
            //!
            //! \param[in] copy : Creates a copy (including values) of this volume
            //!
            VolumeYUV( const VolumeYUV<T>& copy );

            //!
            //! \brief Constructor with a vector of dimentions
            //!
            //! \param[in] dims: Vector of vectors with the dimension of each channel
            //!
            explicit VolumeYUV(const std::vector< std::vector<uint64> >& dims);

            //!
            //! \brief Destructor
            //!
            virtual ~VolumeYUV();

            //!
            //! \brief Assignment operator for ImaVol
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this imavol
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const VolumeYUV<T>& operator=( const ImaVol<T,3,3>& copy );

            //!
            //! \brief Assignment operator for class Volume
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this volume
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const VolumeYUV<T>& operator=( const Volume<T,3>& copy );

            //!
            //! \brief Assignment operator for class VolumeYUV
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this volume
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const VolumeYUV<T>& operator=( const VolumeYUV<T>& copy );

            //!
            //! \brief Assigment operator for values (fills the entire volume)
            //!
            //! \param[in] val : Value to fill all voxels
            //!
            //! \return Reference to value to a = b = 1; works
            //!
            const T& operator=( const T& val );

    };

}

#endif
