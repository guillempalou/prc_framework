// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file color_statistics.test
//!
//! Tests for color descriptors 
//!
#include <imageplus/descriptors/color/color_statistics.hpp> 

BOOST_AUTO_TEST_SUITE ( Descriptors_Colors_Statistics_Suite );

using namespace imageplus;
using namespace descriptors;


BOOST_AUTO_TEST_CASE( ColorMean_test)
{    
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 25;
    my_im_part[0][1] = 25;
    my_im_part[0][2] = 10;
    my_im_part[1][0] = 12;
    my_im_part[1][1] = 10;
    my_im_part[1][2] = 10;
    my_im_part[2][0] = 3;
    my_im_part[2][1] = 3;
    my_im_part[2][2] = 2;
    
    ImageRGB<uint8> my_image(3,3);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(0)[0][0] = 25;
    my_image(0)[2][0] = 2;
    my_image(0)[1][2] = 6;
    
    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);
    
    merge_regions(2, 3, 26, my_part);
    merge_regions(10, 26, 27, my_part);
    merge_regions(25, 12, 30, my_part);
    
    const ColorMean<ImageRGB<uint8> >& desc = calc_descriptor(new ColorMean<ImageRGB<uint8> >(), my_image, my_part[30]);

    boost::array<float64,  ImageRGB<uint8>::channels> exact_value;  
    
    exact_value[0]=9;
    exact_value[1]=2;
    exact_value[2]=3;

    BOOST_CHECK( desc == exact_value);
    
    exact_value[0]= (float64) 39/9;
    exact_value[1]=2;
    exact_value[2]=3;
    
    const ColorMean<ImageRGB<uint8> >& desc2 = calc_descriptor(new ColorMean<ImageRGB<uint8> >(), my_image);
    BOOST_CHECK( desc2 == exact_value);
    
    const ColorMean<ImageRGB<uint8> >& desc3 = calc_descriptor(new ColorMean<ImageRGB<uint8> >(), my_image, my_part[27]);
      
    exact_value[0]= (float64) 2;
    exact_value[1]=2;
    exact_value[2]=3;

    BOOST_CHECK( desc3 == exact_value);
}

BOOST_AUTO_TEST_CASE( ColorVariance_test)
{    
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 25;
    my_im_part[0][1] = 25;
    my_im_part[0][2] = 10;
    my_im_part[1][0] = 12;
    my_im_part[1][1] = 10;
    my_im_part[1][2] = 10;
    my_im_part[2][0] = 3;
    my_im_part[2][1] = 3;
    my_im_part[2][2] = 2;
    
    ImageRGB<uint8> my_image(3,3);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(0)[0][0] = 25;
    my_image(0)[2][0] = 2;
    my_image(0)[1][2] = 6;
    
    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);
    
    merge_regions(2, 3, 26, my_part);
    merge_regions(10, 26, 27, my_part);
    merge_regions(25, 12, 30, my_part);
    
    const ColorVariance<ImageRGB<uint8> >& desc = calc_descriptor(new ColorVariance<ImageRGB<uint8> >(), my_image, my_part[3]);

    boost::array<float64,  ImageRGB<uint8>::channels> exact_value;  
    
    exact_value[0]=(float64) 1/4;
    exact_value[1]=0;
    exact_value[2]=0;

    BOOST_CHECK( desc == exact_value);
  
    const ColorVariance<ImageRGB<uint8> >& desc2 = calc_descriptor(new ColorVariance<ImageRGB<uint8> >(), my_image, my_part[30]);

    exact_value[0]=(float64) 128;
    exact_value[1]=0;
    exact_value[2]=0;

    BOOST_CHECK( desc2 == exact_value);
}

BOOST_AUTO_TEST_CASE( ColorVariance_with_CollaborativeDescriptors_test)
{    
    ImagePartition<> my_im_part(3,3);
    my_im_part[0][0] = 25;
    my_im_part[0][1] = 25;
    my_im_part[0][2] = 10;
    my_im_part[1][0] = 12;
    my_im_part[1][1] = 10;
    my_im_part[1][2] = 10;
    my_im_part[2][0] = 3;
    my_im_part[2][1] = 3;
    my_im_part[2][2] = 2;
    
    ImageRGB<uint8> my_image(3,3);
    my_image(0) = 1;
    my_image(1) = 2;
    my_image(2) = 3;
    my_image(0)[0][0] = 25;
    my_image(0)[1][1] = 7;
   
    
    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);
    
    merge_regions(2, 3, 26, my_part);
    merge_regions(10, 26, 27, my_part);
    merge_regions(25, 12, 30, my_part);
    
    ColorVariance<ImageRGB<uint8> > desc;
	boost::array<float64,  ImageRGB<uint8>::channels> exact_value;  
    exact_value[0]=  (float64) 5;
    exact_value[1]= (float64) 0;
    exact_value[2]= (float64) 0;
    
    desc = calc_descriptor(new ColorVariance<ImageRGB<uint8> >(), my_image, my_part[27]);

    BOOST_CHECK( desc == exact_value);
}

BOOST_AUTO_TEST_SUITE_END ();



