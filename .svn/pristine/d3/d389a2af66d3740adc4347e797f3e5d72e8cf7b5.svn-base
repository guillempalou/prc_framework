// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file clipping.cpp
//!
//!  Implementation for Clipping operations on MultiArray and ImageGray objects
//!

#include <iostream>
#include <typeinfo>

#include <imageplus/core/clipping.hpp>

using namespace imageplus;


Clipping::Clipping() 
        : Filter<Clipping>("Clipping"), _lo(0.0), _hi(255.0), _lout(0.0), _hout(255.0)
{
}

Clipping::Clipping(float64 lo, float64 hi, float64 lout, float64 hout) throw (ImagePlusError) 
        : Filter<Clipping>("Clipping"), _lo(lo), _hi(hi), _lout(lout), _hout(hout)
{
}

Clipping::Clipping(float64 lo, float64 hi) throw (ImagePlusError) 
        : Filter<Clipping>("Clipping"), _lo(lo), _hi(hi), _lout(lo), _hout(hi)
{
}

template<typename T>
MultiArray<T,2> Clipping::implementation( const MultiArray<T,2>& ma) const throw (ImagePlusError)
{
    MultiArray<T,2> tmp(ma);
    T* ptmp  = tmp.data();

    for (uint64 i = 0; i < tmp.num_elements(); i++)
    {
        if (static_cast<float64>(ptmp[i]) < _lo)
        {
            ptmp[i] =  static_cast<T>( _lout );
        }
        else if (static_cast<float64>(ptmp[i]) > _hi)
        {
            ptmp[i] = static_cast<T>( _hout );
        }
    }

    return tmp;
}

template<typename T, std::size_t N, std::size_t D>
ImaVol<T,N,D> Clipping::implementation( const ImaVol<T,N,D>& iv) const throw (ImagePlusError)
{
    ImaVol<T,N,D> tmp(iv);


    for (uint64 j = 0; j < N; j++)
    {
        T* ptmp  = tmp(j).data();

        for (uint64 i = 0; i < tmp(j).num_elements(); i++)
        {
            if (static_cast<float64>(ptmp[i]) < _lo)
            {
                ptmp[i] =  static_cast<T>( _lout );
            }
            else if (static_cast<float64>(ptmp[i]) > _hi)
            {
                ptmp[i] = static_cast<T>( _hout );
            }
        }
    }

    return tmp;
}


// clipping instantiations
namespace imageplus
{

    template MultiArray<uint8,2>   Clipping::implementation(const MultiArray<uint8,2>&) const;
    template MultiArray<uint16,2>   Clipping::implementation(const MultiArray<uint16,2>&) const;
    template MultiArray<uint32,2>   Clipping::implementation(const MultiArray<uint32,2>&) const;
    template MultiArray<uint64,2>   Clipping::implementation(const MultiArray<uint64,2>&) const;
    template MultiArray<int8,2>   Clipping::implementation(const MultiArray<int8,2>&) const;
    template MultiArray<int16,2>   Clipping::implementation(const MultiArray<int16,2>&) const;
    template MultiArray<int32,2>   Clipping::implementation(const MultiArray<int32,2>&) const;
    template MultiArray<int64,2>   Clipping::implementation(const MultiArray<int64,2>&)  const;
    template MultiArray<float64,2> Clipping::implementation(const MultiArray<float64,2>&)  const;

    template ImaVol<uint8,1,2>    Clipping::implementation(const ImaVol<uint8,1,2>&) const;
    template ImaVol<uint16,1,2>    Clipping::implementation(const ImaVol<uint16,1,2>&) const;
    template ImaVol<uint32,1,2>    Clipping::implementation(const ImaVol<uint32,1,2>&) const;
    template ImaVol<uint64,1,2>    Clipping::implementation(const ImaVol<uint64,1,2>&) const;
    template ImaVol<int8,1,2>    Clipping::implementation(const ImaVol<int8,1,2>&) const;
    template ImaVol<int16,1,2>    Clipping::implementation(const ImaVol<int16,1,2>&) const;
    template ImaVol<int32,1,2>    Clipping::implementation(const ImaVol<int32,1,2>&) const;
    template ImaVol<int64,1,2>    Clipping::implementation(const ImaVol<int64,1,2>&) const;
    template ImaVol<float64,1,2>  Clipping::implementation(const ImaVol<float64,1,2>&) const;

    template ImaVol<uint8,3,2>    Clipping::implementation(const ImaVol<uint8,3,2>&) const;
    template ImaVol<uint16,3,2>    Clipping::implementation(const ImaVol<uint16,3,2>&) const;
    template ImaVol<uint32,3,2>    Clipping::implementation(const ImaVol<uint32,3,2>&) const;
    template ImaVol<uint64,3,2>    Clipping::implementation(const ImaVol<uint64,3,2>&) const;
    template ImaVol<int8,3,2>    Clipping::implementation(const ImaVol<int8,3,2>&) const;
    template ImaVol<int16,3,2>    Clipping::implementation(const ImaVol<int16,3,2>&) const;
    template ImaVol<int32,3,2>    Clipping::implementation(const ImaVol<int32,3,2>&) const;
    template ImaVol<int64,3,2>    Clipping::implementation(const ImaVol<int64,3,2>&) const;
    template ImaVol<float64,3,2>  Clipping::implementation(const ImaVol<float64,3,2>&) const;

    template ImaVol<uint8,1,3>    Clipping::implementation(const ImaVol<uint8,1,3>&) const;
    template ImaVol<uint16,1,3>    Clipping::implementation(const ImaVol<uint16,1,3>&) const;
    template ImaVol<uint32,1,3>    Clipping::implementation(const ImaVol<uint32,1,3>&) const;
    template ImaVol<uint64,1,3>    Clipping::implementation(const ImaVol<uint64,1,3>&) const;
    template ImaVol<int8,1,3>    Clipping::implementation(const ImaVol<int8,1,3>&) const;
    template ImaVol<int16,1,3>    Clipping::implementation(const ImaVol<int16,1,3>&) const;
    template ImaVol<int32,1,3>    Clipping::implementation(const ImaVol<int32,1,3>&) const;
    template ImaVol<int64,1,3>    Clipping::implementation(const ImaVol<int64,1,3>&) const;
    template ImaVol<float64,1,3>  Clipping::implementation(const ImaVol<float64,1,3>&) const;

    template ImaVol<uint8,3,3>    Clipping::implementation(const ImaVol<uint8,3,3>&) const;
    template ImaVol<uint16,3,3>    Clipping::implementation(const ImaVol<uint16,3,3>&) const;
    template ImaVol<uint32,3,3>    Clipping::implementation(const ImaVol<uint32,3,3>&) const;
    template ImaVol<uint64,3,3>    Clipping::implementation(const ImaVol<uint64,3,3>&) const;
    template ImaVol<int8,3,3>    Clipping::implementation(const ImaVol<int8,3,3>&) const;
    template ImaVol<int16,3,3>    Clipping::implementation(const ImaVol<int16,3,3>&) const;
    template ImaVol<int32,3,3>    Clipping::implementation(const ImaVol<int32,3,3>&) const;
    template ImaVol<int64,3,3>    Clipping::implementation(const ImaVol<int64,3,3>&) const;
    template ImaVol<float64,3,3>  Clipping::implementation(const ImaVol<float64,3,3>&) const;
}
