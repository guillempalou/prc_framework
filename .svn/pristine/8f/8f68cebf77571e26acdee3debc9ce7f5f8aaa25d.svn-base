// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file volumeyuv.cpp
//!
//! \author Javier Ruiz Hidalgo <j.ruiz@upc.edu>
//! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
//!
//!  Implementation for VolumeYUV class
//!

#include <imageplus/core/volumeyuv.hpp>

using namespace imageplus;

template<typename T>
VolumeYUV<T>::VolumeYUV()
        : Volume<T,3>()
{
}


template<typename T>
VolumeYUV<T>::VolumeYUV(uint64 x, uint64 y, uint64 z)
        : Volume<T,3>(x,y,z)
{
}


template<typename T>
VolumeYUV<T>:: VolumeYUV(const ImaVol<T,3,3>& copy)
        : Volume<T,3>(copy)
{
}


template<typename T>
VolumeYUV<T>::VolumeYUV(const Volume<T,3>& copy)
        : Volume<T,3>(copy)
{
}


template<typename T>
VolumeYUV<T>::VolumeYUV(const VolumeYUV<T>& copy)
        : Volume<T,3>(copy)
{
}


template<typename T>
inline VolumeYUV<T>::VolumeYUV(const std::vector< std::vector<uint64> >& dims)
        : Volume<T,3>(dims)
{
}

template<typename T>
VolumeYUV<T>::~VolumeYUV()
{
}


template<typename T>
const VolumeYUV<T>& VolumeYUV<T>::operator=( const ImaVol<T,3,3>& copy )
{
    (*this).Volume<T,3>::operator=( copy );

    return *this;
}

template<typename T>
const VolumeYUV<T>& VolumeYUV<T>::operator=( const Volume<T,3>& copy )
{
    (*this).Volume<T,3>::operator=( copy );

    return *this;
}

template<typename T>
const VolumeYUV<T>& VolumeYUV<T>::operator=( const VolumeYUV<T>& copy )
{
    (*this).Volume<T,3>::operator=( copy );

    return *this;
}


template<typename T>
const T& VolumeYUV<T>::operator=(const T& val)
{
    (*this).Volume<T,3>::operator=( val );

    return val;
}


// VolumeYUV instantiations
namespace imageplus
{

    template class VolumeYUV<uint8>;
    template class VolumeYUV<int64>;
    template class VolumeYUV<float64>;

}
