// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file model.test
//!
//! Tests for Model class
//!
#include <imageplus/machine_learning/svm/svm_adaptors.hpp>
#include <imageplus/semantic/model.hpp>
#include <imageplus/semantic/modelpart.hpp>


BOOST_AUTO_TEST_SUITE ( Semantic_Model_Suite );

using namespace imageplus;
using namespace imageplus::semantic;
using namespace imageplus::machine_learning::svm;
using namespace std;

BOOST_AUTO_TEST_CASE( model_test_file_uri )
{
	Model<SVM> model(1);

	// file URI (with 'file:' prefix)
	string file_uri = "file:/path/to/file.xml";
	model.set_file_uri(file_uri);
	BOOST_CHECK_EQUAL(model.get_file_uri(), file_uri);

	// file URI (without 'file:' prefix)
	// returned file URI should be the same as before
	string file_uri_short = "/path/to/file.xml";
	model.set_file_uri(file_uri_short);
	BOOST_CHECK_EQUAL(model.get_file_uri(), file_uri);
}

BOOST_AUTO_TEST_CASE( model_test )
{
	Model<SVM> model(1);

	// add two model parts
	ModelPart<SVM> model_part_1, model_part_2;
	SVM classifier1, classifier2;
	model_part_1.add_vd_classifier("ColorStructure", classifier1);
	model.add_part(model_part_1);
	model_part_2.add_vd_classifier("ColorStructure", classifier2);
	model.add_part(model_part_2);

	Model<SVM>::ModelPartsType model_parts = model.get_parts();
	BOOST_CHECK(model_parts.size() == 2);
}

BOOST_AUTO_TEST_CASE( model_test_cout )
{
	Model<SVM> model(1);

	// add two model parts
	ModelPart<SVM> model_part_1, model_part_2;
	SVM classifier1, classifier2;
	model_part_1.add_vd_classifier("ColorStructure", classifier1);
	model.add_part(model_part_1);
	model_part_2.add_vd_classifier("ColorStructure", classifier2);
	model.add_part(model_part_2);

	stringstream expected;
	expected << "Model of 'semantic class 1' parts:" << endl;
	expected << "- model part with classifiers for visual descriptors:";
	expected << " ColorStructure,"                                       << endl;
	expected << "- model part with classifiers for visual descriptors:";
	expected << " ColorStructure,"                                       << endl;

	stringstream obtained;
	obtained << model;

	BOOST_CHECK_EQUAL(obtained.str(), expected.str());
}


BOOST_AUTO_TEST_SUITE_END ();
