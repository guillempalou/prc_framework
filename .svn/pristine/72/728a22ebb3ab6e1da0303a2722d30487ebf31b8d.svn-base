/*!
 * \example hello_read_descriptors.cpp
 *
 * This is an example of how to read descriptors from XML file
 * 
 * See the \ref descriptors "Getting Started Guide" for more information.
 */
#include <imageplus/core.hpp>
#include <imageplus/io/readwritepartition.hpp>
#include <imageplus/io/xml_auxiliar.hpp>

// Include the file where the definition of the descriptor is available
#include <imageplus/descriptors/geometry/area.hpp>
#include <imageplus/descriptors/color/color_statistics.hpp>
#include <imageplus/descriptors/geometry/localization.hpp>

using namespace imageplus;
using namespace io;

// Own namespace
using namespace descriptors;

void hello_read_descriptors( )
{
#if USE_XML    
    /*  Recovering the same Partition of the previous example: */
    typedef RegionContour<Coord2D<int64> >  RegionType;  // Type of region we will work with

    /* This definition will be useful in this case*/
    typedef ImageRGB<uint8> InputType;
    
    /* XML filename from where the descriptors will be read*/
    std::string filename = "image-vd.xml";
    
    /* It will contain the uris related to the previous XML file ("ImageFile", "ThumbnailFile", "PartitionSearchFile", "BinaryPartitionTree") */
    std::map<std::string,std::string> uris;
    
    /* The XML header is read. The uris explained before are saved. It returns a pointer to the XML node corresponding to the "Image" node */
    XERCES_CPP_NAMESPACE::DOMNode* im_node = bpt_xml_read_header(filename,uris);
    
    Partition<RegionType> my_part;
    /* A ReadWritePartition object is created for reading the Partition from the disk files, in XML format, specifically from the BinaryPartitionTree URI */
    io::ReadWritePartition rwpart(uris.find("BinaryPartitionTree")->second, CHECK_IMAGE_PART, "xml");
    ImageRGB<uint8> my_image;
    /* The read operator is used for reading the Partition, which is saved in my_part, and the image associated to this partition is also saved*/
    rwpart.read(my_part, my_image);
    
    
    /* Let us start computing two simple descriptors, such as area and color mean and variance, from a specific region */
    RegionType& my_reg = my_part[2];
    
    /* First, we have to obtain the pointer to the XML node corresponding to the specific region*/
    XERCES_CPP_NAMESPACE::DOMNode *reg_node = bpt_xml_search_region(im_node, my_reg);
    
    /* The way to read descriptors is as follows: */
    read_descriptor(new Area(), reg_node, my_reg);
    read_descriptor(new ColorMeanVariance<InputType>(), reg_node, my_reg);
    
    /* We get the descriptors from my_reg by using the function get_descriptor. The identifier of the descriptor we want to get must be given. */
    Area my_area = get_descriptor<Area>("Area",my_reg);
    ColorMeanVariance<InputType> my_mean_var = get_descriptor<ColorMeanVariance<InputType> >("ColorMeanVariance",my_reg);
    
    /* We show the result */
    std::cout << "The area of region "           << my_reg.label() << " is: " << my_area                  << "." << std::endl;
    std::cout << "The color mean of region "     << my_reg.label() << " is: " << my_mean_var.value().mean << "." << std::endl;
    std::cout << "The color variance of region " << my_reg.label() << " is: " << my_mean_var.value().var  << "." << std::endl;
    
    /* If we need some descriptors that are maybe not found in the XML, then we can use the
     * read_or_calc_descriptor function to compute it. For example, if we want the OrientedBoundingBox
     * of the previous region, which is not computed in the XML, we can compute it as follows: */
    read_or_calc_descriptor(new OrientedBoundingBox<RegionType::CoordType>(), reg_node, my_image, my_reg);
    OrientedBoundingBox<RegionType::CoordType> my_obbox = get_descriptor<OrientedBoundingBox<RegionType::CoordType> >("OrientedBoundingBox",my_reg);
    std::cout << "The oriented bounding box of region " << my_reg.label() << " consists of the following vertices: " << std::endl;
    std::cout << "\t Left-Top Vertex: ("     << my_obbox.LTVertex[0] << "," << my_obbox.LTVertex[1] << ")" << std::endl;
    std::cout << "\t Left-Bottom Vertex: ("  << my_obbox.LBVertex[0] << "," << my_obbox.LBVertex[1] << ")" << std::endl;
    std::cout << "\t Right-Top Vertex: ("    << my_obbox.RTVertex[0] << "," << my_obbox.RTVertex[1] << ")" << std::endl;
    std::cout << "\t Right-Bottom Vertex: (" << my_obbox.RBVertex[0] << "," << my_obbox.RBVertex[1] << ")" << std::endl;
    
    /* If we want to read some descriptors over the whole partition, then we can do it as follows: */
    for(Partition<RegionType>::global_iterator it = my_part.begin(), it_end  = my_part.end(); 
          it != it_end; ++it)
    {
        reg_node = bpt_xml_search_region(im_node, *it);
        read_descriptor(new Area(), reg_node, *it);
        read_descriptor(new ColorMeanVariance<InputType>(), reg_node, *it);
    }
    /* Once we have all the descriptors read for all the partition, we maybe are interested in obtaining
     * a specific descriptor from a specific region, for example, the area for the region labeled with 5*/
    RegionType& my_reg2 = my_part[5];
    Area my_area2 = get_descriptor<Area>("Area",my_reg2);
    /* We show the results */
    std::cout << "The area of region " << my_reg2.label() << " is: " << my_area2 << "." << std::endl;
#endif
}


/*
 * 
 *  Expected output of the example
 * 
 * 

The area of region 2 is: 105.
The color mean of region 2 is:       223    225    233  .
The color variance of region 2 is:       2370    2382    1388  .
The oriented bounding box of region 2 consists of the following vertices: 
     Left-Top Vertex: (41.9031,29.0832)
     Left-Bottom Vertex: (51.436,31.9052)
     Right-Top Vertex: (46.5498,13.3866)
     Right-Bottom Vertex: (56.0827,16.2086)
The area of region 5 is: 104.
 
 * 
 * 
 */

