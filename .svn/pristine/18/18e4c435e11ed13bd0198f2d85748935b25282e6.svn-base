// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file norms.hpp
//!
//!  Norm operations
//!

#ifndef IMAGEPLUS_MATH_NUMERIC_NORMS_HPP
#define IMAGEPLUS_MATH_NUMERIC_NORMS_HPP


#include <imageplus/core.hpp>


namespace imageplus
{
    namespace math
    {
        namespace numeric
        {
            //!
            //! \brief Euclidean norm of a vector represented by a 1D MultiArray
            //!
            //! In \f$ \Re^n \f$ the norm of vector \f$ \mathbf{x} = [x_1, x_2, ..., x_n] \f$ is captured by the formula:\n
            //! \f$ \|\mathbf{x}\| := \sqrt{x_1^2 + \cdots + x_n^2}\f$.
            //! 
            //! \tparam T : Type of the data
            //!
            //! \param[in] in : Vector which norm has to be computed
            //!
            //! \return Euclidean norm of the vector
            //!
            //! \headerfile include/imageplus/math/numeric/norms.hpp <math/numeric/norms.hpp>
            //!
            //! \sa p_norm(), infinity_norm(), manhattan_norm()
            //!
            //! \author Adolfo López <alopez@gps.tsc.upc.edu>
            //!
            //! \date 04-02-2008
            //!
            template<typename T>
            float64 norm( const MultiArray<T,1>& in );
            
            //!
            //! \brief Euclidean norm of a vector represented by a 1D array
            //!
            //! In \f$ \Re^n \f$ the norm of vector \f$ \mathbf{x} = [x_1, x_2, ..., x_n] \f$ is captured by the formula:\n
            //! \f$ \|\mathbf{x}\| := \sqrt{x_1^2 + \cdots + x_n^2}\f$.
            //! 
            //! \tparam T : Type of the data
            //! \tparam S : length of the vector
            //!
            //! \param[in] in : Vector which norm has to be computed
            //!
            //! \return Euclidean norm of the vector
            //!
            //! \headerfile include/imageplus/math/numeric/norms.hpp <math/numeric/norms.hpp>
            //!
            //! \sa p_norm(), infinity_norm(), manhattan_norm()
            //!
            //! \author Marcel Alcoverro <marcel@gps.tsc.upc.edu>
            //!
            //! \date 15-10-2008
            //!
            template<typename T, std::size_t S>
            float64 norm( const boost::array<T,S>& in ) throw (ImagePlusError);
            
            //!
            //! \brief p-norm of a vector represented by a 1D MultiArray
            //!
            //! Let p≥1 be a real number. In \f$ \Re^n \f$, p-norm of vector \f$ \mathbf{x} = [x_1, x_2, ..., x_n] \f$ is given by:\n
            //! \f$ \|\emph{\textbf{x}}\|_p := \left( \sum_{i=1}^n |x_i|^p \right)^\frac{1}{p}. \f$\n
            //! Note that for p = 1 we get the manhattan norm and for p = 2 we get the Euclidean norm. 
            //! In these particular cases, equivalent functions manhattan_norm() and norm() are much more efficient.
            //!
            //! \tparam T : Type of the data
            //!
            //! \param[in] v1 : Vector (MultiArray) which p-norm has to be computed
            //! \param[in] p  : Real number (1 ≤ p < ∞) which defines the norm 
            //!
            //! \return p-norm of the vector
            //!
            //! \sa norm(), infinity_norm(), manhattan_norm()
            //!
            //! \headerfile include/imageplus/math/numeric/norms.hpp <math/numeric/norms.hpp>
            //!
            //! \author Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 09-08-2008
            //!
            template<typename T>
            float64 p_norm (const MultiArray<T,1>& v1, float64 p );
            
            //!
            //! \brief p-norm of a vector represented by a 1D boost::array
            //!
            //! Let p≥1 be a real number. In \f$ \Re^n \f$, p-norm of vector \f$ \mathbf{x} = [x_1, x_2, ..., x_n] \f$ is given by:\n
            //! \f$ \|\emph{\textbf{x}}\|_p := \left( \sum_{i=1}^n |x_i|^p \right)^\frac{1}{p}. \f$\n
            //! Note that for p = 1 we get the taxicab norm and for p = 2 we get the Euclidean norm
            //! In these particular cases, equivalent functions manhattan_norm() and norm() are much more efficient.
            //!
            //! \tparam T : Type of the data
            //! \tparam S : length of the vector
            //!
            //! \param[in] v1 : Vector (MultiArray) which p-norm has to be computed
            //! \param[in] p  : Real number (1 ≤ p < ∞) which defines the norm 
            //!
            //! \return p-norm of the vector
            //!
            //! \sa norm(), infinity_norm(), manhattan_norm()
            //!
            //! \headerfile include/imageplus/math/numeric/norms.hpp <math/numeric/norms.hpp>
            //!
            //! \author Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 09-08-2008
            //!
            template<typename T, std::size_t S>
            float64 p_norm(const boost::array<T,S>& v1, float64 p );

            //!
            //! \brief Manhattan norm (aka taxicab norm) of a vector represented by a 1D MultiArray
            //!
            //! In \f$ \Re^n \f$, manhattan norm of vector \f$ \mathbf{x} = [x_1, x_2, ..., x_n] \f$ is given by:\n
            //! \f$ \|\emph{\textbf{x}}\|_p :=  \sum_{i=1}^n |x_i| \f$\n
            //!
            //! \tparam T : Type of the data
            //!
            //! \param[in] v1 : Vector (MultiArray) which norm has to be computed
            //!
            //! \return Manhattan norm of the vector
            //!
            //! \sa norm(), infinity_norm(), p_norm()
            //!
            //! \headerfile include/imageplus/math/numeric/norms.hpp <math/numeric/norms.hpp>
            //!
            //! \author Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 09-08-2008
            //!
            template<typename T>
            float64 manhattan_norm (const MultiArray<T,1>& v1 );

            //!
            //! \brief Manhattan norm (aka taxicab norm) of a vector represented by a boost::array
            //!
            //! In \f$ \Re^n \f$, manhattan norm of vector \f$ \mathbf{x} = [x_1, x_2, ..., x_n] \f$ is given by:\n
            //! \f$ \|\emph{\textbf{x}}\|_p :=  \sum_{i=1}^n |x_i| \f$\n
            //!
            //! \tparam T : Type of the data
            //! \tparam S : length of the vector
            //!
            //! \param[in] v1 : Vector (boost::array) which norm has to be computed
            //!
            //! \return Manhattan norm of the vector
            //!
            //! \sa norm(), infinity_norm(), p_norm()
            //!
            //! \headerfile include/imageplus/math/numeric/norms.hpp <math/numeric/norms.hpp>
            //!
            //! \author Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 09-08-2008
            //!
            template<typename T, std::size_t S>
            float64 manhattan_norm (const boost::array<T,S>& v1 );
            
            //!
            //! \brief Infinity norm (aka maximum norm) of a vector represented by a 1D MultiArray
            //!
            //! In \f$ \Re^n \f$, infinity norm of vector \f$ \mathbf{x} = [x_1, x_2, ..., x_n] \f$ is given by:\n
            //! \f$ \|\emph{\textbf{x}}\|_\infty := \max \left(|x_1|, \ldots ,|x_n| \right) \f$
            //!
            //! \tparam T : Type of the data
            //!
            //! \param[in] v1 : Vector (MultiArray) which norm has to be computed
            //!
            //! \return infinity norm of the vector
            //!
            //! \sa norm(), manhattan_norm(), p_norm()
            //!
            //! \headerfile include/imageplus/math/numeric/norms.hpp <math/numeric/norms.hpp>
            //!
            //! \author Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 09-08-2008
            //!
            template<typename T>
            T infinity_norm (const MultiArray<T,1>& v1);
            
            //!
            //! \brief Infinity norm (aka maximum norm) of a vector represented by a 1D boost::array
            //!
            //! In \f$ \Re^n \f$, infinity norm of vector \f$ \mathbf{x} = [x_1, x_2, ..., x_n] \f$ is given by:\n
            //! \f$ \|\emph{\textbf{x}}\|_\infty := \max \left(|x_1|, \ldots ,|x_n| \right) \f$
            //!
            //! \tparam T : Type of the data
            //! \tparam S : length of the vector
            //!
            //! \param[in] v1 : Vector (boost::array) which norm has to be computed
            //!
            //! \return infinity norm of the vector
            //!
            //! \sa norm(), manhattan_norm(), p_norm()
            //!
            //! \headerfile include/imageplus/math/numeric/norms.hpp <math/numeric/norms.hpp>
            //!
            //! \author Ramon Morros <ramon.morros@upc.edu>
            //!
            //! \date 09-08-2008
            //!
            template<typename T, std::size_t S>
            T infinity_norm (const boost::array<T,S>& v1);
        }
    }
}


#endif // IMAGEPLUS_MATH_NUMERIC_NORMS_HPP
