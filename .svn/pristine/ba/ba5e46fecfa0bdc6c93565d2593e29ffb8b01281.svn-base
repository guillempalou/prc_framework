/*
 * descriptor_base.hpp
 *
 *  Created on: Aug 29, 2012
 *      Author: guillem
 */

#ifndef DESCRIPTOR_BASE_HPP_
#define DESCRIPTOR_BASE_HPP_

#include <Eigen/Dense>

namespace imageplus {
	namespace descriptors {

	//! forward declaration
	class DescriptorManager;

	//! Base class of all the Visual Descriptors, allowing us to store pointers to this class but
	//!  running the derived class functions thanks to the virtual functions.
	//!
	//! \author Jordi Pont <jordi.pont@upc.edu>, Guillem Palou <guillem.palou@upc.edu>
	//!
	//! \date 10-9-2009
	class DescriptorBase
	{
	public:

		//! base structur for descriptors using parameters
		struct BaseDescriptorParameters {
		};

		typedef DescriptorManager			ManagerType;
		typedef BaseDescriptorParameters 	Parameters;

		//! function returning the id given a set of parameters
		//! \param[in] pars: parameters to the descriptors
		static const std::string id(const Parameters& pars = default_parameters()) {
			return "base_descriptor";
		}

		//! Default parameters for descriptors
		static const Parameters default_parameters() {
			return Parameters();
		}

		//! Constructor receiving its id and whether the descriptor is recursive or not
		//!
		//! \param[in] recursive : Boolean that defines whether the descriptor is recursive or not
		DescriptorBase(bool recursive=false) : _recursive(recursive) {
		};

		//! Virtual destructor
		~DescriptorBase(){};

		//! Returns whether the descriptor can be computed recursively.
		//! \return True if the descriptor may be computed recursively and false if not.
		virtual bool is_recursive() const
		{
			return _recursive;
		};

		//! \brief Calculates the area of a region, given a pair of iterators.
		//!
		//! \param[in] first      : Iterator to the beginning of the region
		//! \param[in] last       : Iterator to the end of the region
		//! \param[in] peer_descs : Pointer to CollaborativeDescriptors, in principle is never 0x0 but it is a good idea to ASSERT it
		template< class SignalModel, class RegionModel>
		void calculate(SignalModel& signal, RegionModel& region, const Parameters& pars, typename DescriptorBase::ManagerType* manager) {
			return;
		}

		//!
		//! \brief Calculates recursively area of the father region given the sons ones.
		//!
		//! \param[in] son1_descs : CollaborativeDescriptors of the son 1
		//! \param[in] son2_descs : CollaborativeDescriptors of the son 2
		//! \param[in] peer_descs : Pointer to CollaborativeDescriptors, in principle is never 0x0 but it is a good idea to ASSERT it
		template<class SignalModel, class RegionModel, class ChildContainer>
		void recursive_calculate(SignalModel& signal, RegionModel& region, ChildContainer& childs, const Parameters& pars, typename DescriptorBase::ManagerType* manager) {
			throw;
		}

	protected:

		//! recursive
		bool _recursive;

	public:
	  EIGEN_MAKE_ALIGNED_OPERATOR_NEW

	};

	}
}


#endif /* DESCRIPTOR_BASE_HPP_ */
