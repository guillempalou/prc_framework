// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \example client_video_fwd_example.hpp
//!
//!  Client to read a video and forward it.
//!  This client can be used as a template for many other clients.
//!
//
// FIRST of all you have to define:
//
// - The NAME of your client
//   - This is mandatory
//   - Avoid the character '-', use always '_' 
// - The GROUP where your client belong
//   - This is optional
//   - Comment the second definition to not group your client
//
#define IMAGEPLUS_CLIENT_CONFIG_NAME  client_video_fwd_example
#define IMAGEPLUS_CLIENT_CONFIG_GROUP examples

//
// AFTER the previous definitions you can include the tool_config 
// header and others
//
// Note that it is mandatory to first define the name (and group)
// and later on include this header.
//
#include <imageplus/toolbox/client_config.hpp>
#include <imageplus/core.hpp>
#include <imageplus/core/timestamp.hpp>

#include <imageplus/foreground2d/pixel_model.hpp>
#include <imageplus/foreground2d/onegaussian_pm.hpp>
#include <imageplus/foreground2d/onegaussian_ss.hpp>
#include <imageplus/foreground2d/foreground2d.hpp>
#include <imageplus/foreground2d/frame_model.hpp>

#include <iostream>

//
// This is not mandatory, but useful (in a client!)
//
using namespace imageplus;
using namespace imageplus::foreground2d;
using namespace std;

//
//
// From now on you should use the IMAGEPLUS_CLIENT_CONFIG_* macros
// for a better configuration.
//
// We have two parts:
//
// (1) Fill up the configuration and information of your tool:
//
// - Brief description of your tool
// - Detailed descritption of your tool
// - Parameters Configuration: 
//   - Declararion of all your parameters
//   - Default values for the parameters
//   - Configuration: 
//     - Select which paramteres are options, which flags and which arguments
//     - Description for all the parameters
//     - Optional abreviatures for options and flags 
// - Call the "read" functions for all the parameters (DO NOT FORGET THIS!)
//
// (2) The code of "main" function of your tool
//
// You should use the IMAGEPLUS_CLIENT_CONFIG_* macros in the following 
// order to do all the previous tasks: 
//
IMAGEPLUS_CLIENT_CONFIG_BRIEF()
    
    "Here you should write a brief description of your client...\n";

IMAGEPLUS_CLIENT_CONFIG_DESCRIPTION()

    "This is the detailed description of your client.         \n" +
    "What it does, how, why...                                \n" +
    "                                                         \n"+
    "You can add blank lines as the previous and the next one.\n" +
    "                                                         \n"+
    "\tAlso indented lines like this...                       \n" +
    "                                                         \n"+
    "This information will be shown in the help message.      \n";


IMAGEPLUS_CLIENT_CONFIG_PARAMETERS()

    //
    // Here you have to declare all your configuration parameters:
    // options, flags and arguments.


    // OPTIONS:
    uint32 my_opt;

    // FLAGS:
    bool my_flag;
    
    // ARGUMENTS
    //string my_arg;
    
    // FLOWS
    VideoInputFlow  video_in;
    VideoOutputFlow video_out;
    
IMAGEPLUS_CLIENT_CONFIG_DEFAULT_VALUES()

    //
    // Here you should assign default values to your OPTIONS
    //
    my_opt = 10;
    my_flag=false;
    
    
IMAGEPLUS_CLIENT_CONFIG_OPTIONS()

    //
    // Here you have to define your OPTIONS, with a description 
    // and an optional abreviature
    //
    CLIENT_CONFIG_OPTION( my_opt , "this option is only to show how to have an option"  );
    
IMAGEPLUS_CLIENT_CONFIG_FLAGS()

    //
    // Here you have to define your FLAGS, with a description 
    // and an optional abreviature
    //
    CLIENT_CONFIG_FLAG( my_flag , "this flag is only to show how to have an flag"  );

IMAGEPLUS_CLIENT_CONFIG_ARGUMENTS()

    //
    // Here you have to define your ARGUMENTS with a description. 
    // You should put them in the DESIRED ORDER in the command-line
    //
    // Note that an argument that is a vector should be the last and no more
    // argument can be added later. Think: is impossible to parser arguments 
    // afters an unknown size vector!
    // If you need more than one vector, use "options" instead of arguments.
    //   
    //CLIENT_CONFIG_ARGUMENT( my_arg, "this argument is only to show how to have an argument" );


IMAGEPLUS_CLIENT_CONFIG_FLOWS()

    //
    // Here you have to define your FLOWS
    //
    CLIENT_CONFIG_VIDEO_IN ( video_in  );
    CLIENT_CONFIG_VIDEO_OUT( video_out );

IMAGEPLUS_CLIENT_CONFIG_READ_PARAMETERS()

    //
    // Here you have to read all your parameters
    //
    // DO NOT FORGET THIS STEP!!
    //  
    IMAGEPLUS_CLIENT_CONFIG_READ( my_opt  );
    IMAGEPLUS_CLIENT_CONFIG_READ( my_flag );
    //IMAGEPLUS_CLIENT_CONFIG_READ( my_arg  );

    
    
IMAGEPLUS_CLIENT_CONFIG_METADATAS()
    
    //
    // Here you can get the metadatas from the input flows
    // And you MUST set the metadata of your output flows
    //
    // Note that from now on you can access to the previously 
    // defined config parameters with the "cfg" object.
    //
    VideoMetadata metadata = cfg.video_in->getMetadata();
    cfg.video_out->setMetadata( metadata );

        
//
// This is the "main" function of your client.
//
// You can access to all your parameters (options, flags, and arguments)
// with the "cfg" object (see the code.)
//
// Run the client with "--help" to see your configuration.
//
IMAGEPLUS_CLIENT_CONFIG_MAIN()
{
    //
    // Here you can declare and initialize the variables that
    // will be used in the main loop
    // 
    ImageRGB<uint8>  rgb(metadata.width, metadata.height);
    ImageGray<uint8> mask(metadata.width, metadata.height);
    FrameModel<OneGaussianSS> fmodelPM(metadata.width,metadata.height);
    
    //fmodelPM.set_pixel_models(OneGaussianSS(20, 0.01, 2.5*2.5));
    fmodelPM.set_pixel_models(OneGaussianSS(50, 0.01, 4*4, 0.7, 1.2,40));
    

    //init method object
    Foreground2D foreground2d(20,0, metadata.width,metadata.height);

    //
    // Also you should define pointers to the flow buffer
    //
    const uint8* buffer_in;
          uint8* buffer_out;

    std::size_t bsize = metadata.width*metadata.height*3;

    
    CLIENT_CONFIG_WHILE_RUNNING() 
    {
        //
        // This is the main loop of you client.
        // You can think on it as a "while(running)" loop.
        // It ends only when the SmartFlow server send the "kill" signal
        // or if you execute "running=false"
        //
        
        // Get buffers from flows;
        cfg.video_in ->get_buffer(buffer_in );
        cfg.video_out->get_buffer(buffer_out);
        
        //
        // Fills up an image from the input buffer
        //
        //rgb.import_from(buffer_in, metadata.width, metadata.height, RGB);
        import_from(rgb, buffer_in, bsize, RGB);

        
        //
        // Here you can process the rgb image some-how...
        //
       //foreground2d.segmentation<OneGaussianPM,3>(fmodelPM,rgb, mask);
        foreground2d.segmentation<OneGaussianSS,3>(fmodelPM,rgb, mask);
       
       rgb = to_rgb(mask);

        //
        // Fills up the output buffer
        //
        //rgb.export_to(buffer_out, metadata.width, metadata.height, RGB);
        export_to(rgb, buffer_out, bsize, RGB);
        
        //
        // Send and release the output buffer
        //
        Timestamp ts = clock_ts();
        send_buffer(cfg.video_out, ts);
    }

    // End client
    return (0);
}


//
// This last line is mandatory!
//
IMAGEPLUS_CLIENT_CONFIG_END()

































#if 0
// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \example client_config_example.hpp
//!
//!  Example of a simple client that forwards flows
//!
//
// FIRST of all you have to define:
//
// - The NAME of your tool
//   - This is mandatory
//   - Avoid the character '-', use always '_' 
// - The GROUP where your tool belong
//   - This is optional
//   - Comment the second definition to not group your tool
//
#define IMAGEPLUS_CLIENT_CONFIG_NAME  client_example
#define IMAGEPLUS_CLIENT_CONFIG_GROUP examples

//
// AFTER the previous definitions you can include the tool_config 
// header and others
//
// Note that it is mandatory to first define the name (and group)
// and later on include this header.
//
#include <imageplus/toolbox/client_config.hpp>

#include <iostream>
#include <sf/utils/timestamp.hpp>

//
// This is not mandatory, but useful (in a tool!)
//
using namespace std;
using namespace imageplus;


//
//
// From now on you should use the IMAGEPLUS_CLIENT_CONFIG_* macros
// for a better configuration.
//
// We have two parts:
//
// (1) Fill up the configuration and information of your tool:
//
// - Brief description of your tool
// - Detailed descritption of your tool
// - Parameters Configuration: 
//   - Declararion of all your parameters
//   - Default values for the parameters
//   - Configuration: 
//     - Select which paramteres are options, which flags and which arguments
//     - Description for all the parameters
//     - Optional abreviatures for options and flags 
// - Call the "read" functions for all the parameters (DO NOT FORGET THIS!)
//
// (2) The code of "main" function of your tool
//
// You should use the IMAGEPLUS_CLIENT_CONFIG_* macros in the following 
// order to do all the previous tasks: 
//
IMAGEPLUS_CLIENT_CONFIG_BRIEF()
    
    "Here you should write a brief description ofyour tool...\n";

IMAGEPLUS_CLIENT_CONFIG_DESCRIPTION()

    "This is the detailed description of your tool.           \n" +
    "What it does, how, why...                                \n" +
    "                                                         \n"+
    "You can add blank lines as the previous and the next one.\n" +
    "                                                         \n"+
    "\tAlso indented lines like this...                       \n" +
    "                                                         \n"+
    "This information will be shown in the help message.      \n";


IMAGEPLUS_CLIENT_CONFIG_PARAMETERS()

    //
    // Here you have to declare all your configuration parameters:
    // options, flags and arguments.


	// my options
	string deviceName;
	int useEveryNFrame;
	string calibration_file;
	int width;
	int height;
	
	
	// my flows
	VideoOutputFlow video_fwd;
	VideoInputFlow  video;
	
	DataOutputFlow  ts_fwd;
	DataInputFlow   ts_in;

IMAGEPLUS_CLIENT_CONFIG_DEFAULT_VALUES()

    //
    // Here you should assign default values to your parameters
    //
    // Note that vectors can be initialized with some values.
    //

	// default values
	useEveryNFrame   = 1;
        
IMAGEPLUS_CLIENT_CONFIG_OPTIONS()

    //
    // Here you have to define your OPTIONS, with a description 
    // and an optional abreviature
    //

	// add options and flags
    CLIENT_CONFIG_OPTION_ABV ( useEveryNFrame ,  "to discard some frames", 'N');


IMAGEPLUS_CLIENT_CONFIG_FLAGS()

    //
    // Here you have to define your FLAGS, with a description 
    // and an optional abreviature
    //

    //CLIENT_CONFIG_FLAG_ABV  ( debug , "Debug mode on" , 'd' );

IMAGEPLUS_CLIENT_CONFIG_ARGUMENTS()

    //
    // Here you have to define your ARGUMENTS with a description. 
    // You should put them in the DESIRED ORDER in the command-line
    //
    // Note that an argument that is a vector should be the last and no more
    // argument can be added later. Think: is impossible to parser arguments 
    // afters an unknown size vector!
    // If you need more than one vector, use "options" instead of arguments.
    //
         
//    CLIENT_CONFIG_ARGUMENT( out_file     , "Name of the output file" );
//    CLIENT_CONFIG_ARGUMENT( input_files  , "The list of input files" );



IMAGEPLUS_CLIENT_CONFIG_FLOWS()

	// Add the output flow and register the kill callback.
	CLIENT_CONFIG_VIDEO_OUT(video_fwd);
	CLIENT_CONFIG_VIDEO_IN (video);
	CLIENT_CONFIG_DATA_OUT(ts_fwd, Timestamp);
	CLIENT_CONFIG_DATA_IN(ts_in, Timestamp);


IMAGEPLUS_CLIENT_CONFIG_READ_PARAMETERS()

    //
    // Here you have to read all your parameters
    //
    // DO NOT FORGET THIS STEP!!
    //
        
    IMAGEPLUS_CLIENT_CONFIG_READ( useEveryNFrame   );
    
    
//METADATAS

IMAGEPLUS_CLIENT_CONFIG_METADATAS()

    VideoMetadata videoMetadata;
    
    // Define output metadata flow as RGB
    videoMetadata.imageFormat = SFC::VideoMetadata::packedRGB;
    videoMetadata.dataType    = SFC::VideoMetadata::type_8u;
    videoMetadata.frameRate   = 25/cfg.useEveryNFrame;
    videoMetadata.width       = cfg.width;
    videoMetadata.height      = cfg.height;
    strncpy(videoMetadata.calibrationFile, cfg.calibration_file.c_str(), 255 );

    //CLIENT_CONFIG_GET_METADATA(video)
    VideoMetadata  video_metadata = cfg.video->getMetadata();
    cfg.video_fwd->setMetadata( video_metadata );
    //videoOutputFlow->setMetadata( video_metadata );




    // Initialize flows
    //CLIENT_CONFIG_SET_METADATA(video_fwd, video_metadata);
    //CLIENT_CONFIG_SET_METADATA(video_fwd, flowname_metadata);
    
        
//
// This is the "main" function of your tool.
//
// You can access to all your parameters (options, flags, and arguments)
// with the "cfg" object (see the code.)
//
// Run the exemple with "--help" to see your configuration.
//
IMAGEPLUS_CLIENT_CONFIG_MAIN()
{   
    // Variables
    timespec ts = systemTime(); // Assignament done to avoid warning in compilation process

    
    // Initialize Mainloop variables
    size_t imageSize = cfg.video->getMetadata().width*cfg.video->getMetadata().height*3;

    // Main loop
    uint64 frame_number = 0;
    
    const uint8*     from;
    const Timestamp* ts_in_data; 
    uint8*       to; 
    Timestamp*   ts_to;

    CLIENT_CONFIG_WHILE_RUNNING()
    {

        // Get output flow buffers: tsFlow buffer and videoBuffer
        //SFC::get_buffer(cfg.ts_in,  ts_in_data);
    	cfg.ts_in->get_buffer(ts_in_data);
        cfg.video->get_buffer(from);
        
        cfg.ts_fwd->get_buffer(ts_to);
        cfg.video_fwd->get_buffer(to);

        
        *ts_to = *ts_in_data;
        
        std::cout << "TS IN:  " << *ts_in_data << std::endl; 
        std::cout << "TS OUT: " << *ts_to      << std::endl;
        
        for (size_t i = 0; i < imageSize; i+=3) 
        {
            // TODO: CHECK IF WE ARE USING RGB OR BGR
            *to++   = *from++;
            *to++   = *from++;
            *to++   = *from++;
        }

        //ts = systemTime();

        // TODO: Set the timestamp flow
        
        // Send flows
        //video_fwd_test.send ( *ts_to );
        send_buffer(cfg.video_fwd, *ts_to);
        send_buffer(cfg.ts_fwd, *ts_to);
        //ts_fwd.send ( *ts_to );
        
        frame_number++;
    }

    // End client
//    cap.stop();
    return (0);
}


//
// This last line is mandatory!
//
IMAGEPLUS_CLIENT_CONFIG_END()
#endif
