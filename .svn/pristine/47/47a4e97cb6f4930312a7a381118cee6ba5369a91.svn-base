/*!
 * \example hello_imavol_colors.cpp
 *
 * This is an example of how to use the ImaVol's Colors.
 * 
 * See the \ref imavol "Getting Started Guide" for more information.
 */
#include <imageplus/core.hpp>

using namespace imageplus;

void hello_imavol_colors( ImageGray <int16>    & gry, 
                          ImageRGB  <uint8>    & rgb,
                          Volume    <uint8,1>  & vol )
{
    /*
     * Colors are not independent classes, but nested ones.
     * Every ImaVol class has its Color type.
     * This Color type depends on the data type (T) and the number of channels (N) of the ImaVol.
     * Note that it doesn't depend on the dimension (D).  
     * 
     * You can define Color variables this way:
     */
    ImageGray<int16>   ::Color  gry_color; 
    ImageRGB <uint8>   ::Color  rgb_color;
    Volume   <uint8,1> ::Color  vol_color;

    /*
     * We need coords to access to the Color of a pixel/voxel
     */ 
    Coord2D<>  c2d(1,0);   // 2D coord for image access
    Coord3D<>  c3d(0,1,0); // 3D coord for volume access

    /*
     * Reading ImaVol Colors
     */
    gry_color = gry(c2d);  // using 2D coord
    rgb_color = rgb(c2d);
    vol_color = vol(c3d);  // using 3D coord

    /*
     * Writting ImaVol Colors
     */
    gry(c2d)    =  5; // gray images have only one component
    rgb(c2d)[0] = 10; // writing the red component
    rgb(c2d)[1] = 15; // writing the blue component
    rgb(c2d)[2] = 20; // writing the green component
    vol(c3d)[0] = 50; // again only one component, but explicitally

    /*
     * We can set Color variables by the same way: 
     */
    gry_color[0] =  3; // only one component, but explicit
    rgb_color[0] = 13; // red component
    rgb_color[1] = 23; // green component
    rgb_color[2] = 33; // blue component
    vol_color    = 55; // only one component

    /*
     * Reading and writing Colors
     */
    gry(c2d) = gry(c2d) + gry_color;
    rgb(c2d) = rgb(c2d) + rgb_color;
    vol(c3d) = vol(c3d) + vol_color;
}
