// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file svd.test
//!
//!  SVD tests
//!

#include <iostream>
#include <imageplus/core.hpp>
#include <imageplus/math/numeric/svd.hpp>

// to be able to use the identity matrix
#include <imageplus/math/numeric/matrices.hpp>

#include <imageplus/math/numeric/products.hpp>
#include <imageplus/math/numeric/transformations.hpp>

//#include <boost/test/floating_point_comparison.hpp>

BOOST_AUTO_TEST_SUITE ( svdSuite );

using namespace std;
using namespace imageplus;
using namespace imageplus::math::numeric;

BOOST_AUTO_TEST_CASE ( SVD_class )
{
    uint64 size = 3;

    MultiArray<float64,2> M(size, size);

    M[0][0] = static_cast<float64>(5.0);
    M[1][0] = static_cast<float64>(4.0);
    M[2][0] = static_cast<float64>(7.0);
    M[0][1] = static_cast<float64>(2.0);
    M[1][1] = static_cast<float64>(5.0);
    M[2][1] = static_cast<float64>(8.0);
    M[0][2] = static_cast<float64>(3.0);
    M[1][2] = static_cast<float64>(6.0);
    M[2][2] = static_cast<float64>(9.0);


    // Call constructor
    SVD svd(M);


    MultiArray<float64,2> U  = svd.u();
    MultiArray<float64,2> V  = svd.v();
    MultiArray<float64,1> sv = svd.singular_values();
    MultiArray<float64,2> S  = svd.s();

    float64 n2 = svd.norm2();
    float64 co = svd.cond();
    uint64  rn = svd.rank();

    BOOST_CHECK_EQUAL(rn, static_cast<uint64>(3));


    BOOST_CHECK_CLOSE(sv[0], 17.392791875822073, 1e-7);
    BOOST_CHECK_CLOSE(sv[1], 2.5331019213146022,  1e-7);
    BOOST_CHECK_CLOSE(sv[2], 0.27237000673712308, 1e-7);

    BOOST_CHECK_CLOSE(n2, 17.392791875822073, 1e-7);
    BOOST_CHECK_CLOSE(co, 63.857221594184793, 1e-7);

    //
    // Check that U,V are orthogonal. U*U' = I, V*V' = I
    //

    MultiArray<float64,2> UUT;
    MultiArray<float64,2> VVT;
    MultiArray<float64,2> id;

    UUT = prod(U,trans(U));
    VVT = prod(V,trans(V));
    id  = imageplus::math::numeric::identity_matrix<float64>(size);

    for (uint64 j = 0; j < size; j++)
    {
        for (uint64 i = 0; i < size; i++)
        {
            if (id[i][j] == 0)
            {
                BOOST_CHECK_SMALL(UUT[i][j], 1e-7);
                BOOST_CHECK_SMALL(VVT[i][j], 1e-7);
            }
            else
            {
                BOOST_CHECK_CLOSE(id[i][j], UUT[i][j], 1e-7);
                BOOST_CHECK_CLOSE(id[i][j], VVT[i][j], 1e-7);
            }
        }
    }

    // Test that M = U*S*V'

    MultiArray<float64,2> res;
    res = prod(prod(U,S),trans(V));

    for (uint64 j = 0; j < size; j++)
    {
        for (uint64 i = 0; i < size; i++)
        {
            BOOST_CHECK_SMALL(M[i][j]-res[i][j], 1e-7);
        }
    }


#   if 0
    std::cout << "U" << std::endl;
    std::cout << U;
    std::cout << std::endl;

    std::cout << "V" << std::endl;
    std::cout << V;
    std::cout << std::endl;

    std::cout << "sv" << std::endl;
    std::cout << sv;
    std::cout << std::endl;

    std::cout << "S" << std::endl;
    std::cout << S;
    std::cout << std::endl;

    std::cout << "Norm2 = " << n2 << std::endl;
    std::cout << "Cond  = " << co << std::endl;
    std::cout << "Rank  = " << rn << std::endl;

    std::cout << "Res" << std::endl;
    std::cout << res;
    std::cout << std::endl;


    std::cout << "M" << std::endl;
    std::cout << M;
    std::cout << std::endl;

#   endif



}
    
BOOST_AUTO_TEST_SUITE_END ();
