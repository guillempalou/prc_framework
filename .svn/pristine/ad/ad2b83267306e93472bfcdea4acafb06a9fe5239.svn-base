// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file imageyuv422.hpp
//!
//!  Interface for ImageYUV422 class
//!

#ifndef IMAGEPLUS_CORE_IMAGEYUV422_HPP
#define IMAGEPLUS_CORE_IMAGEYUV422_HPP

#include <imageplus/core/image.hpp>


namespace imageplus
{

    //!
    //! \brief base class to yuv422 images
    //!
    //! \author Javier Ruiz Hidalgo <j.ruiz@upc.edu>
    //!
    //! \date 20-3-2008
    //!
    //! Template T is the type of the data
    //!
    //! The declaration should be:
    //! \code
    //!    ImageYUV422<uint8> a(4,4);
    //! \endcode
    //!
    //! This creates an ImageYUV422 of uint8 values with size 4x4 in the Y channel and 4x2 in the U and V channels.
    //!
    //! The access of a pixel is done as the ImaVol class:
    //! \code
    //!    a(Y_CHANNEL)[1][3] = 0 // Access to pixel (x=1,y=3) in the y channel
    //! \endcode
    //! or
    //! \code
    //!    a(U_CHANNEL)[0][1] = 0 // Access to pixel (x=0,y=1) in the u channel
    //! \endcode
    //!
    //! See file multiarray.hpp to a more detail explanation on access
    //!
    template<typename T>
    class ImageYUV422 :public Image <T,3>
    {
        public:

            //!
            //! \brief Default constructor
            //!
            ImageYUV422();

            //!
            //! \brief Constructor for 2 dimensions
            //!
            //! \param[in] x : X size of the image
            //! \param[in] y : Y size of the image
            //!
            ImageYUV422(uint64 x, uint64 y);

            //!
            //! \brief Copy constructor for ImaVol
            //!
            //! \param[in] copy : Creates a copy (including values) of this imavol
            //!
            ImageYUV422( const ImaVol<T,3,2>& copy ) throw (ImagePlusError);

            //!
            //! \brief Copy constructor for Image
            //!
            //! \param[in] copy : Creates a copy (including values) of this image
            //!
            ImageYUV422( const Image<T,3>& copy ) throw (ImagePlusError);

            //!
            //! \brief Copy constructor for ImageYUV422
            //!
            //! \param[in] copy : Creates a copy (including values) of this image
            //!
            ImageYUV422( const ImageYUV422<T>& copy ) throw (ImagePlusError);

            //!
            //! \brief Constructor with a vector of dimensions
            //!
            //! \param[in] dims: Vector of vectors with the dimension of each channel
            //!
            explicit ImageYUV422(const std::vector< std::vector<uint64> >& dims)  throw (ImagePlusError);

            //!
            //! \brief Destructor
            //!
            virtual ~ImageYUV422();

            
            //!
            //! \brief Resize method using (width, height)
            //!
            //! \param[in] width  : X size of the ImageYUV422
            //! \param[in] height : Y size of the ImageYUV422
            //!
            //! \note "width" must be even in YUV422 images
            //!
            void resize ( uint64 width, uint64 height );
            
            
            //!
            //! \brief Resize method using a vector of dimensions
            //!
            //! \param[in] dims: Vector of vectors with the dimension of each channel
            //!
            //! \note The first value of the vector (width) must be even in YUV422 images
            //!
            void resize ( const std::vector< std::vector<uint64> >& dims );
            
            
            //!
            //! \brief Assignment operator for ImaVol
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this imavol
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const ImageYUV422& operator=( const ImaVol<T,3,2>& copy ) throw (ImagePlusError);

            //!
            //! \brief Assignment operator for Image
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this Image
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const ImageYUV422& operator=( const Image<T,3>& copy ) throw (ImagePlusError);

            //!
            //! \brief Assignment operator for ImageYUV422
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this ImageYUV
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const ImageYUV422& operator=( const ImageYUV422& copy ) throw (ImagePlusError);

            //!
            //! \brief Assigment operator for values (fills the entire image)
            //!
            //! \param[in] val : Value to fill all pixel
            //!
            //! \return Reference to value to a = b = 1; works
            //!
            const T& operator=( const T& val );

            //!
            //! \brief Color space
            //!
            //! \return Color space
            //!
            virtual
            ColorSpace color_space() const
            {
                return YUV422;
            }

    };

}

#endif
