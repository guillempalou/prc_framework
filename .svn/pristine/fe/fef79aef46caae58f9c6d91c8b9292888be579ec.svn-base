/*
 * connected_components.hpp
 *
 *  Created on: Nov 9, 2011
 *      Author: guillem
 */

#ifndef CONNECTED_COMPONENTS_HPP_
#define CONNECTED_COMPONENTS_HPP_

#include <imageplus/math/graphs/graph.hpp>
#include <boost/graph/connected_components.hpp>
#include <boost/graph/strong_components.hpp>

namespace imageplus {
	namespace math {
		namespace graphs {

		//! Class to compute the number of connected components of an undirected graph (DAG).
		//! \param Graph : BoostGraph class
	template<class Graph>
	class ConnectedComponents {

		//! Node type
		typedef typename Graph::Node Node;

		//! Edge type
		typedef typename Graph::Edge Edge;

	public:

		//! Compute the number of connected components
		//! \param[in] g : graph
		//! \return the number of connected components
		int32 calculate(Graph& g) {
			// Compute the Dijkstra
			uint32 N = g.num_nodes();

			_components.resize(N);

			int32 num_components = boost::connected_components(g.graph(), &_components[0]);
			return num_components;
		}


		std::vector<int64> components() {
			return _components;
		}

	private:

		//! component vector
		std::vector<int64> _components;
	};

	//! Class to compute the number of connected components of an directed/bidirectional graph (DAG).
	//! \param Graph : BoostGraph class
	template<class Graph>
	class StronglyConnectedComponents {

		//! Node type
		typedef typename Graph::Node Node;

		//! Edge type
		typedef typename Graph::Edge Edge;

	public:

		//! Compute the number of strongly connected components
		//! \param[in] g : graph
		//! \return the number of strongly connected components
		int32 calculate(Graph& g) {
			// Compute the Dijkstra
			uint32 N = g.num_nodes();

			_components.resize(N);

			int32 num_components = boost::strong_components(g.graph(), &_components[0]);
			return num_components;
		}


	private:

		//! components
		std::vector<int64> _components;
	};

		}
	}
}


#endif /* CONNECTED_COMPONENTS_HPP_ */
