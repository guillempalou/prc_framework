##############################################################################
#                                                                            #
# Copyright (C) 2007 UPC All Rights Reserved.                                #
#                                                                            #
# See COPYRIGHT file enclosed with this distribution.                        #
#                                                                            #
##############################################################################

##############################################################################
#                                                                            #
#  ImagePlus Build System - Modules Build                                    #
#                                                                            #
# This script is executed for each module. It creates all the targets from   #
# sources and tests, it means.all the objects, the module library and tests. # 
#                                                                            #
# The build system is based on SCons (http://www.scons.org/), so also this   #
# this script.                                                               #
#                                                                            #
#  CREATED BY :  Albert Gil, UPC (agil@gps.tsc.upc.edu)                      #
#                                                                            #
##############################################################################

Import('*')

# To get the list of files
import glob
import os

# Configure the test environment
testEnv = moduleEnv.Clone()

testEnv['CPPDEFINES'] += ['TEST_DATA_PATH_R=\"\\\"'+env['TEST_DATA_PATH_R']+'\\\"\"']
testEnv['CPPDEFINES'] += ['TEST_DATA_PATH_W=\"\\\"'+env['TEST_DATA_PATH_W']+'\\\"\"']
testEnv['CPPPATH'   ] += [testPath]
testEnv['LIBS'      ] =  [dependences] + testEnv['LIBS'] # order is relevant!!
testEnv['LIBPATH'   ] += [dependencesPaths]

# TODO: Remove this line because incPath already added in modulesBuildFile
#testEnv['CPPPATH'   ] += [incPath] + [testPath]

# Add boost headers
if testEnv['USE_BOOST_TEST_HEADERS']:
	testEnv['CPPDEFINES'] += ['USE_BOOST_TEST_HEADERS']

# To avoid conflicts with boost warnings:
oldFlags = testEnv['CCFLAGS' ]
testEnv['CCFLAGS' ] = []
for flag in oldFlags:
	if flag != '-Werror':
		testEnv['CCFLAGS' ] += [flag]

##
## Get the list of tests
##
tests = list()
testFiles = glob.glob(str(Dir(testPath)) + os.sep + '*.cpp')
for test in testFiles:
	test = test.replace('.cpp','')
	test = test.replace(str(Dir(testPath))+ os.sep,'')
	tests += [test] 

##
## Build and run the tests:
##
##   - Create and configure the build environment for tests
##   - Create the module library (only tests should link with them)
##   - Objects from test sources
##   - Binaries from test objects
##

# Test objects and executables
moduleTests = list()
for testName in tests:
	obj = testEnv.Object  ( objPath + testName, testPath + testName + '.cpp'        )
	bin = testEnv.Program ( binPath + testName, obj )
	moduleTests.extend(bin)
	
	# REMOVED BECAUSE BOOTS.TEST IS NOT MORE LINKED AS AN OBJECT, BUT AS A LIBRARY
	# Add Boost.Test library only if we need to link against
#	if env['USE_BOOST_TEST_HEADERS']:
#		bin = testEnv.Program ( binPath + testName, obj )
#	else:
#		bin = testEnv.Program ( binPath + testName, obj + [env['static_boosttest_lib']] )
#	moduleTests.extend(bin)

##
## Install the tests (executables) to the main tests directory
##
## Note that this is used to get the 'scons tests' target
##
installedTests = Install( testsPath + 'bin/' + env['buildsuffix'] + module, moduleTests )


##
## Run tests.
##
## These tests are only run if the build environment variable 'runtests' is on.
##
## For each test we define a virtual target ('testName.run').
## This target is never created, so the tests are always run.
##
testsList = moduleTests

if env['runtests'] == True:
	for test in moduleTests:
		testName = str(test)
		log_level = 'warning'
		if env['verbose']:
			log_level='test_suite'
		
		run_test_cmd = env['run_cmd'] + ' \"' + testName + '\" --report_level=short --log_level='+log_level
		testEnv.Command(testName+'.run', test, run_test_cmd )

##
## Return the installed tests
##
Return('installedTests')
