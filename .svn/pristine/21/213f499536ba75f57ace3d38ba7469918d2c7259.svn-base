// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file multiarray_comparison.test
//!
//! Tests for multiarray comparisons 
//!

#include <iostream>
#include <imageplus/core.hpp>

BOOST_AUTO_TEST_SUITE ( MultiarrayComparisonSuite );

using namespace imageplus;

typedef boost::mpl::list<bool,uint8,int16,int64,float64> DataTypes;
typedef boost::mpl::list<uint8,int16,int64,float64>      DataTypes2;


BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_notsame, T, DataTypes)
{
	MultiArray<T,2> ma1(10,10);
	MultiArray<T,2> ma2(10,10);
	MultiArray<T,2> ma3(10,10);

	MultiArray<T,2> *pma4;

    T val1 = static_cast<T>(10);
	

    ma1 = val1;
    ma2 = val1;
    ma3 = ma1;
    pma4 = &ma1;


	BOOST_CHECK_THROW(notsame(ma1, ma1), ImagePlusError);	
	BOOST_CHECK_NO_THROW(notsame(ma1, ma2));	
	BOOST_CHECK_NO_THROW(notsame(ma3, ma1));	
	BOOST_CHECK_THROW(notsame(*pma4, ma1), ImagePlusError);	
}

BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_compatible, T, DataTypes)
{
	MultiArray<T,2> ma1(10,10);
	MultiArray<T,2> ma2(5,5);
	MultiArray<T,2> ma3(10,10);
	
    T val1 = static_cast<T>(9);
    T val2 = static_cast<T>(7);


    ma1 = val1;
    ma2 = val1;
    ma3 = val2;

	BOOST_CHECK_NO_THROW(compatible(ma1, ma1));	
	BOOST_CHECK_THROW(compatible(ma1, ma2), ImagePlusError);	
	BOOST_CHECK_NO_THROW(compatible(ma1, ma3));	
}

BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_ccount1, T, DataTypes2)
{
	MultiArray<T,2> ma1(3,3);
	MultiArray<T,2> ma2(3,3);
	
    ma1[0][0] = static_cast<T>(5.0);
    ma1[1][0] = static_cast<T>(4.0);
    ma1[2][0] = static_cast<T>(7.0);
    ma1[0][1] = static_cast<T>(2.0);
    ma1[1][1] = static_cast<T>(5.0);
    ma1[2][1] = static_cast<T>(8.0);
    ma1[0][2] = static_cast<T>(3.0);
    ma1[1][2] = static_cast<T>(6.0);
    ma1[2][2] = static_cast<T>(9.0);

    ma2[0][0] = static_cast<T>(5.0);
    ma2[1][0] = static_cast<T>(4.0);
    ma2[2][0] = static_cast<T>(2.0);
    ma2[0][1] = static_cast<T>(2.0);
    ma2[1][1] = static_cast<T>(5.0);
    ma2[2][1] = static_cast<T>(9.0);
    ma2[0][2] = static_cast<T>(3.0);
    ma2[1][2] = static_cast<T>(0.0);
    ma2[2][2] = static_cast<T>(9.0);


    BOOST_CHECK_EQUAL (comparison_count (ma1, ma2, "=="), static_cast<uint64>(6));
    BOOST_CHECK_EQUAL (comparison_count (ma1, ma2, "!="), static_cast<uint64>(3));
    BOOST_CHECK_EQUAL (comparison_count (ma1, ma2, ">="), static_cast<uint64>(8));
    BOOST_CHECK_EQUAL (comparison_count (ma1, ma2, ">"),  static_cast<uint64>(2));

    BOOST_CHECK_EQUAL (comparison_count (ma1, static_cast<T>(5), "=="),  static_cast<uint64>(2));
    BOOST_CHECK_EQUAL (comparison_count (ma1, static_cast<T>(10), ">"),  static_cast<uint64>(0));

	MultiArray<bool,2> ma3(3,3);
	MultiArray<bool,2> ma4(3,3);

    ma3 = true;
    ma4 = true;

    ma3[0][0] = false;
    ma3[0][1] = false;
    ma3[0][2] = false;
    ma3[1][0] = false;
    
    ma4[0][0] = false;

    BOOST_CHECK_EQUAL (comparison_count (ma3, ma4, "=="),  static_cast<uint64>(6));
    BOOST_CHECK_EQUAL (comparison_count (ma3, ma4, "!="),  static_cast<uint64>(3));

    BOOST_CHECK_EQUAL (comparison_count (ma3, true, "=="),  static_cast<uint64>(5));
    BOOST_CHECK_EQUAL (comparison_count (ma4, true, "!="),  static_cast<uint64>(1));

}


BOOST_AUTO_TEST_CASE_TEMPLATE( testcase_macompare, T, DataTypes2)
{
	MultiArray<T,2> ma1(3,3);
	MultiArray<T,2> ma2(3,3);

	MultiArray<T,2> ma3(3,3);
	MultiArray<T,2> ma4(3,3);

	MultiArray<T,2> ma_res1(3,3);
	MultiArray<T,2> ma_res2(3,3);
	
    ma1[0][0] = static_cast<T>(5.0);
    ma1[1][0] = static_cast<T>(4.0);
    ma1[2][0] = static_cast<T>(7.0);
    ma1[0][1] = static_cast<T>(2.0);
    ma1[1][1] = static_cast<T>(5.0);
    ma1[2][1] = static_cast<T>(8.0);
    ma1[0][2] = static_cast<T>(3.0);
    ma1[1][2] = static_cast<T>(6.0);
    ma1[2][2] = static_cast<T>(9.0);

    ma2[0][0] = static_cast<T>(5.0);
    ma2[1][0] = static_cast<T>(4.0);
    ma2[2][0] = static_cast<T>(2.0);
    ma2[0][1] = static_cast<T>(2.0);
    ma2[1][1] = static_cast<T>(5.0);
    ma2[2][1] = static_cast<T>(9.0);
    ma2[0][2] = static_cast<T>(3.0);
    ma2[1][2] = static_cast<T>(0.0);
    ma2[2][2] = static_cast<T>(9.0);


	MultiArray<bool,2> ma1b(3,3);
    ma1b[0][0] = false;
    ma1b[1][0] = false;
    ma1b[2][0] = false;
    ma1b[0][1] = false;
    ma1b[1][1] = false;
    ma1b[2][1] = true;
    ma1b[0][2] = false;
    ma1b[1][2] = false;
    ma1b[2][2] = true;

	MultiArray<bool,2> ma2b(3,3);
    ma2b[0][0] = false;
    ma2b[1][0] = false;
    ma2b[2][0] = true;
    ma2b[0][1] = false;
    ma2b[1][1] = false;
    ma2b[2][1] = false;
    ma2b[0][2] = false;
    ma2b[1][2] = true;
    ma2b[2][2] = true;

    ma3 = static_cast<T>(1);
    ma4 = static_cast<T>(0);

    ma_res1 = static_cast<T>(1);
    ma_res1[2][0] = static_cast<T>(0);
    ma_res1[2][1] = static_cast<T>(0);
    ma_res1[1][2] = static_cast<T>(0);


    ma_res2       = static_cast<T>(0);
    ma_res2[2][1] = static_cast<T>(1);
    ma_res2[2][2] = static_cast<T>(1);


    // In-place versions of these algorithms are also tested because the implementation of 
    // the non-inplace versions call the inplace functions.
    BOOST_CHECK_EQUAL (ma_compare (ma1, ma2,               "==", ma3,               ma4),               ma_res1);
    BOOST_CHECK_EQUAL (ma_compare (ma1, ma2,               "==", static_cast<T>(1), static_cast<T>(0)), ma_res1);
    BOOST_CHECK_EQUAL (ma_compare (ma1, static_cast<T>(8), ">=", ma3,               ma4),               ma_res2);
    BOOST_CHECK_EQUAL (ma_compare (ma1, static_cast<T>(8), ">=", static_cast<T>(1), static_cast<T>(0)), ma_res2);
    BOOST_CHECK_EQUAL (ma_compare (ma1, static_cast<T>(8), ">=", static_cast<T>(1), ma4),               ma_res2);


    // Test with T1 != T2
    BOOST_CHECK_EQUAL (ma_compare (ma1b, ma2b, "==", ma3,               ma4),               ma_res1);
    BOOST_CHECK_EQUAL (ma_compare (ma1b, ma2b, "==", static_cast<T>(1), static_cast<T>(0)), ma_res1);
    BOOST_CHECK_EQUAL (ma_compare (ma1b, true, "==", ma3,               ma4),               ma_res2);
    BOOST_CHECK_EQUAL (ma_compare (ma1b, true, "==", static_cast<T>(1), static_cast<T>(0)), ma_res2);
    BOOST_CHECK_EQUAL (ma_compare (ma1b, true, "==", static_cast<T>(1), ma4),               ma_res2);



    BOOST_CHECK_EQUAL (comparison_count (ma1, ma2, "!="), static_cast<uint64>(3));
    BOOST_CHECK_EQUAL (comparison_count (ma1, ma2, ">="), static_cast<uint64>(8));
    BOOST_CHECK_EQUAL (comparison_count (ma1, ma2, ">"),  static_cast<uint64>(2));

    BOOST_CHECK_EQUAL (comparison_count (ma1, static_cast<T>(5), "=="),  static_cast<uint64>(2));
    BOOST_CHECK_EQUAL (comparison_count (ma1, static_cast<T>(10), ">"),  static_cast<uint64>(0));




}

BOOST_AUTO_TEST_SUITE_END ();
