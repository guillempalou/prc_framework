// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file import_export.hpp
 */

#ifndef IMAGEPLUS_CORE_IMPORT_EXPORT_HPP
#define IMAGEPLUS_CORE_IMPORT_EXPORT_HPP

#include <imageplus/core/imagergb.hpp>
#include <imageplus/core/imagegray.hpp>
#include <imageplus/core/imageyuv422.hpp>

namespace imageplus
{
    /*!
     * Modes to save the color values in a buffer.
     *
     * See \ref import_export.test as a usage example.
     *
     * \sa import_from(), export_to()
     */
    enum ImportExportMode
    {
        RGB,    //!< Buffer data: RGBRGBRGB... 3 values per color
        BGR,    //!< Buffer data: BGRBGRBGR... 3 values per color
        RGBA,   //!< Buffer data: RGBARGBARGBA... 4 values per color
        GRAY,   //!< Buffer data: GrayGrayGray... 1 value per color
        YUYV,   //!< Buffer data: YUYVYUYVYUYV... 2 values per color. See <a href="http://www.fourcc.org/">fourcc</a> for a description of YUV packed formats
        UYVY    //!< Buffer data: UYVYUYVYUYVY... 2 values per color. See <a href="http://www.fourcc.org/">fourcc</a> for a description of YUV packed formats
    };

    /*!
     * Imports the data in the buffer to an ImageRGB
     *
     * See \ref import_export.test as a test-example.
     *
     * \tparam T : the data type of the ImageRGB and the buffer
     *
     * \param[out] ima    : the ImageRGB to import the data from the buffer, it should be previously allocated
     *                      with the correct dimensions.
     * \param[in]  buffer : a buffer storing pixel colors in an order given by 'mode' parameter
     * \param[in]  size   : the size of the buffer in bytes (it depends of the image dimensions and the mode)
     * \param[in]  mode   : ImportExportMode of the buffer data, supported modes: RGB, BGR, RGBA.
     *
     * \throws ImagePlusNotImplemented if mode is not supported
     *
     * \relatedalso ImageRGB
     *
     * \see ImageRGB, ImportExportMode
     *
     * \author 2008-2010 - Marcel Alcoverro  - Creation
     * \author 2011-07   - Albert Gil Moreno - Review and moved outside the class
     *
     * \todo use T1 and T2 templates to make it more generic?
     */
    template<typename T, typename U>
    void import_from( ImageRGB<T>&    ima,
                      const U*        buffer,
                      std::size_t     size,
                      ImportExportMode mode) throw (ImagePlusNotImplemented);

    /*!
     * Export an ImageRGB to a preallocated buffer in a specific ImportExportMode
     *
     * See \ref import_export.test as a test-example.
     *
     * \tparam T : the data type of the ImageRGB and the buffer
     *
     * \param[in]  ima    : the ImageRGB to export the data to the buffer
     * \param[out] buffer : the buffer to save the ImageRGB pixels in the mode order
     * \param[in]  size   : the allocated size of the buffer in bytes (it depends of the image dimensions and the mode)
     * \param[in]  mode   : ImportExportMode of the buffer data, supported modes: RGB, BGR, RGBA.
     *                      Note that in RGBA mode, the Alpha channel is set to 1.
     *
     * \throws ImagePlusNotImplemented if mode is not supported
     *
     * \warning Please note that the buffer allocation should be done externally (by the function's caller)
     *          The allocated size in bytes should be width*height*sizeof(T)*3, or *4 in RGBA mode.
     *
     * \relatedalso ImageRGB
     *
     * \see ImageRGB, ImportExportMode
     *
     * \author 2008-2010 - Marcel Alcoverro  - Creation
     * \author 2011-07   - Albert Gil Moreno - Review and moved outside the class
     *
     * \todo use T1 and T2 templates to make it more generic?
     */
    template<typename T, typename U>
    void export_to( const ImageRGB<T>& ima,
                    U*                 buffer,
                    std::size_t        size,
                    ImportExportMode    mode ) throw (ImagePlusNotImplemented);

    /*!
     * Imports the data in the buffer to an ImageGray
     *
     * See \ref import_export.test as a test-example.
     *
     * \tparam T : the data type of the ImageGray and the buffer
     *
     * \param[out] ima    : the ImageGray to import the data from the buffer, it should be previously allocated
     *                      with the correct dimensions.
     * \param[in]  buffer : a buffer storing pixel colors in an order given by 'mode' parameter
     * \param[in]  size   : the size of the buffer in bytes (it depends of the image dimensions and the mode)
     * \param[in]  mode   : ImportExportMode of the buffer data, supported modes: GRAY.
     *
     * \throws ImagePlusNotImplemented if mode is not supported
     *
     * \relatedalso ImageGray
     *
     * \see ImageGray, ImportExportMode
     *
     * \author 2008-2010 - Marcel Alcoverro  - Creation
     * \author 2011-07   - Albert Gil Moreno - Review and moved outside the class
     *
     * \todo use T1 and T2 templates to make it more generic?
     */
    template<typename T>
    void import_from( ImageGray<T>&   ima,
                      const T*        buffer,
                      std::size_t     size,
                      ImportExportMode mode = GRAY ) throw (ImagePlusNotImplemented);

    /*!
     * Export an ImageGray to a preallocated buffer in a specific ImportExportMode
     *
     * See \ref import_export.test as a test-example.
     *
     * \tparam T : the data type of the ImageGray and the buffer
     *
     * \param[in]  ima    : the ImageGray to export the data to the buffer
     * \param[out] buffer : the buffer to save the ImageGray pixels in the mode order
     * \param[in]  size   : the allocated size of the buffer in bytes (it depends of the image dimensions and the mode)
     * \param[in]  mode   : ImportExportMode of the buffer data, supported modes: GRAY.
     *
     * \throws ImagePlusNotImplemented if mode is not supported
     *
     * \warning Please note that the buffer allocation should be done externally (by the function's caller)
     *          The allocated size in bytes should be width*height*sizeof(T).
     *
     * \relatedalso ImageGray
     *
     * \see ImageGray, ImportExportMode
     *
     * \author 2008-2010 - Marcel Alcoverro  - Creation
     * \author 2011-07   - Albert Gil Moreno - Review and moved outside the class
     *
     * \todo use T1 and T2 templates to make it more generic?
     */
    template<typename T>
    void export_to( const ImageGray<T>& ima,
                    T*                  buffer,
                    std::size_t         size,
                    ImportExportMode     mode = GRAY ) throw (ImagePlusNotImplemented);

    /*!
     * Imports the data in the buffer to an ImageYUV422
     *
     * See \ref import_export.test as a test-example.
     *
     * \tparam T : the data type of the ImageYUV422 and the buffer
     *
     * \param[out] ima    : the ImageYUV422 to import the data from the buffer, it should be previously allocated
     *                      with the correct dimensions.
     * \param[in]  buffer : a buffer storing pixel colors in an order given by 'mode' parameter
     * \param[in]  size   : the size of the buffer in bytes (it depends of the image dimensions and the mode)
     * \param[in]  mode   : ImportExportMode of the buffer data, supported modes: YUYV, UYVY.
     *
     * \throws ImagePlusNotImplemented if mode is not supported
     *
     * \relatedalso ImageYUV422
     *
     * \see ImageYUV422, ImportExportMode
     *
     * \author 2008-03 - Javier Ruiz Hidalgo - Creation
     * \author 2011-07 - Albert Gil Moreno   - Review: renamed and ImportExportMode added
     *
     * \todo use T1 and T2 templates to make it more generic?
     */
    template<typename T>
    void import_from( ImageYUV422<T>&   ima,
                      const T*          buffer,
                      std::size_t       size,
                      ImportExportMode   mode ) throw (ImagePlusNotImplemented);

    /*!
     * Export an ImageYUV422 to a preallocated buffer in a specific ImportExportMode
     *
     * See \ref import_export.test as a test-example.
     *
     * \tparam T : the data type of the ImageYUV422 and the buffer
     *
     * \param[in]  ima    : the ImageYUV422 to export the data to the buffer
     * \param[out] buffer : the buffer to save the ImageYUV422 pixels in the mode order
     * \param[in]  size   : the allocated size of the buffer in bytes (it depends of the image dimensions and the mode)
     * \param[in]  mode   : ImportExportMode of the buffer data, supported modes: YUYV, UYVY.
     *
     * \throws ImagePlusNotImplemented if mode is not supported
     *
     * \warning Please note that the buffer allocation should be done externally (by the function's caller)
     *          The allocated size in bytes should be width*height*sizeof(T).
     *
     * \relatedalso ImageGray
     *
     * \see ImageGray, ImportExportMode
     *
     * \author 2011-07   - Albert Gil Moreno - Created for consistency
     *
     * \todo use T1 and T2 templates to make it more generic?
     */
    template<typename T>
    void export_to( const ImageYUV422<T>& ima,
                    T*                    buffer,
                    std::size_t           size,
                    ImportExportMode       mode ) throw (ImagePlusNotImplemented);
}

#endif // IMAGEPLUS_CORE_IMPORT_EXPORT_HPP
