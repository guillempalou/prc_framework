// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file contour_shape.test
//!
//! Tests for contour_shape descriptor
//!

#include <imageplus/descriptors/geometry/contour_shape.hpp> 

#include <imageplus/core/imagepartition.hpp>
#include <imageplus/core/imagergb.hpp>
#include <imageplus/core/coord2d.hpp>
#include <imageplus/core/partition.hpp>
#include <imageplus/core/region_contour.hpp>
#include <imageplus/core/partition_functions.hpp>

BOOST_AUTO_TEST_SUITE ( Descriptors_Contour_Shape_Suite );

using namespace imageplus;
using namespace descriptors;


BOOST_AUTO_TEST_CASE( VDContour_Shape_test)
{   
    ImagePartition<> my_im_part2(13,6);
    my_im_part2[3][0]=1;
    my_im_part2[4][0]=1;
    my_im_part2[5][0]=1;
    my_im_part2[6][0]=1;
    my_im_part2[7][0]=1;
    my_im_part2[8][1]=1;
    my_im_part2[9][2]=1;
    my_im_part2[10][1]=1;
    my_im_part2[11][0]=1;
    my_im_part2[12][0]=1;
    my_im_part2[12][1]=1;
    my_im_part2[11][2]=1;
    my_im_part2[11][3]=1;
    my_im_part2[12][4]=1;
    my_im_part2[12][5]=1;
    my_im_part2[11][5]=1;
    my_im_part2[10][4]=1;
    my_im_part2[9][3]=1;
    my_im_part2[8][4]=1;
    my_im_part2[7][5]=1;
    my_im_part2[6][5]=1;
    my_im_part2[5][5]=1;
    my_im_part2[4][5]=1;
    my_im_part2[3][5]=1;
    my_im_part2[2][5]=1;
    my_im_part2[1][4]=1;
    my_im_part2[0][3]=1;
    my_im_part2[0][2]=1;
    my_im_part2[1][1]=1;
    my_im_part2[2][0]=1;
    
    my_im_part2[2][1]=1;
    my_im_part2[3][1]=1;
    my_im_part2[4][1]=1;
    my_im_part2[5][1]=1;
    my_im_part2[6][1]=1;
    my_im_part2[7][1]=1;
    my_im_part2[11][1]=1;
    my_im_part2[1][2]=1;
    my_im_part2[2][2]=1;
    my_im_part2[3][2]=1;
    my_im_part2[4][2]=1;
    my_im_part2[5][2]=1;
    my_im_part2[6][2]=1;
    my_im_part2[7][2]=1;
    my_im_part2[8][2]=1;
    my_im_part2[10][2]=1;
    my_im_part2[1][3]=1;
    my_im_part2[2][3]=1;
    my_im_part2[3][3]=1;
    my_im_part2[4][3]=1;
    my_im_part2[5][3]=1;
    my_im_part2[6][3]=1;
    my_im_part2[7][3]=1;
    my_im_part2[8][3]=1;
    my_im_part2[10][3]=1;
    my_im_part2[2][4]=1;
    my_im_part2[3][4]=1;
    my_im_part2[4][4]=1;
    my_im_part2[5][4]=1;
    my_im_part2[6][4]=1;
    my_im_part2[7][4]=1;
    my_im_part2[11][4]=1;
    
    ImageRGB<uint8> my_image2(13,6);
    
    typedef ImageRGB<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    
    partition_type my_part(my_im_part2);
    
    ContourShape<Coord2D<int64> > desc = calc_descriptor(new ContourShape<Coord2D<int64> >(), my_image2, my_part[1]);
    
    BOOST_CHECK( desc.circularity() == 16 );
    BOOST_CHECK( desc.circularity_smoothed() == 2 );
    BOOST_CHECK( desc.eccentricity() == 6 );
    BOOST_CHECK( desc.eccentricity_smoothed() == 7 );
    
	BOOST_CHECK_CLOSE( desc.peaks()[0], 8.45378, 1e-4 );
	BOOST_CHECK( desc.smooth()[0] == 4.25 );
	
	BOOST_CHECK( desc.peaks()[1] == 27 );
	BOOST_CHECK( desc.smooth()[1] == 7 );
	
	BOOST_CHECK( desc.peaks()[2] == 14 );
	BOOST_CHECK( desc.smooth()[2] == 3 || desc.smooth()[2] == 4); // value in the quantizer threshold
	
	BOOST_CHECK( desc.peaks()[3] == 50 );
	BOOST_CHECK( desc.smooth()[3] == 4 || desc.smooth()[3] == 5 ); // value in the quantizer threshold
	
	BOOST_CHECK( desc.peaks()[4] == 56 );
	BOOST_CHECK( desc.smooth()[4] == 7 );
	
	BOOST_CHECK( desc.peaks()[5] == 50 );
	BOOST_CHECK( desc.smooth()[5] == 7 );
}

BOOST_AUTO_TEST_SUITE_END ();
