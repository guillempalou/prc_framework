// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------
//!
//! \example bpt_example.cpp
//!
//! This is an example of how to create a BPT
//!

#ifndef IMAGEPLUS_DOXYGEN_DO_NOT_COMMENT_MAIN_FUNCTION

#include <iostream>
#include <string>

#include <imageplus/core.hpp>

// You should include this file to create BPTs
#include <imageplus/bpt/creation.hpp>

#include <imageplus/segmentation/label_flatzone.hpp>

using namespace imageplus;
using namespace segmentation;

// BPT has its own namespace
using namespace bpt;


int main (int argc, char* argv[])
{
    // These type definitions will come in handy
    typedef ImageGray<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    
    // The class Partition is the one that stores the BPT.
    typedef Partition<RegionType> partition_type;
    
    // We create an image (it should be read in a real environment)
    InputType my_image(3,2);
    my_image[0][0] = 30;    my_image[1][0] = 30;     my_image[2][0] = 100;
    my_image[0][1] = 25;    my_image[1][1] = 25;     my_image[2][1] = 125;
    
    std::cout << "Original image:" << std::endl;
    std::cout << my_image(GRAY_CHANNEL);

    // The base partition of the BPT will be the partition of flat zones
    FlatZone my_part = calc_descriptor(new FlatZone(), my_image);

    std::cout << "Flatzone partition:" << std::endl;
    std::cout << my_part(PARTITION_CHANNEL);
    
    // The class BPTModels handles the different creation models and combines them.
    // In this case, we just use the ColorHomogeneity WSDM criterion 
    BPTModels<InputType,RegionType> my_model_set(new ColorHomogeneity<InputType, RegionType, WSDM>());

    // We define the Partition from the imagepartition
    partition_type my_bpt(my_part);
    
    // We create the BPT
    create_bpt(my_bpt, my_image, my_model_set);
    
    std::cout << "The resulting tree has " << my_bpt.num_regions() << " regions." << std::endl;

    // For further information about:
    // - Working with the Partition class: Refer to "partition_iterators_example"
    // - BPT creation: Refer to the tool bpt_creation and the documentation of the BPT namespace
    // - BPT population(compute descriptors): Refer to the tool bpt_population and the iterators example
}


#endif
