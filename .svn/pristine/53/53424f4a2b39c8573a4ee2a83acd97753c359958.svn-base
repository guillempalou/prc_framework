// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file closing.cpp
//!
//!  Implementation for Closing operations on MultiArray and ImageGray objects
//!

#include <typeinfo>

#include <imageplus/math/morphology/erosion.hpp>
#include <imageplus/math/morphology/dilation.hpp>
#include <imageplus/math/morphology/closing.hpp>

using namespace imageplus;
using namespace imageplus::math::morphology;




template<std::size_t N>
Closing<N>::Closing() :
        Filter< Closing<N> >("Closing"), _se()
{
}

template<std::size_t N>
Closing<N>::Closing(uint64 connectivity, uint64 size) throw (ImagePlusError) :
        Filter< Closing<N> >("Closing"), _se(size, connectivity)
{
    if (connectivity != 4 && connectivity != 8 && connectivity != 6 && connectivity != 18 && connectivity != 26)
    {
        throw ImagePlusError ("Connectivity must be 4 or 8 for Images and 6, 18 or 26 for Volumes");
    }
}

template<std::size_t N>
Closing<N>::Closing(const StructuringElement<N>& se) throw (ImagePlusError) :
        Filter< Closing<N> >("Closing"), _se(se)
{

}


template<std::size_t N>
template<typename T, std::size_t D>
MultiArray<T,D> Closing<N>::implementation( const MultiArray<T,D>& ma) const throw (ImagePlusError, ImagePlusNotImplemented)
{
    Erosion<N>  ero(_se);
    Dilation<N> dil(_se);

    return ero.filter(dil.filter(ma));
}

template<std::size_t N>
template<typename T, std::size_t CHANNELS>
ImaVol<T,CHANNELS,N> Closing<N>::implementation( const ImaVol<T,CHANNELS,N>& m ) const throw (ImagePlusError)
{
    Erosion<N>  ero(_se);
    Dilation<N> dil(_se);

    return ero.filter(dil.filter(m));
}

// closing instantiations
namespace imageplus
{
    namespace math
    {
        namespace morphology
        {
            template class Closing<2>;
            template class Closing<3>;

            template MultiArray<uint8,2> Closing<2>::implementation(const MultiArray<uint8,2>&) const;
            template MultiArray<int64,2> Closing<2>::implementation(const MultiArray<int64,2>&) const;
            template MultiArray<bool,2>  Closing<2>::implementation(const MultiArray<bool,2>&)   const;
            template MultiArray<uint8,3> Closing<3>::implementation(const MultiArray<uint8,3>&) const;
            template MultiArray<int64,3> Closing<3>::implementation(const MultiArray<int64,3>&) const;

            // Instantiation for ImaVols
            template ImaVol<uint8,1,2>    Closing<2>::implementation<uint8>(const ImaVol<uint8,1,2>&) const;
            template ImaVol<int64,1,2>    Closing<2>::implementation<int64>(const ImaVol<int64,1,2>&) const;
            template ImaVol<bool,1,2>     Closing<2>::implementation<bool> (const ImaVol<bool,1,2>&) const;
            
            template ImaVol<uint8,1,3>    Closing<3>::implementation<uint8>(const ImaVol<uint8,1,3>&) const;
            template ImaVol<int64,1,3>    Closing<3>::implementation<int64>(const ImaVol<int64,1,3>&) const;
        }
    }
}


