// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file convert_types.hpp
//!
//!  Several conversion functions for multiarrays, imavols and images
//!

#ifndef IMAGEPLUS_CORE_CONVERT_TYPES_HPP
#define IMAGEPLUS_CORE_CONVERT_TYPES_HPP

#include <imageplus/core/imavol.hpp>
#include <imageplus/core/multiarray.hpp>
#include <imageplus/core/imavolmask.hpp>
#include <imageplus/core/imagegray.hpp>

namespace imageplus
{
    //!
    //! \brief Conversion between ImaVols of different basic types
    //!
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 10-1-2008
    //!
    //! Template T1 is the type of the data for the converted image \n
    //! Template T2 is the type of the data for the image to convert \n
    //! Template N is the number of channels in the image \n
    //! Template D is the number of dimensions (2 for images, 3 for volumes) \n
    //!
    //! \param[in] in : input ImaVol
    //!
    //! \warning signed and unsigned conversion are not checked, so converting "-1" to unsigned is not defined
    //! \warning out of range values are not checked, so converting 3000 to uint8 is not defined
    //!
    //! \return Converted ImaVol
    //!
    template<typename T1, typename T2, std::size_t N, std::size_t D>
    ImaVol<T1,N,D> convert( const ImaVol<T2,N,D>& in);

    //!
    //! \brief Conversion between MultiArrays of different basic types
    //!
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 18-1-2008
    //!
    //! Template T1 is the type of the data for the converted multiarray \n
    //! Template T2 is the type of the data for the multiarray to convert \n
    //! Template D is the number of dimensions (2 for images, 3 for volumes) \n
    //!
    //! \param[in] in : input MultiArray
    //!
    //! \warning signed and unsigned conversion are not checked, so converting "-1" to unsigned is not defined
    //! \warning out of range values are not checked, so converting 3000 to uint8 is not defined
    //!
    //! \return Converted MultiArray
    //!
    template<typename T1, typename T2, std::size_t D>
    MultiArray<T1,D> convert( const MultiArray<T2,D>& in);

    //!
    //! \brief Conversion from ImageMask to ImageGray<uint8> 
    //!
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 15-5-2008
    //!
    //! The conversion is 'true' --> 1, 'false' --> 0
    //! This conversion is useful to save masks to disk
    //! (convert to uint8 and save)
    //!
    //! \param[in] in : input ImageMask
    //! \param[in] val : Value to use in output image for true values in the mask
    //!
    //! \return Converted ImageGray
    //!
    ImageGray<uint8> convert( const ImageMask& in, uint8 val=1);

    //!
    //! \brief Conversion from ImageGray<uint8> to ImageMask 
    //!
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 15-5-2008
    //!
    //! The conversion is false' <-- 0, 'true' <-- other
    //! This conversion is useful to read masks from disk
    //! (read uint8, convert to bool)
    //!
    //! \param[in] in : input ImageGray
    //!
    //! \return Converted ImageMask
    //!
    ImageMask convert( const ImageGray<uint8>& in);

    //!
    //! \brief Multiarray conversion from bool to uint8
    //!
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 14-5-2008
    //!
    //! The conversion is 'true' --> 1, 'false' --> 0
    //! This conversion is useful to save masks to disk
    //! (convert to uint8 and save)
    //! Template D is the number of dimensions (2 for images, 3 for volumes) \n
    //!
    //! \param[in] in : input MultiArray
    //!
    //! \return Converted MultiArray
    //!
    template<std::size_t D>
    MultiArray<uint8,D> convert( const MultiArray<bool,D>& in);

    //!
    //! \brief Multiarray conversion from uint8 to bool
    //!
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 14-5-2008
    //!
    //! The conversion 0 --> 'false', other --> 'true'
    //! This conversion is useful to read masks from disk
    //! (read uint8 and convert to bool)
    //! Template D is the number of dimensions (2 for images, 3 for volumes) \n
    //!
    //! \param[in] in : input MultiArray
    //!
    //! \return Converted MultiArray
    //!
    template<std::size_t D>
    MultiArray<bool,D> convert( const MultiArray<uint8,D>& in);
}


#endif
