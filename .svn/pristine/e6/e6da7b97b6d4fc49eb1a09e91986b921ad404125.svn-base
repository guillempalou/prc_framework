// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \example circular_sync_buffer.test
 * 
 * This is an example about how to use a CircularSyncBuffer with the CircularSyncBufferSynchronizer.
 */

/*
 * This is the necessary header to use the CircularSyncBuffer classes
 */
#include <imageplus/toolbox/circular_sync_buffer.hpp>

BOOST_AUTO_TEST_SUITE ( CircularSyncBufferSuite );

using namespace imageplus;
using namespace imageplus::toolbox;

BOOST_AUTO_TEST_CASE( CircularSyncBufferTest )
{
    /*
     * Creating three diferent CircularSyncBuffer.
     * Note that we can synchronize CircularSyncBuffer of diferent types.
     */
    CircularSyncBuffer<ImageRGB<uint8> > cb1;
    CircularSyncBuffer<Coord2D<> >       cb2;
    CircularSyncBuffer<Coord3D<> >       cb3;

    /*
     * Setting a different ID for all of them, 
     * to be able to use them in a CircularSyncBufferSynchroniser.
     */
    cb1.id("cb1");
    cb2.id("cb2");
    cb3.id("cb3");
    
    BOOST_CHECK( cb1.id() == "cb1");
    BOOST_CHECK( cb2.id() == "cb2");
    BOOST_CHECK( cb3.id() == "cb3");

    /*
     * Setting the capacity of the buffers
     */
    cb1.capacity(10);
    cb2.capacity(10);
    cb3.capacity(10);
    
    /*
     * Creating the Synchroniser and adding the three buffers to it 
     */
    CircularSyncBufferSynchroniser sync;

    sync.add(&cb1);
    sync.add(&cb2);
    sync.add(&cb3);

    /*
     * Adding timestamped elements to the buffers with diferent frame rate:
     * - cb1 at 1 second between frames/elements
     * - cb2 at 2 seconds between frames/elements
     * - cb3 at 4 seconds between frames/elements
     */
    Timestamp ts = 100.0;
    
    cb1.add( ImageRGB<>(10,10)    , ts     );
    cb1.add( ImageRGB<>(11,11)    , ts + 1 );
    cb1.add( ImageRGB<>(12,12)    , ts + 2 );
    cb1.add( ImageRGB<>(13,13)    , ts + 3 );

    cb2.add( Coord2D<> (20,20)    , ts     );
    cb2.add( Coord2D<> (21,21)    , ts + 2 );

    cb3.add( Coord3D<> (30,30,30) , ts     );

    /*
     * Synchronisation 
     */
    BOOST_CHECK( sync.sync( 0.25 ) );
   
    /*
     * Getting sincronised elements and its Timestamps
     */
    ImageRGB<> & data1s = cb1.data(sync);
    Coord2D<>  & data2s = cb2.data(sync);
    Coord3D<>  & data3s = cb3.data(sync);

    Timestamp& time1s = cb1.time(sync);
    Timestamp& time2s = cb2.time(sync);
    Timestamp& time3s = cb3.time(sync);
    
    /*
     * Checking that the last sincronised timestamp is ts
     */
    BOOST_CHECK( are_similars(time1s, ts, 0.25) );
    BOOST_CHECK( are_similars(time2s, ts, 0.25) );
    BOOST_CHECK( are_similars(time3s, ts, 0.25) );
    
    /*
     * Checking also that the data is the synchronised one 
     */
    BOOST_CHECK( data1s.size_x() == 10 && data1s.size_y() == 10 );
    BOOST_CHECK( data2s.x()      == 20 && data2s.y()      == 20 );
    BOOST_CHECK( data3s.x()      == 30 && data3s.y()      == 30 && data3s.z()      == 30 );
    
    /*
     * Changing the synchronisation to get the lastest timestamped elements 
     */
    sync.last();

    /*
     * Getting sincronised elements and its Timestamps
     */
    ImageRGB<> & data1l = cb1.data(sync);
    Coord2D<>  & data2l = cb2.data(sync);
    Coord3D<>  & data3l = cb3.data(sync);

    Timestamp& time1l = cb1.time(sync);
    Timestamp& time2l = cb2.time(sync);
    Timestamp& time3l = cb3.time(sync);
    
    /*
     * Checking lastests Timestamps
     */
    BOOST_CHECK( are_similars(time1l, ts + 3, 0.25) );
    BOOST_CHECK( are_similars(time2l, ts + 2, 0.25) );
    BOOST_CHECK( are_similars(time3l, ts    , 0.25) );
    
    /*
     * Checking lastetst elements 
     */
    BOOST_CHECK( data1l.size_x() == 13 && data1l.size_y() == 13 );
    BOOST_CHECK( data2l.x()      == 21 && data2l.y()      == 21 );
    BOOST_CHECK( data3l.x()      == 30 && data3l.y()      == 30 && data3l.z()      == 30 );

    /*
     * Adding more timestamped elements following the previous frame rates
     */
    cb1.add( ImageRGB<>(14,14)    , ts + 4 );
    cb1.add( ImageRGB<>(15,15)    , ts + 5 );
    cb1.add( ImageRGB<>(16,16)    , ts + 6 );
    cb1.add( ImageRGB<>(17,17)    , ts + 7 );

    cb2.add( Coord2D<> (22,22)    , ts + 4 );
    cb2.add( Coord2D<> (23,23)    , ts + 6 );

    cb3.add( Coord3D<> (31,31,31) , ts + 4 );
    
    /*
     * Synchronisation 
     */
    BOOST_CHECK( sync.sync( 0.25 ) );

    /*
     * Getting sincronised elements and its Timestamps
     */
    ImageRGB<> & data11s = cb1.data(sync);
    Coord2D<>  & data22s = cb2.data(sync);
    Coord3D<>  & data33s = cb3.data(sync);

    Timestamp& time11s = cb1.time(sync);
    Timestamp& time22s = cb2.time(sync);
    Timestamp& time33s = cb3.time(sync);
    
    /*
     * Checking that the last sincronised timestamp is ts
     */
    BOOST_CHECK( are_similars(time11s, ts+4, 0.25) );
    BOOST_CHECK( are_similars(time22s, ts+4, 0.25) );
    BOOST_CHECK( are_similars(time33s, ts+4, 0.25) );
    
    /*
     * Checking also that the data is the synchronised one 
     */
    BOOST_CHECK( data11s.size_x() == 14 && data11s.size_y() == 14 );
    BOOST_CHECK( data22s.x()      == 22 && data22s.y()      == 22 );
    BOOST_CHECK( data33s.x()      == 31 && data33s.y()      == 31 && data33s.z()      == 31 );
    
    /*
     * Changing the synchronisation to get the lastest timestamped elements 
     */
    sync.last();

    /*
     * Getting sincronised elements and its Timestamps
     */
    ImageRGB<> & data11l = cb1.data(sync);
    Coord2D<>  & data22l = cb2.data(sync);
    Coord3D<>  & data33l = cb3.data(sync);

    Timestamp& time11l = cb1.time(sync);
    Timestamp& time22l = cb2.time(sync);
    Timestamp& time33l = cb3.time(sync);
    
    /*
     * Checking lastests Timestamps
     */
    BOOST_CHECK( are_similars(time11l, ts + 7, 0.25) );
    BOOST_CHECK( are_similars(time22l, ts + 6, 0.25) );
    BOOST_CHECK( are_similars(time33l, ts + 4, 0.25) );
    
    /*
     * Checking lastetst elements 
     */
    BOOST_CHECK( data11l.size_x() == 17 && data11l.size_y() == 17 );
    BOOST_CHECK( data22l.x()      == 23 && data22l.y()      == 23 );
    BOOST_CHECK( data33l.x()      == 31 && data33l.y()      == 31 && data33l.z()      == 31 );
}


BOOST_AUTO_TEST_SUITE_END ();
