// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file imavol_comparison.cpp
//!
//!  Methods to compare imavols
//!

#include <imageplus/core/imavol_comparison.hpp>

using namespace imageplus;


template<typename T, std::size_t N, std::size_t D>
void imageplus::notsame( const ImaVol<T,N,D>& input1, const ImaVol<T,N,D>& input2) throw (ImagePlusError)
{
    if (&input1 == &input2)
    {
        throw ImagePlusError ("Objects are the same. This is bad");
    }
    
    for (uint64 i = 0; i < N; i++)
    {
        if (&input1(i) == &input2(i))
        {
            throw ImagePlusError ("Objects are the same. This is bad");
        }
    }
}


template<typename T, std::size_t N, std::size_t D>
void imageplus::compatible ( const ImaVol<T,N,D>& input1, const ImaVol<T,N,D>& input2) throw (ImagePlusError)
{
    if (!(input1.dims() == input2.dims()))
    {
        throw ImagePlusError ("Objects do not have same dimensions");
    }
}


// Instantiations
namespace imageplus
{
    template void notsame( const ImaVol<bool,1,3>&, const ImaVol<bool,1,3>& );
    template void notsame( const ImaVol<uint8,1,3>&, const ImaVol<uint8,1,3>& );
    template void notsame( const ImaVol<uint16,1,3>&, const ImaVol<uint16,1,3>& );
    template void notsame( const ImaVol<uint32,1,3>&, const ImaVol<uint32,1,3>& );
    template void notsame( const ImaVol<uint64,1,3>&, const ImaVol<uint64,1,3>& );
    template void notsame( const ImaVol<int8,1,3>&, const ImaVol<int8,1,3>& );
    template void notsame( const ImaVol<int16,1,3>&, const ImaVol<int16,1,3>& );
    template void notsame( const ImaVol<int32,1,3>&, const ImaVol<int32,1,3>& );
    template void notsame( const ImaVol<int64,1,3>&, const ImaVol<int64,1,3>& );
    template void notsame( const ImaVol<float64,1,3>&, const ImaVol<float64,1,3>& );

    template void notsame( const ImaVol<bool,1,2>&, const ImaVol<bool,1,2>& );
    template void notsame( const ImaVol<uint8,1,2>&, const ImaVol<uint8,1,2>& );
    template void notsame( const ImaVol<uint16,1,2>&, const ImaVol<uint16,1,2>& );
    template void notsame( const ImaVol<uint32,1,2>&, const ImaVol<uint32,1,2>& );
    template void notsame( const ImaVol<uint64,1,2>&, const ImaVol<uint64,1,2>& );
    template void notsame( const ImaVol<int8,1,2>&, const ImaVol<int8,1,2>& );
    template void notsame( const ImaVol<int16,1,2>&, const ImaVol<int16,1,2>& );
    template void notsame( const ImaVol<int32,1,2>&, const ImaVol<int32,1,2>& );
    template void notsame( const ImaVol<int64,1,2>&, const ImaVol<int64,1,2>& );
    template void notsame( const ImaVol<float64,1,2>&, const ImaVol<float64,1,2>& );


    template void notsame( const ImaVol<bool,3,3>&, const ImaVol<bool,3,3>& );
    template void notsame( const ImaVol<uint8,3,3>&, const ImaVol<uint8,3,3>& );
    template void notsame( const ImaVol<uint16,3,3>&, const ImaVol<uint16,3,3>& );
    template void notsame( const ImaVol<uint32,3,3>&, const ImaVol<uint32,3,3>& );
    template void notsame( const ImaVol<uint64,3,3>&, const ImaVol<uint64,3,3>& );
    template void notsame( const ImaVol<int8,3,3>&, const ImaVol<int8,3,3>& );
    template void notsame( const ImaVol<int16,3,3>&, const ImaVol<int16,3,3>& );
    template void notsame( const ImaVol<int32,3,3>&, const ImaVol<int32,3,3>& );
    template void notsame( const ImaVol<int64,3,3>&, const ImaVol<int64,3,3>& );
    template void notsame( const ImaVol<float64,3,3>&, const ImaVol<float64,3,3>& );

    template void notsame( const ImaVol<bool,3,2>&, const ImaVol<bool,3,2>& );
    template void notsame( const ImaVol<uint8,3,2>&, const ImaVol<uint8,3,2>& );
    template void notsame( const ImaVol<uint16,3,2>&, const ImaVol<uint16,3,2>& );
    template void notsame( const ImaVol<uint32,3,2>&, const ImaVol<uint32,3,2>& );
    template void notsame( const ImaVol<uint64,3,2>&, const ImaVol<uint64,3,2>& );
    template void notsame( const ImaVol<int8,3,2>&, const ImaVol<int8,3,2>& );
    template void notsame( const ImaVol<int16,3,2>&, const ImaVol<int16,3,2>& );
    template void notsame( const ImaVol<int32,3,2>&, const ImaVol<int32,3,2>& );
    template void notsame( const ImaVol<int64,3,2>&, const ImaVol<int64,3,2>& );
    template void notsame( const ImaVol<float64,3,2>&, const ImaVol<float64,3,2>& );




    template void compatible( const ImaVol<bool,1,3>&, const ImaVol<bool,1,3>& );
    template void compatible( const ImaVol<uint8,1,3>&, const ImaVol<uint8,1,3>& );
    template void compatible( const ImaVol<uint16,1,3>&, const ImaVol<uint16,1,3>& );
    template void compatible( const ImaVol<uint32,1,3>&, const ImaVol<uint32,1,3>& );
    template void compatible( const ImaVol<uint64,1,3>&, const ImaVol<uint64,1,3>& );
    template void compatible( const ImaVol<int8,1,3>&, const ImaVol<int8,1,3>& );
    template void compatible( const ImaVol<int16,1,3>&, const ImaVol<int16,1,3>& );
    template void compatible( const ImaVol<int32,1,3>&, const ImaVol<int32,1,3>& );
    template void compatible( const ImaVol<int64,1,3>&, const ImaVol<int64,1,3>& );
    template void compatible( const ImaVol<float64,1,3>&, const ImaVol<float64,1,3>& );

    template void compatible( const ImaVol<bool,1,2>&, const ImaVol<bool,1,2>& );
    template void compatible( const ImaVol<uint8,1,2>&, const ImaVol<uint8,1,2>& );
    template void compatible( const ImaVol<uint16,1,2>&, const ImaVol<uint16,1,2>& );
    template void compatible( const ImaVol<uint32,1,2>&, const ImaVol<uint32,1,2>& );
    template void compatible( const ImaVol<uint64,1,2>&, const ImaVol<uint64,1,2>& );
    template void compatible( const ImaVol<int8,1,2>&, const ImaVol<int8,1,2>& );
    template void compatible( const ImaVol<int16,1,2>&, const ImaVol<int16,1,2>& );
    template void compatible( const ImaVol<int32,1,2>&, const ImaVol<int32,1,2>& );
    template void compatible( const ImaVol<int64,1,2>&, const ImaVol<int64,1,2>& );
    template void compatible( const ImaVol<float64,1,2>&, const ImaVol<float64,1,2>& );


    template void compatible( const ImaVol<bool,3,3>&, const ImaVol<bool,3,3>& );
    template void compatible( const ImaVol<uint8,3,3>&, const ImaVol<uint8,3,3>& );
    template void compatible( const ImaVol<uint16,3,3>&, const ImaVol<uint16,3,3>& );
    template void compatible( const ImaVol<uint32,3,3>&, const ImaVol<uint32,3,3>& );
    template void compatible( const ImaVol<uint64,3,3>&, const ImaVol<uint64,3,3>& );
    template void compatible( const ImaVol<int8,3,3>&, const ImaVol<int8,3,3>& );
    template void compatible( const ImaVol<int16,3,3>&, const ImaVol<int16,3,3>& );
    template void compatible( const ImaVol<int32,3,3>&, const ImaVol<int32,3,3>& );
    template void compatible( const ImaVol<int64,3,3>&, const ImaVol<int64,3,3>& );
    template void compatible( const ImaVol<float64,3,3>&, const ImaVol<float64,3,3>& );

    template void compatible( const ImaVol<bool,3,2>&, const ImaVol<bool,3,2>& );
    template void compatible( const ImaVol<uint8,3,2>&, const ImaVol<uint8,3,2>& );
    template void compatible( const ImaVol<uint16,3,2>&, const ImaVol<uint16,3,2>& );
    template void compatible( const ImaVol<uint32,3,2>&, const ImaVol<uint32,3,2>& );
    template void compatible( const ImaVol<uint64,3,2>&, const ImaVol<uint64,3,2>& );
    template void compatible( const ImaVol<int8,3,2>&, const ImaVol<int8,3,2>& );
    template void compatible( const ImaVol<int16,3,2>&, const ImaVol<int16,3,2>& );
    template void compatible( const ImaVol<int32,3,2>&, const ImaVol<int32,3,2>& );
    template void compatible( const ImaVol<int64,3,2>&, const ImaVol<int64,3,2>& );
    template void compatible( const ImaVol<float64,3,2>&, const ImaVol<float64,3,2>& );


    //template ImaVol<uint8,3,2> iv_compare<uint8,1,2,uint8,3>(const ImaVol<uint8,1,2>&, const ImaVol<uint8,1,2>& , const int8 , uint8 , uint8 );
/*
    template ImaVol<int16,3,2> iv_compare(const ImaVol<uint8,1,2>&, const ImaVol<uint8,1,2>& , const int8 , int16 , int16 );
    template ImaVol<int64,3,2> iv_compare(const ImaVol<uint8,1,2>&, const ImaVol<uint8,1,2>& , const int8 , uint8 , int64 );

    template ImaVol<uint8,3,2> iv_compare(const ImaVol<uint32,1,2>&, const ImaVol<uint32,1,2>& , const int8 , uint8 , uint8 );
    template ImaVol<int16,3,2> iv_compare(const ImaVol<uint32,1,2>&, const ImaVol<uint32,1,2>& , const int8 , int16 , int16 );
    template ImaVol<int64,3,2> iv_compare(const ImaVol<uint32,1,2>&, const ImaVol<uint32,1,2>& , const int8 , uint8 , int64 );


    template ImaVol<uint8,1,2> iv_compare(const ImaVol<uint8,1,2>&, const ImaVol<uint8,1,2>& , const int8 , uint8 , uint8 );
    template ImaVol<int16,1,2> iv_compare(const ImaVol<uint8,1,2>&, const ImaVol<uint8,1,2>& , const int8 , int16 , int16 );
    template ImaVol<int64,1,2> iv_compare(const ImaVol<uint8,1,2>&, const ImaVol<uint8,1,2>& , const int8 , uint8 , int64 );

    template ImaVol<uint8,1,2> iv_compare(const ImaVol<uint32,1,2>&, const ImaVol<uint32,1,2>& , const int8 , uint8 , uint8 );
    template ImaVol<int16,1,2> iv_compare(const ImaVol<uint32,1,2>&, const ImaVol<uint32,1,2>& , const int8 , int16 , int16 );
    template ImaVol<int64,1,2> iv_compare(const ImaVol<uint32,1,2>&, const ImaVol<uint32,1,2>& , const int8 , uint8 , int64 );

*/

}
