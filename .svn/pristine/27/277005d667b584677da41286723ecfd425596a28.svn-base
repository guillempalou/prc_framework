// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//! Tests for segmentation distances
//!
#include <imageplus/text/binarization.hpp>
#include <imageplus/io/readimage.hpp>

#include <set>


BOOST_AUTO_TEST_SUITE ( Binarization_Suite );

using namespace imageplus;
using namespace text;
using namespace std;

BOOST_AUTO_TEST_CASE( binarization_test)
{
	ImageRGB<uint8> rgb_image, output_image;
	io::ReadImage ri(string(TEST_DATA_PATH_R) + "/text/input_image_dim.jpg");
	ri >> rgb_image;
	io::ReadImage roi(string(TEST_DATA_PATH_R) + "/text/binarized_full.png");
	roi >> output_image;
	ImageGray<uint8> out_im(output_image.size_x(), output_image.size_y());
	for (std::size_t i =0; i < output_image.size_x(); i++)
		for (std::size_t j =0; j < output_image.size_y(); j++)
			if((output_image(0)[i][j] > 0)||(output_image(1)[i][j] > 0)||(output_image(2)[i][j] > 0))
				out_im[i][j]=255;
	
	ImageGray<uint8> gray_image = to_gray(rgb_image);
	ImaVolMask<2> mask(rgb_image.size_x(), rgb_image.size_y());
	mask=true;
	bool to_delete = false;
	ImageGray<uint8> output_mask = binarization(gray_image, mask, to_delete);
	BOOST_CHECK(output_mask == out_im);
	BOOST_CHECK(to_delete == false);
}
BOOST_AUTO_TEST_CASE( empty_image_binarization_test)
{
	ImageRGB<uint8> rgb_image, output_image;
	io::ReadImage ri(string(TEST_DATA_PATH_R) + "/text/input_image_dim.jpg");
	ri >> rgb_image;

	ImageGray<uint8> out_im(rgb_image.size_x(), rgb_image.size_y());
	out_im = 0;
	
	ImageGray<uint8> gray_image = to_gray(rgb_image);
	ImaVolMask<2> mask(rgb_image.size_x(), rgb_image.size_y());
	mask=false;
	bool to_delete = true;
	ImageGray<uint8> output_mask = binarization(gray_image, mask, to_delete);
	BOOST_CHECK(output_mask == out_im);
	BOOST_CHECK(to_delete == true);
}


BOOST_AUTO_TEST_SUITE_END ();

