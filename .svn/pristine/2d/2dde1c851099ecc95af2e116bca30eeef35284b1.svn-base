// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file haar.test
 */ 

#include <imageplus/descriptors/texture/haar.hpp>

#include <imageplus/core/imagepartition.hpp>
#include <imageplus/core/imagergb.hpp>
#include <imageplus/core/coord2d.hpp>
#include <imageplus/core/partition.hpp>
#include <imageplus/core/region_contour.hpp>
#include <imageplus/core/partition_functions.hpp>

BOOST_AUTO_TEST_SUITE ( Haar_Suite );

using namespace imageplus;
using namespace descriptors;
using namespace math::transforms;

BOOST_AUTO_TEST_CASE( HaarPower_test)
{    
    
    ImageGray<uint8> image(4,3);
    
    image[0][0]=1;
    image[1][0]=1;
    image[2][0]=1;
    image[3][0]=5;
    
    image[0][1]=1;
    image[1][1]=1;
    image[2][1]=3;
    image[3][1]=5;
    
    image[0][2]=6;
    image[1][2]=8;
    image[2][2]=2;
    image[3][2]=4;
    
    HaarPower<ImageGray<uint8> > desc;
    
    desc = calc_descriptor(new HaarPower<ImageGray<uint8> >(), image);
    
    BOOST_CHECK_EQUAL( desc.lh(), 541./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 317./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 137./4. );
    
    typedef Coord2D<int64> C2D;
    imageplus::Region<C2D> region;
    region.push_back(C2D(1,1));
    region.push_back(C2D(2,1));
    region.push_back(C2D(1,2));
    region.push_back(C2D(2,2));

    desc = calc_descriptor(new HaarPower<ImageGray<uint8> >(), image, region);

    BOOST_CHECK_EQUAL( desc.lh(), 176./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 72./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 104./4. );

    imageplus::Region<C2D> region2;
    region2.push_back(C2D(1,0));
    region2.push_back(C2D(2,0));

    desc = calc_descriptor(new HaarPower<ImageGray<uint8> >(), image, region2);

    BOOST_CHECK_EQUAL( desc.lh(), 8./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 40./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 8./4. );

    imageplus::Region<C2D> parent_region;
    parent_region.push_back(C2D(1,1));
    parent_region.push_back(C2D(2,1));
    parent_region.push_back(C2D(1,2));
    parent_region.push_back(C2D(2,2));
    parent_region.push_back(C2D(1,0));
    parent_region.push_back(C2D(2,0));

    desc = calc_descriptor(new HaarPower<ImageGray<uint8> >(), image, parent_region);

    BOOST_CHECK_EQUAL( desc.lh(), 184./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 112./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 112./4. );

    ImagePartition<> my_im_part(4,3);
    my_im_part[0][0] = 3;
    my_im_part[0][1] = 3;
    my_im_part[0][2] = 3;
    my_im_part[1][0] = 1;
    my_im_part[1][1] = 2;
    my_im_part[1][2] = 2;
    my_im_part[2][0] = 1;
    my_im_part[2][1] = 2;
    my_im_part[2][2] = 2;
    my_im_part[3][0] = 3;
    my_im_part[3][1] = 3;
    my_im_part[3][2] = 3;

    typedef ImageGray<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    partition_type my_part(my_im_part);

    merge_regions(1, 2, 4, my_part);
    merge_regions(3, 4, 5, my_part);

    desc = calc_descriptor(new HaarPower<InputType>(), image, my_part[5]);
    BOOST_CHECK_EQUAL( desc.lh(), 541./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 317./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 137./4. );

    desc = calc_descriptor(new HaarPower<InputType>(), image, my_part[1]);
    BOOST_CHECK_EQUAL( desc.lh(), 8./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 40./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 8./4. );

    desc = calc_descriptor(new HaarPower<InputType>(), image, my_part[2]);
    BOOST_CHECK_EQUAL( desc.lh(), 176./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 72./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 104./4. );

    desc = calc_descriptor(new HaarPower<InputType>(), image, my_part[4]);
    BOOST_CHECK_EQUAL( desc.lh(), 184./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 112./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 112./4. );

    desc = calc_descriptor(new HaarPower<InputType>(), image, my_part[3]);
    BOOST_CHECK_EQUAL( desc.lh(), 357./4. );
    BOOST_CHECK_EQUAL( desc.hl(), 205./4. );
    BOOST_CHECK_EQUAL( desc.hh(), 25./4. );


}

BOOST_AUTO_TEST_CASE( HaarPower_multilevel_test)
{

    ImageGray<uint8> image(4,3);

    image[0][0]=1;
    image[1][0]=1;
    image[2][0]=1;
    image[3][0]=5;

    image[0][1]=1;
    image[1][1]=1;
    image[2][1]=3;
    image[3][1]=5;

    image[0][2]=6;
    image[1][2]=8;
    image[2][2]=2;
    image[3][2]=4;

    HaarPower<ImageGray<uint8>, 2 > desc;

    desc = calc_descriptor(new HaarPower<ImageGray<uint8>, 2 >(), image);

    BOOST_CHECK_EQUAL( desc.lh(), 541./4. );
    BOOST_CHECK_EQUAL( desc.lh(1), 1788./16. );
    BOOST_CHECK_EQUAL( desc.hl(), 317./4. );
    BOOST_CHECK_EQUAL( desc.hl(1), 828./16. );
    BOOST_CHECK_EQUAL( desc.hh(), 137./4. );
    BOOST_CHECK_EQUAL( desc.hh(1), 188./16. );

    typedef Coord2D<int64> C2D;
    imageplus::Region<C2D> region;
    region.push_back(C2D(1,1));
    region.push_back(C2D(2,1));
    region.push_back(C2D(1,2));
    region.push_back(C2D(2,2));

    desc = calc_descriptor(new HaarPower<ImageGray<uint8>, 2 >(), image, region);

    BOOST_CHECK_EQUAL( desc.lh(), 176./4. );
    BOOST_CHECK_EQUAL( desc.lh(1), 669./16. );
    BOOST_CHECK_EQUAL( desc.hl(), 72./4. );
    BOOST_CHECK_EQUAL( desc.hl(1), 85./16. );
    BOOST_CHECK_EQUAL( desc.hh(), 104./4. );
    BOOST_CHECK_EQUAL( desc.hh(1), 45./16. );

    imageplus::Region<C2D> region2;
    region2.push_back(C2D(1,0));
    region2.push_back(C2D(2,0));

    desc = calc_descriptor(new HaarPower<ImageGray<uint8>, 2 >(), image, region2);

    BOOST_CHECK_EQUAL( desc.lh(), 8./4. );
    BOOST_CHECK_EQUAL( desc.lh(1), 65./16. );
    BOOST_CHECK_EQUAL( desc.hl(), 40./4. );
    BOOST_CHECK_EQUAL( desc.hl(1), 145./16. );
    BOOST_CHECK_EQUAL( desc.hh(), 8./4. );
    BOOST_CHECK_EQUAL( desc.hh(1), 65./16. );

}

BOOST_AUTO_TEST_SUITE_END ();

