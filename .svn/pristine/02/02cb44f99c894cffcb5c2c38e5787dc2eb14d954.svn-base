/*
 * fundamental_matrix_test2.cpp
 *
 *  Created on: May 21, 2013
 *      Author: gpalou
 */

/*
 * fundamental_matrix_test.cpp
 *
 *  Created on: May 16, 2013
 *      Author: gpalou
 */

#include <imageplus/monocular_depth/structure_from_motion/fundamental_matrix.hpp>
#include <iostream>
#include <fstream>

using namespace imageplus;
using namespace monocular_depth;

int main(int argc, char *argv[]) {


	std::vector<math::Vector> points1;
	std::vector<math::Vector> points2;

	std::string p = argv[1];

	std::ifstream ifs(p.c_str());

	double a,b,c,d;
	while (ifs >> a >> b >> c >> d) {
		math::Vector v1(2); v1(0) = a; v1(1) = b;
		math::Vector v2(2); v2(0) = c; v2(1) = d;
		//std::cout << v1.transpose() << " " << v2.transpose() << std::endl;
		points1.push_back(v1);
		points2.push_back(v2);
	}
	int N = points1.size();

	math::Matrix p1(N,2);
	math::Matrix p2(N,2);

	for (int i = 0; i < N; i++) {
		p1.row(i) = points1[i].transpose();
		p2.row(i) = points2[i].transpose();
	}

	std::cout << "Finding fundamental matrix " << std::endl;
	math::Matrix F = estimate_fundamental_matrix(p1,p2);

	std::cout << "Fundamental matrix: " << std::endl;
	std::cout << F << std::endl;
	std::cout << "--------------------" << std::endl;

	//calculate the error
	math::Matrix p1_hom(N,3);
	math::Matrix p2_hom(N,3);

	p1_hom.block(0,0,N,2) = p1;
	p2_hom.block(0,0,N,2) = p2;

	p1_hom.col(2).fill(1);
	p2_hom.col(2).fill(1);

	//std::cout << p1_hom << std::endl;
	//std::cout << p2_hom << std::endl;

	std::cout << "Average error " << (p2_hom*F*p1_hom.transpose()).diagonal().squaredNorm()/N << std::endl;
}
