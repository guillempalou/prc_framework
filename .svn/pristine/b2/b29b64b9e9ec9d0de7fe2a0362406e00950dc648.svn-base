#include <imageplus/core/image_signal.hpp>
#include <imageplus/core/video_signal.hpp>
#include <imageplus/core/colorspace_converter.hpp>

#include <imageplus/segmentation/partition/partition.hpp>
#include <imageplus/segmentation/partition/hierarchical_region_partition.hpp>
#include <imageplus/segmentation/visualization/false_color.hpp>

#include <imageplus/descriptors/descriptor_manager.hpp>
#include <imageplus/descriptors/color/color_mean.hpp>

#include <imageplus/bpt/pruning/merging_sequence_pruner.hpp>

#include <boost/filesystem.hpp>
#include <iomanip>
#include <iostream>

using namespace imageplus;

#define uint64 imageplus::uint64
#define int64 imageplus::int64

typedef ImageSignal<float64,3> 																		ImageType;

typedef ImageType::coord_type																		coord2d;
typedef ImageType::value_type																		rgb_type;

typedef HierarchicalRegion<coord2d>																	Region2D;
typedef segmentation::HierarchicalRegionPartition<Region2D>											BPT;
typedef BPT::PartitionType																			PartitionType;


int main(int argc, char *argv[]) {

	std::string image_path 		= argv[1];
	std::string tree_path 		= argv[2];
	std::string result_path 	= argv[3];

	std::vector<float64> list;

	for (int64 i = 4; i < argc; i++) {
		std::string a = argv[i];
		std::cout << a << " ";
		std::istringstream is(a);
		float64 n;
		is >> n;
		list.push_back(n); //*1000);
	}

	// create the necessary paths
	boost::filesystem::path result_path_p(result_path);
	boost::filesystem::create_directories(result_path_p / "segmentations");

	std::cout << "Reading tree" << std::endl;
	BPT bpt;
	bpt.load_from_prl(tree_path);

	coord2d sizes = bpt.leaves_partition().sizes();

	ImageType img;
	img.read(image_path);

	PartitionType partition(img.sizes());

	for (uint64 i = 0; i <  list.size(); i++) {
		bpt::MergingSequencePruner<BPT, ImageType> merging_sequence_pruner(list[i],false);
		merging_sequence_pruner.prune_bpt(bpt,img);
		std::set<uint64> regs = merging_sequence_pruner.regions(); //optical_flow_pruner.regions();

		for (std::set<uint64>::iterator r = regs.begin(); r != regs.end(); ++r) {
			for (BPT::RegionType::iterator p = bpt(*r).begin(); p != bpt(*r).end(); ++p) {
				partition(*p)(0) = *r;
			}
		}

		ImageType segmentation = segmentation::to_false_color<ImageType>(partition);

		std::ostringstream os;

		os << result_path << "/segmentations/" << list[i] ;

		boost::filesystem::create_directories(os.str());

		partition.write_partition(os.str() + "/partition.sgm");

		segmentation.write(os.str() + "/00000.png");

		/*descriptors::DescriptorManager manager;
		manager.set_max_number_of_regions(bpt.max_label());
		ImageType mean_color_partition(img.sizes());
		for (std::set<uint64>::iterator r = regs.begin(); r != regs.end(); ++r) {
			ImageType::value_type mean_color = manager.calc_descriptor<descriptors::ColorMean<ImageType> >(img,bpt(*r));
			for (BPT::RegionType::iterator p = bpt(*r).begin(); p != bpt(*r).end(); ++p) {
				partition(*p)(0) = *r;
				mean_color_partition(*p) = mean_color;
			}
		}
		os.str("");
		os << result_path << "/mean_color_ms/" << i << ".png";
		mean_color_partition.write(os.str());*/
	}

}
