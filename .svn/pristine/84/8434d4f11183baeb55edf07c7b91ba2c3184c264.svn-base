// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file iterator.test
//!
//! Tests for iterators
//!
#include <imageplus/core/imagegray.hpp>
#include <imageplus/core/coord2d.hpp>
#include <imageplus/core/region.hpp>

BOOST_AUTO_TEST_SUITE ( core_iterator_suite );


using namespace imageplus;
using namespace std;

namespace iplus = imageplus;

BOOST_AUTO_TEST_CASE( iterator_image_test)
{   
    ImageGray<uint8> my_image(2,2);
    my_image[0][0] = 1;    my_image[1][0] = 2;
    my_image[0][1] = 3;    my_image[1][1] = 4;
    
    ImageGray<uint8>::iterator<> it = my_image.colors_begin();
    ImageGray<uint8>::iterator<> it_end = my_image.colors_end();
    ImageGray<uint8>::iterator<> it2 = it;
    typedef  ImageGray<uint8>::CoordType  C2D; 

    BOOST_CHECK((*it).value() == 1);
    BOOST_CHECK((*it).value(GRAY_CHANNEL) == 1);
    BOOST_CHECK((*it).position() == C2D(0,0));
    ++it;
    BOOST_CHECK((*it).value() == 2);
    BOOST_CHECK((*it).value(GRAY_CHANNEL) == 2);
    BOOST_CHECK((*it).position() == C2D(1,0));
    ++it;
    BOOST_CHECK((*it).value() == 3);
    BOOST_CHECK((*it).value(GRAY_CHANNEL) == 3);
    BOOST_CHECK((*it).position() == C2D(0,1));
    ++it;
    BOOST_CHECK((*it).value() == 4);
    BOOST_CHECK((*it).value(GRAY_CHANNEL) == 4);
    BOOST_CHECK((*it).position() == C2D(1,1));
    ++it;
    BOOST_CHECK( it == it_end);
    
    (*it2).value() = 25;
    BOOST_CHECK_EQUAL(my_image[0][0], 25);

    (*it2).value(GRAY_CHANNEL) = 6;
    BOOST_CHECK_EQUAL(my_image[0][0], 6);
}


BOOST_AUTO_TEST_CASE( iterator_region_test)
{   
    ImageGray<uint8> my_image(2,2);
    my_image[0][0] = 1;    my_image[1][0] = 2;
    my_image[0][1] = 3;    my_image[1][1] = 4;
    
    typedef  Coord2D<>  C2D; 
    iplus::Region<C2D> my_region;
    my_region.push_back(C2D(0,1));
    my_region.push_back(C2D(1,0));
    
    ImageGray<uint8>::iterator<iplus::Region<C2D> > it = my_image.colors_begin(my_region);
    
    BOOST_CHECK_EQUAL((*it).value(), 3);
    BOOST_CHECK_EQUAL((*it).value(GRAY_CHANNEL), 3);
    BOOST_CHECK((*it).position() == C2D(0,1));
    ++it;
    BOOST_CHECK_EQUAL((*it).value(), 2);
    BOOST_CHECK_EQUAL((*it).value(GRAY_CHANNEL), 2);
    BOOST_CHECK((*it).position() == C2D(1,0));
    
    (*it).value(GRAY_CHANNEL) = 25;
    BOOST_CHECK_EQUAL(my_image[1][0], 25);

    (*it).value() = 6;
    BOOST_CHECK_EQUAL(my_image[1][0], 6);
    
    ++it;
    BOOST_CHECK( it == my_image.colors_end(my_region));
}



BOOST_AUTO_TEST_CASE( iterator_global_test)
{   
    ImageGray<uint8> my_image(2,2);
    my_image[0][0] = 1;    my_image[1][0] = 2;
    my_image[0][1] = 3;    my_image[1][1] = 4;
    
    typedef  Coord2D<>  C2D; 
    iplus::Region<C2D> my_region;
    my_region.push_back(C2D(0,1));
    my_region.push_back(C2D(1,0));
    
    ImageGray<uint8>::iterator<iplus::Region<C2D> > it = my_image.colors_begin(my_region);
    
    BOOST_CHECK_EQUAL((*it).value(), 3);
    BOOST_CHECK_EQUAL((*it).value(GRAY_CHANNEL), 3);
    BOOST_CHECK((*it).position() == C2D(0,1));

    
    
    ImageGray<uint8>::iterator<iplus::Region<C2D> >::pixel_type::global_iterator glob_it = (*it).global_begin();
    ImageGray<uint8>::iterator<iplus::Region<C2D> >::pixel_type::global_iterator glob_it_end = (*it).global_end();
    
    BOOST_CHECK((*glob_it).value() == 1);
    BOOST_CHECK((*glob_it).value(GRAY_CHANNEL) == 1);
    BOOST_CHECK((*glob_it).position() == C2D(0,0));
    ++glob_it;
    BOOST_CHECK((*glob_it).value() == 2);
    BOOST_CHECK((*glob_it).value(GRAY_CHANNEL) == 2);
    BOOST_CHECK((*glob_it).position() == C2D(1,0));
    ++glob_it;
    BOOST_CHECK((*glob_it).value() == 3);
    BOOST_CHECK((*glob_it).value(GRAY_CHANNEL) == 3);
    BOOST_CHECK((*glob_it).position() == C2D(0,1));
    ++glob_it;
    BOOST_CHECK((*glob_it).value() == 4);
    BOOST_CHECK((*glob_it).value(GRAY_CHANNEL) == 4);
    BOOST_CHECK((*glob_it).position() == C2D(1,1));
    ++glob_it;
    BOOST_CHECK( glob_it == glob_it_end);
}



BOOST_AUTO_TEST_SUITE_END ();

