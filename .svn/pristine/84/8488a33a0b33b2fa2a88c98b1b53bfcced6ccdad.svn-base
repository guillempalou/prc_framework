// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file convert_colorspace.test
//!
//!  Tests for the convert function
//!

#include <imageplus/core.hpp>
#include <imageplus/core/convert_colorspace.hpp>

#include <imageplus/io/readimage.hpp>

BOOST_AUTO_TEST_SUITE ( suite_ConvertColorspace );

using namespace imageplus;
    
BOOST_AUTO_TEST_CASE ( test_ConvertColorspace_YUVRGB )
{    
    ImageRGB<uint8> rgb(3,3);

    rgb(RED_CHANNEL)[0][0] = 0;   rgb(RED_CHANNEL)[1][0] = 25;  rgb(RED_CHANNEL)[2][0] = 50;
    rgb(RED_CHANNEL)[0][1] = 75;  rgb(RED_CHANNEL)[1][1] = 100; rgb(RED_CHANNEL)[2][1] = 125;
    rgb(RED_CHANNEL)[0][2] = 150; rgb(RED_CHANNEL)[1][2] = 175; rgb(RED_CHANNEL)[2][2] = 255;

    rgb(GREEN_CHANNEL)[0][0] = 0;   rgb(GREEN_CHANNEL)[1][0] = 25;  rgb(GREEN_CHANNEL)[2][0] = 50;
    rgb(GREEN_CHANNEL)[0][1] = 75;  rgb(GREEN_CHANNEL)[1][1] = 100; rgb(GREEN_CHANNEL)[2][1] = 125;
    rgb(GREEN_CHANNEL)[0][2] = 150; rgb(GREEN_CHANNEL)[1][2] = 175; rgb(GREEN_CHANNEL)[2][2] = 255;

    rgb(BLUE_CHANNEL)[0][0] = 0;   rgb(BLUE_CHANNEL)[1][0] = 25;  rgb(BLUE_CHANNEL)[2][0] = 50;
    rgb(BLUE_CHANNEL)[0][1] = 75;  rgb(BLUE_CHANNEL)[1][1] = 100; rgb(BLUE_CHANNEL)[2][1] = 125;
    rgb(BLUE_CHANNEL)[0][2] = 150; rgb(BLUE_CHANNEL)[1][2] = 175; rgb(BLUE_CHANNEL)[2][2] = 255;

    ImageYUV<uint8> yuv = to_yuv(rgb);

    // check Y
    BOOST_CHECK_EQUAL(yuv(0)[0][0], (uint8)16);   BOOST_CHECK_EQUAL(yuv(0)[1][0], (uint8)37);  BOOST_CHECK_EQUAL(yuv(0)[2][0], (uint8)59);	
    BOOST_CHECK_EQUAL(yuv(0)[0][1], (uint8)80);   BOOST_CHECK_EQUAL(yuv(0)[1][1], (uint8)102); BOOST_CHECK_EQUAL(yuv(0)[2][1], (uint8)123);	
    BOOST_CHECK_EQUAL(yuv(0)[0][2], (uint8)145);  BOOST_CHECK_EQUAL(yuv(0)[1][2], (uint8)166); BOOST_CHECK_EQUAL(yuv(0)[2][2], (uint8)235);	
    
    // check CbCr
    for(uint32 y = 0 ; y < yuv.size_y(); y++)
	{
        for(uint32 x = 0 ; x < yuv.size_x(); x++)
		{	
		    BOOST_CHECK_EQUAL( yuv(1)[x][y], (uint8)128);	
		    BOOST_CHECK_EQUAL( yuv(2)[x][y], (uint8)128);	
		}
	}


    // Another test
    ImageRGB<uint8> rgb2(2,2);
    
    rgb2(RED_CHANNEL)[0][0] = 62;     rgb2(RED_CHANNEL)[1][0] = 25;
    rgb2(RED_CHANNEL)[0][1] = 103;    rgb2(RED_CHANNEL)[1][1] = 34;

    rgb2(GREEN_CHANNEL)[0][0] = 240;  rgb2(GREEN_CHANNEL)[1][0] = 147;
    rgb2(GREEN_CHANNEL)[0][1] = 244;  rgb2(GREEN_CHANNEL)[1][1] = 15;

    rgb2(BLUE_CHANNEL)[0][0] = 60;    rgb2(BLUE_CHANNEL)[1][0] = 209;
    rgb2(BLUE_CHANNEL)[0][1] = 90;    rgb2(BLUE_CHANNEL)[1][1] = 4;
    

    ImageYUV<uint8> yuv2 = to_yuv(rgb2);

    BOOST_CHECK_EQUAL(yuv2(0)[0][0], (uint8)159);   BOOST_CHECK_EQUAL(yuv2(0)[1][0], (uint8)117);
    BOOST_CHECK_EQUAL(yuv2(0)[0][1], (uint8)174);   BOOST_CHECK_EQUAL(yuv2(0)[1][1], (uint8)33);

    BOOST_CHECK_EQUAL(yuv2(1)[0][0], (uint8)75);    BOOST_CHECK_EQUAL(yuv2(1)[1][0], (uint8)173);
    BOOST_CHECK_EQUAL(yuv2(1)[0][1], (uint8)81);    BOOST_CHECK_EQUAL(yuv2(1)[1][1], (uint8)120);

    BOOST_CHECK_EQUAL(yuv2(2)[0][0], (uint8)63);   BOOST_CHECK_EQUAL(yuv2(2)[1][0], (uint8)70);
    BOOST_CHECK_EQUAL(yuv2(2)[0][1], (uint8)77);   BOOST_CHECK_EQUAL(yuv2(2)[1][1], (uint8)137);

}

BOOST_AUTO_TEST_CASE ( test_ConvertColorspace_toGray )
{    

    ImageRGB<uint8> rgb(3,3);

    rgb(RED_CHANNEL)[0][0] = 0;   rgb(RED_CHANNEL)[1][0] = 25;  rgb(RED_CHANNEL)[2][0] = 50;
    rgb(RED_CHANNEL)[0][1] = 75;  rgb(RED_CHANNEL)[1][1] = 100; rgb(RED_CHANNEL)[2][1] = 125;
    rgb(RED_CHANNEL)[0][2] = 150; rgb(RED_CHANNEL)[1][2] = 175; rgb(RED_CHANNEL)[2][2] = 255;

    rgb(GREEN_CHANNEL)[0][0] = 0;   rgb(GREEN_CHANNEL)[1][0] = 25;  rgb(GREEN_CHANNEL)[2][0] = 50;
    rgb(GREEN_CHANNEL)[0][1] = 75;  rgb(GREEN_CHANNEL)[1][1] = 100; rgb(GREEN_CHANNEL)[2][1] = 125;
    rgb(GREEN_CHANNEL)[0][2] = 150; rgb(GREEN_CHANNEL)[1][2] = 175; rgb(GREEN_CHANNEL)[2][2] = 255;

    rgb(BLUE_CHANNEL)[0][0] = 0;   rgb(BLUE_CHANNEL)[1][0] = 25;  rgb(BLUE_CHANNEL)[2][0] = 50;
    rgb(BLUE_CHANNEL)[0][1] = 75;  rgb(BLUE_CHANNEL)[1][1] = 100; rgb(BLUE_CHANNEL)[2][1] = 125;
    rgb(BLUE_CHANNEL)[0][2] = 150; rgb(BLUE_CHANNEL)[1][2] = 175; rgb(BLUE_CHANNEL)[2][2] = 255;

    ImageGray<uint8> grayima = to_gray(rgb);

    // check Y
    BOOST_CHECK_EQUAL(grayima(0)[0][0], (uint8)0);   BOOST_CHECK_EQUAL(grayima(0)[1][0], (uint8)25);  BOOST_CHECK_EQUAL(grayima(0)[2][0], (uint8)50);	
    BOOST_CHECK_EQUAL(grayima(0)[0][1], (uint8)75);   BOOST_CHECK_EQUAL(grayima(0)[1][1], (uint8)100); BOOST_CHECK_EQUAL(grayima(0)[2][1], (uint8)125);	
    BOOST_CHECK_EQUAL(grayima(0)[0][2], (uint8)150);  BOOST_CHECK_EQUAL(grayima(0)[1][2], (uint8)175); BOOST_CHECK_EQUAL(grayima(0)[2][2], (uint8)255);	


}


BOOST_AUTO_TEST_CASE ( test_ConvertColorspace_RGBYUV )
{    

    ImageRGB<uint8> yuv(2,2);

    yuv(0)[0][0] = 174;  yuv(0)[1][0] = 64; 
    yuv(0)[0][1] = 112;  yuv(0)[1][1] = 170;

    yuv(1)[0][0] = 157;  yuv(1)[1][0] = 120; 
    yuv(1)[0][1] = 195;  yuv(1)[1][1] = 162;

    yuv(2)[0][0] = 143;  yuv(2)[1][0] = 113;
    yuv(2)[0][1] = 203;  yuv(2)[1][1] = 162;

    ImageYUV<uint8> rgb = to_rgb(yuv);

    BOOST_CHECK_EQUAL(rgb(0)[0][0], (uint8)208);   BOOST_CHECK_EQUAL(rgb(0)[1][0], (uint8)32);
    BOOST_CHECK_EQUAL(rgb(0)[0][1], (uint8)231);   BOOST_CHECK_EQUAL(rgb(0)[1][1], (uint8)234);

    BOOST_CHECK_EQUAL(rgb(1)[0][0], (uint8)160);   BOOST_CHECK_EQUAL(rgb(1)[1][0], (uint8)71);
    BOOST_CHECK_EQUAL(rgb(1)[0][1], (uint8)25);    BOOST_CHECK_EQUAL(rgb(1)[1][1], (uint8)138);

    BOOST_CHECK_EQUAL(rgb(2)[0][0], (uint8)242);   BOOST_CHECK_EQUAL(rgb(2)[1][0], (uint8)40);
    BOOST_CHECK_EQUAL(rgb(2)[0][1], (uint8)247);   BOOST_CHECK_EQUAL(rgb(2)[1][1], (uint8)248);

}

BOOST_AUTO_TEST_CASE ( test_ConvertColorspace_Faces )
{
    /*
     * AGIL: The following functions are not yet tested:
     */
//    const ImageYIQ<uint8> to_yiq( const ImageRGB<uint8>& image );
//    const ImageRIQ<uint8> to_riq( const ImageRGB<uint8>& image );
//    const ImageRCQ<uint8> to_rcq( const ImageRGB<uint8>& image );
//    const ImageRUV<uint8> to_ruv( const ImageRGB<uint8>& image );

    BOOST_WARN_MESSAGE(false, "TESTS NOT YET IMPLEMENTED FOR: to_yiq, to_riq, to_rcq, to_ruv");
}

BOOST_AUTO_TEST_SUITE_END ();
