// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------
//
// Copyright (C) 2004      Yefeng Zheng
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You are free to use this program for non-commercial purpose.
// If you plan to use this code in commercial applications,
// you need additional licensing:
// please contact zhengyf@cfar.umd.edu
// --------------------------------------------------------------
//
// version 1.0 - 4 September 1996
// author: Roy Jonker @ MagicLogic Optimization Inc.
//
//   "A Shortest Augmenting Path Algorithm for Dense and Sparse Linear
//    Assignment Problems," Computing 38, 325-340, 1987
// Main program file to run and check Jonker-Volgenant LAP code
//
// A bug was fixed by Yefeng Zheng 03/07/2004
// --------------------------------------------------------------
// Adapted to ImagePlus by Jordi Pont 09/09/2009
//*************************************************************************/


//!
//!  \file hungarian.hpp
//!
//!  \brief Implementation of the Hungarian algorithm
//!


#ifndef IMAGEPLUS_MATH_GRAPHS_HUNGARIAN_HPP
#define IMAGEPLUS_MATH_GRAPHS_HUNGARIAN_HPP

//#include <iomanip.h>
#include <time.h>
#include <stdlib.h>

#include <imageplus/core.hpp>

namespace imageplus
{
    namespace math
    {
        namespace graphs
        {      
            //! Implementation of the Hungarian Algorithm for solving the assignment problem.
            //! 
            //! Intuitively: Assume that we have N workers and N jobs that should be done. 
            //!              For each pair (worker, job) we know the salary that should be paid to the worker 
            //!              for him to perform the job. 
            //!              Our goal is to complete all jobs minimizing total inputs, while assigning each worker 
            //!              to exactly one job and vice versa.
            //!
            //! Mathematically: The algorithms looks for the minimum matching of the weighted bipartite
            //!                 between workers and jobs (vertices) linked by their salaries (edges).
            //!
            //! Please refer to: H. W. Kuhn, The Hungarian method for the assignment problem,
            //!                  Naval Research Logistic Quarterly, vol. 2, pp. 83-97, 1955.
            //!
            //! \author Jordi Pont Tuset <jpont@gps.tsc.upc.edu>
            //!
            //! \date 09-09-2008
            //!
            //! \param[in]   costs: Cost matrix (position (i,j) is the weight of the edge between worker i and job j)
            //! \param[out] rowsol: Column assigned to row in solution
            //! \param[out] colsol: Row assigned to column in solution
            //! \return The total cost of the assignment
            float32 hungarian(const MultiArray<float32,2>& costs, std::vector<int32>& rowsol, std::vector<int32>& colsol);
            
            
            //! Implementation of the Hungarian Algorithm for solving the assignment problem.
            //! 
            //! Intuitively: Assume that we have N workers and N jobs that should be done. 
            //!              For each pair (worker, job) we know the salary that should be paid to the worker 
            //!              for him to perform the job. 
            //!              Our goal is to complete all jobs minimizing total inputs, while assigning each worker 
            //!              to exactly one job and vice versa.
            //!
            //! Mathematically: The algorithms looks for the minimum matching of the weighted bipartite
            //!                 between workers and jobs (vertices) linked by their salaries (edges).
            //!
            //! Please refer to: H. W. Kuhn, The Hungarian method for the assignment problem,
            //!                  Naval Research Logistic Quarterly, vol. 2, pp. 83-97, 1955.
            //!
            //! \author Jordi Pont Tuset <jpont@gps.tsc.upc.edu>
            //!
            //! \date 09-09-2008
            //!
            //! \param[in]   costs: Cost matrix (position (i,j) is the weight of the edge between worker i and job j)
            //! \return The total cost of the assignment
            float32 hungarian(const MultiArray<float32,2>& costs);
        }
    }
}
#endif


