// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//! 
//! \file models.test
//!
//! Tests for Models class
//!
#include <imageplus/machine_learning/svm/svm_adaptors.hpp>
#include <imageplus/semantic/model.hpp>
#include <imageplus/semantic/modelpart.hpp>
#include <imageplus/semantic/models.hpp>


BOOST_AUTO_TEST_SUITE ( Semantic_Models_Suite );

using namespace imageplus;
using namespace imageplus::semantic;
using namespace imageplus::machine_learning::svm;
using namespace std;

BOOST_AUTO_TEST_CASE( models_test )
{
	Models<SVM> models;

	// check exceptions when a given semantic class is not in the ontology
	BOOST_CHECK_THROW(models.get_model(1), ImagePlusError);

	// add an ontology
	Ontology ontology;
	ontology.add_semantic_class(1, "Anchor");
	ontology.add_semantic_class(2, "Face");
	ontology.add_semantic_class(3, "Weather");
	models.set_ontology(ontology);

	// model for semantic class 1
	Model<SVM>& model1 = models.get_model(1);
	ModelPart<SVM> model_part_1;
	SVM classifier1;
	model_part_1.add_vd_classifier("ColorStructure", classifier1);
	model1.add_part(model_part_1);

	// model for semantic class 2
	Model<SVM>& model2 = models.get_model(2);
	ModelPart<SVM> model_part_2;
	SVM classifier2;
	model_part_2.add_vd_classifier("ColorStructure", classifier2);
	model2.add_part(model_part_2);


	// check that retrieved representation of model1 is correct
	stringstream model1_text;
	model1_text << model1;

	Model<SVM>& model1_copy = models.get_model(1);
	stringstream model1_copy_text;
	model1_copy_text << model1_copy;

	BOOST_CHECK_EQUAL(model1_text.str(), model1_copy_text.str());
	BOOST_CHECK_EQUAL(model1.get_parts().size(), model1_copy.get_parts().size());
}

BOOST_AUTO_TEST_CASE( models_test_iterators )
{
	Ontology ontology;
	ontology.add_semantic_class(1, "Anchor");
	ontology.add_semantic_class(2, "Face");
	ontology.add_semantic_class(3, "Weather");

	Models<SVM> models;
	models.set_ontology(ontology);

	// create an empty model for each semantic class
	models.get_model(1);
	models.get_model(2);
	models.get_model(3);

	size_t count = 0, N = 0;
	Models<SVM>::iterator it = models.begin();
	while (it != models.end())
	{
		Model<SVM> m = *it++;
		count += m.get_parts().size();
		N++;
	}
	BOOST_CHECK(count == 0+0+0);
	BOOST_CHECK(N == 3);

	count = N = 0;
	Models<SVM>::const_iterator const_it = models.begin();
	while (const_it != models.end())
	{
		Model<SVM> m = *const_it++;
		count += m.get_parts().size();
		N++;
	}
	BOOST_CHECK(count == 0+0+0);
	BOOST_CHECK(N == 3);
}

BOOST_AUTO_TEST_CASE( models_test_cout )
{
	Ontology ontology;
	ontology.set_name("Head parts");
	ontology.add_semantic_class(1, "Hair");
	ontology.add_semantic_class(2, "Face");
	ontology.add_semantic_class(3, "Ears");

	Models<SVM> models;
	models.set_ontology(ontology);

	// model for semantic class 1
	Model<SVM>& model1 = models.get_model(1);
	ModelPart<SVM> model_part_1;
	SVM classifier1;
	model_part_1.add_vd_classifier("ColorStructure", classifier1);
	model1.add_part(model_part_1);

	// model for semantic class 2
	Model<SVM>& model2 = models.get_model(2);
	ModelPart<SVM> model_part_2;
	SVM classifier2;
	model_part_2.add_vd_classifier("ColorStructure", classifier2);
	model2.add_part(model_part_2);

	stringstream expected;
	expected << "@@@ Models @@@"                                         << endl;
	expected << "> Models Ontology:"                                     << endl;
	expected << "Ontology name: Head parts"                              << endl;
	expected << "Semantic classes:"                                      << endl;
	expected << "  - Hair"                                               << endl;
	expected << "  - Face"                                               << endl;
	expected << "  - Ears"                                               << endl;
	expected << ""                                                       << endl;
	expected << "> Models:"                                              << endl;
	expected << "Model of 'semantic class 1' parts:"                     << endl;
	expected << "- model part with classifiers for visual descriptors:";
	expected << " ColorStructure,"                                       << endl;
	expected << ""                                                       << endl;
	expected << "Model of 'semantic class 2' parts:"                     << endl;
	expected << "- model part with classifiers for visual descriptors:";
	expected << " ColorStructure,"                                       << endl;
	expected << ""                                                       << endl;
	expected << "@@@ End of Models @@@"                                  << endl;

	stringstream obtained;
	obtained << models;

	BOOST_CHECK_EQUAL(obtained.str(), expected.str());
}


BOOST_AUTO_TEST_SUITE_END ();
