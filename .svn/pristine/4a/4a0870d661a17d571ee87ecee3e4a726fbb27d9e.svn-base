// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file volumergb.hpp
//!
//!  Interface for VolumeRGB class
//!

#ifndef IMAGEPLUS_CORE_VOLUMERGB_HPP
#define IMAGEPLUS_CORE_VOLUMERGB_HPP

#include <imageplus/core/volume.hpp>


namespace imageplus
{

    //!
    //! \brief base class to rgb volumes
    //!
    //! \author Javier Ruiz Hidalgo <j.ruiz@upc.edu>
    //! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
    //!
    //! \date 10-1-2008
    //!
    //! Template T is the type of the data
    //!
    //! The declaration should be:
    //! \code
    //!    VolumeRGB<uint8> a(4,4,4);
    //! \endcode
    //!
    //! This creates a VolumeRGB of uint8 values with size 4x4x4.
    //!
    //! The access of a pixel is done as the ImaVol class:
    //! \code
    //!    a(RED_CHANNEL)[1][3][2] = 0 // Access to pixel (x=1,y=3,z=2) in the red channel
    //! \endcode
    //! or
    //! \code
    //!    a(GREEN_CHANNEL)[1][3][2] = 0 // Access to pixel (x=1,y=3,z=2) in the green channel
    //! \endcode
    //!
    //! See file multiarray.hpp to a more detail explanation on access
    //!
    template<typename T>
    class VolumeRGB :public Volume <T,3>
    {
        public:

            //!
            //! \brief Default constructor
            //!
            VolumeRGB();


            //!
            //! \brief Constructor for 3 dimensions
            //!
            //! \param[in] x : X size of the image
            //! \param[in] y : Y size of the image
            //! \param[in] z : Z size of the image
            //!
            VolumeRGB(uint64 x, uint64 y, uint64 z);

            //!
            //! \brief Copy constructor for ImaVol
            //!
            //! \param[in] copy : Creates a copy (including values) of this imavol
            //!
            VolumeRGB( const ImaVol<T,3,3>& copy );

            //!
            //! \brief Copy constructor for Volume
            //!
            //! \param[in] copy : Creates a copy (including values) of this volume
            //!
            VolumeRGB( const Volume<T,3>& copy );

            //!
            //! \brief Copy constructor for VolumeRGB
            //!
            //! \param[in] copy : Creates a copy (including values) of this volume
            //!
            VolumeRGB( const VolumeRGB<T>& copy );

            //!
            //! \brief Constructor with a vector of dimentions
            //!
            //! \param[in] dims: Vector of vectors with the dimension of each channel
            //!
            explicit VolumeRGB(const std::vector< std::vector<uint64> >& dims);

            //!
            //! \brief Destructor
            //!
            virtual ~VolumeRGB();

            //!
            //! \brief Assignment operator for ImaVol
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this imavol
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const VolumeRGB<T>& operator=( const ImaVol<T,3,3>& copy );

            //!
            //! \brief Assignment operator for Volume
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this volume
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const VolumeRGB<T>& operator=( const Volume<T,3>& copy );

            //!
            //! \brief Assignment operator for VolumeRGB
            //!
            //! \param[in] copy : Creates a copy (size,channels and data) of this VolumeRGB
            //!
            //! \return Reference to (this) so a = b = c; works.
            //!
            const VolumeRGB<T>& operator=( const VolumeRGB<T>& copy );

            //!
            //! \brief Assigment operator for values (fills the entire image)
            //!
            //! \param[in] val : Value to fill all pixel
            //!
            //! \return Reference to value to a = b = 1; works
            //!
            const T& operator=( const T& val );

    };

}

#endif
