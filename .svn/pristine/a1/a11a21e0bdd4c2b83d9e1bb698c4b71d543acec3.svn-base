/*
 * projective_reconstruction.cpp
 *
 *  Created on: Jun 14, 2013
 *      Author: gpalou
 */


#include <imageplus/monocular_depth/structure_from_motion/fundamental_matrix.hpp>
#include <imageplus/monocular_depth/structure_from_motion/projective_reconstruction.hpp>
#include <iostream>
#include <fstream>
#include <string>

using namespace imageplus;
using namespace monocular_depth;

int main(int argc, char *argv[]) {

	std::vector<math::Vector> points1;
	std::vector<math::Vector> points2;

	std::string matches = argv[1];

	std::ifstream ifs(matches.c_str());

	double a,b,c,d;
	while (ifs >> a >> b >> c >> d) {
		math::Vector v1(2); v1(0) = a; v1(1) = b;
		math::Vector v2(2); v2(0) = c; v2(1) = d;
		//std::cout << v1.transpose() << " " << v2.transpose() << std::endl;
		points1.push_back(v1);
		points2.push_back(v2);
	}
	int N = points1.size();

	math::Matrix p1(N,2);
	math::Matrix p2(N,2);

	math::Vector center(2);
	center << 0,0; //479.5, 269.5;

	for (int i = 0; i < N; i++) {
		p1.row(i) = points1[i].transpose()-center;
		p2.row(i) = points2[i].transpose()-center;
	}

	std::cout << "Finding fundamental matrix " << std::endl;
	math::Matrix F = estimate_fundamental_matrix(p1,p2, false, 0);

	//std::cout << "Fundamental matrix: " << std::endl;
	//std::cout << F << std::endl;
	//std::cout << "--------------------" << std::endl;


	ProjectiveReconstruction p;
	math::Matrix X = p.projective_reconstruction_from_two_views(p1,p2,F);

	//p.metric_reconstruction_from_two_views(X,192,144);
}
