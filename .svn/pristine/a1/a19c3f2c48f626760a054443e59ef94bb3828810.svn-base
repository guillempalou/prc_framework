// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file dominant_color.test
 */ 

#include <imageplus/descriptors/color/dominant_color.hpp> 

BOOST_AUTO_TEST_SUITE ( Descriptors_Dominant_Color_Suite );

using namespace imageplus;
using namespace descriptors;

BOOST_AUTO_TEST_CASE( DominantColor8_test)
{    
    ImageYUV<uint8> my_image(3,3);
    my_image(0)[0][0] = 195;
    my_image(1)[0][0] = 37;
    my_image(2)[0][0] = 230;
    
    my_image(0)[1][0] = 117;
    my_image(1)[1][0] = 16;
    my_image(2)[1][0] = 50;
    
    my_image(0)[2][0] = 160;
    my_image(1)[2][0] = 160;
    my_image(2)[2][0] = 160;
    
    my_image(0)[0][1] = 117;
    my_image(1)[0][1] = 16;
    my_image(2)[0][1] = 50;
    
    my_image(0)[1][1] = 10;
    my_image(1)[1][1] = 50;
    my_image(2)[1][1] = 200;
    
    my_image(0)[2][1] = 120;
    my_image(1)[2][1] = 250;
    my_image(2)[2][1] = 5;
    
    my_image(0)[0][2] = 135;
    my_image(1)[0][2] = 255;
    my_image(2)[0][2] = 5;
    
    my_image(0)[1][2] = 24;
    my_image(1)[1][2] = 245;
    my_image(2)[1][2] = 180;
    
    my_image(0)[2][2] = 245;
    my_image(1)[2][2] = 50;
    my_image(2)[2][2] = 40;
    
    typedef ImageYUV<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    
    const DominantColor8<ImageYUV<uint8> >& desc =
          calc_descriptor(new DominantColor8<ImageYUV<uint8> >(), my_image);
    
	boost::array< boost::array<uint8,3>, 8 > centroids;
	centroids[0][0] = 117;
	centroids[0][1] = 17;
	centroids[0][2] = 49;

	centroids[1][0] = 127;
	centroids[1][1] = 251;
	centroids[1][2] = 5;
	
	centroids[2][0] = 9;
	centroids[2][1] = 49;
	centroids[2][2] = 201;
	
	centroids[3][0] = 25;
	centroids[3][1] = 245;
	centroids[3][2] = 181;
	
	centroids[4][0] = 245;
	centroids[4][1] = 49;
	centroids[4][2] = 41;
	
	centroids[5][0] = 193;
	centroids[5][1] = 37;
	centroids[5][2] = 229;
	
	centroids[6][0] = 161;
	centroids[6][1] = 161;
	centroids[6][2] = 161;
	
	centroids[7][0] = 133;
	centroids[7][1] = 253;
	centroids[7][2] = 5;
	
    BOOST_CHECK( centroids == desc.value_yuv());
    
    boost::array<float64,8> percentages;
    percentages[0]=2.0/9.0;
    percentages[1]=2.0/9.0;
    for(uint8 ii = 2; ii < 7; ii++ )
    {
    	percentages[ii] = 1.0/9.0;
	}
	percentages[7]=0.0;
	
	BOOST_CHECK( percentages == desc.percentages()); 
	
	boost::array< boost::array<uint64,3>, 8> color_variance; 
	for(uint8 ii=0; ii<8; ii++)
	{
		color_variance[ii].assign(0);
	}
	color_variance[1][0]=72;
	color_variance[1][1]=8;
	color_variance[1][2]=0;
	
	BOOST_CHECK( color_variance == desc.color_variance());
	
	float64 spatial_coherency = 0.0;
	
	BOOST_CHECK( spatial_coherency == desc.spatial_coherency());
}

BOOST_AUTO_TEST_CASE( DominantColor_test)
{    
    ImagePartition<> my_im_part(3,3);
   
    ImageYUV<uint8> my_image(3,3);
    my_image(0)[0][0] = 195;
    my_image(1)[0][0] = 37;
    my_image(2)[0][0] = 230;
    
    my_image(0)[1][0] = 117;
    my_image(1)[1][0] = 16;
    my_image(2)[1][0] = 50;
    
    my_image(0)[2][0] = 160;
    my_image(1)[2][0] = 160;
    my_image(2)[2][0] = 160;
    
    my_image(0)[0][1] = 117;
    my_image(1)[0][1] = 16;
    my_image(2)[0][1] = 50;
    
    my_image(0)[1][1] = 10;
    my_image(1)[1][1] = 50;
    my_image(2)[1][1] = 200;
    
    my_image(0)[2][1] = 120;
    my_image(1)[2][1] = 250;
    my_image(2)[2][1] = 5;
    
    my_image(0)[0][2] = 135;
    my_image(1)[0][2] = 255;
    my_image(2)[0][2] = 5;
    
    my_image(0)[1][2] = 24;
    my_image(1)[1][2] = 245;
    my_image(2)[1][2] = 180;
    
    my_image(0)[2][2] = 245;
    my_image(1)[2][2] = 50;
    my_image(2)[2][2] = 40;
    
    typedef ImageYUV<uint8> InputType;
    typedef RegionContour<Coord2D<int64> > RegionType;
    typedef Partition<RegionType> partition_type;
    
    partition_type my_part(my_im_part);
    
    DominantColor<ImageYUV<uint8> > desc;
    desc = calc_descriptor(new DominantColor<ImageYUV<uint8> >(64,YUV),  my_image, my_part[0]);
    
	std::vector< boost::array<uint8,3> > centroids;
	centroids.resize(7);
	centroids[0][0] = 117;
	centroids[0][1] = 17;
	centroids[0][2] = 49;
		
	centroids[1][0] = 127;
	centroids[1][1] = 251;
	centroids[1][2] = 5;
	
	centroids[2][0] = 9;
	centroids[2][1] = 49;
	centroids[2][2] = 201;

	centroids[3][0] = 193;
	centroids[3][1] = 37;
	centroids[3][2] = 229;
	
	centroids[4][0] = 25;
	centroids[4][1] = 245;
	centroids[4][2] = 181;
	
	centroids[5][0] = 161;
	centroids[5][1] = 161;
	centroids[5][2] = 161;
	
	centroids[6][0] = 245;
	centroids[6][1] = 49;
	centroids[6][2] = 41;
	
	BOOST_CHECK( desc.value_aux().size() == 7 );
    BOOST_CHECK( centroids == desc.value_aux());
    
    std::vector<float64> percentages;
    percentages.resize(7);
    percentages[0]=2.0/9.0;
    percentages[1]=2.0/9.0;
    for(uint8 ii = 2; ii < 7; ii++ )
    {
    	percentages[ii] = 1.0/9.0;
	}
	
	BOOST_CHECK( percentages == desc.percentages()); 
	
	std::vector<boost::array< uint64, 3> > color_variance; 
	color_variance.resize(7);
	for(uint8 ii = 0; ii< 7; ii++)
	{
		color_variance[ii].assign(0);
	}
	color_variance[1][0] = 72;
	color_variance[1][1] = 8;
	color_variance[1][2] = 0;
	
	BOOST_CHECK( color_variance == desc.color_variance());
	
	float64 spatial_coherency = 1.0/9.0;
	
	BOOST_CHECK( spatial_coherency == desc.spatial_coherency());

}

BOOST_AUTO_TEST_SUITE_END ();

