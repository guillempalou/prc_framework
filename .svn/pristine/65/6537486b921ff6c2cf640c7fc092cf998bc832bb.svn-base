/*
 * minimizer.hpp
 *
 *  Created on: Feb 28, 2012
 *      Author: guillem
 */

#ifndef MINIMIZER_HPP_
#define MINIMIZER_HPP_

#include <imageplus/math/numeric/scalar_function.hpp>

namespace imageplus {
	namespace math {
		namespace optimization {

		//! Base class for all the minimizers
		//! \author Guillem Palou <guillem.palou@upc.edu>
		//! \date 10-04-2012
		class Minimizer {

			//! Variable type
			typedef numeric::ScalarFunction::VariableType VariableType;

		public:
			//! Constructor
			//!
			//! \param[i] f : function to be minimized
			Minimizer(numeric::ScalarFunction& f) : _f(f) {}

			//! Function that returns the minimum value.
			//! You should first call minimize() for this method to be valid
			//! \return The minimum value of f()
			float64 minimum_value() {return _minimum_value;}

			//! Function that returns the point where the minimum value is reached.
			//! You should first call minimize() for this method to be valid
			//! \return The minimum point of f()
			VariableType minimum_point() {return _minimum_point;}

			//! Function that implements the minimizing algoithm
			//! Each subclass should implement its own method
			virtual void minimize(const VariableType& initial_point) = 0;

		protected:
			//! Minimum point
			VariableType 	_minimum_point;

			//! Minimum value
			float64			_minimum_value;

			//! Function to be minimized
			numeric::ScalarFunction& _f;
		};

		}
	}
}


#endif /* MINIMIZER_HPP_ */
