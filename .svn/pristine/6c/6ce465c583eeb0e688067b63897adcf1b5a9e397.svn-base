// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file normalization.test
 */

#include <iostream>
#include <imageplus/math/numeric/normalization.hpp>
#include <imageplus/math/numeric/norms.hpp>
#include <imageplus/math/statistics/multiarray_statistics.hpp>


BOOST_AUTO_TEST_SUITE ( suite_normalization );

using namespace imageplus;
using namespace imageplus::math::numeric;

BOOST_AUTO_TEST_CASE( normalization_test)
{
	
    uint64 size = 5;
    
    MultiArray<float64,2> A(size,size);

    A[0][0] = 1;
    A[1][0] = 2;
    A[2][0] = 3;
    A[3][0] = 4;
    A[4][0] = 5;
    A[0][1] = 6;
    A[1][1] = 7;
    A[2][1] = 8;
    A[3][1] = 9;
    A[4][1] = 0;
    A[0][2] = 9;
    A[1][2] = 8;
    A[2][2] = 7;
    A[3][2] = 6;
    A[4][2] = 5;
    A[0][3] = 4;
    A[1][3] = 3;
    A[2][3] = 2;
    A[3][3] = 1;
    A[4][3] = 0;
    A[0][4] = 0;
    A[1][4] = 1;
    A[2][4] = 2;
    A[3][4] = 3;
    A[4][4] = 4;

    // Result for columnwise normalization
    MultiArray<float64,2>res1(size,size);
	res1[0][0] = -0.816497;
	res1[0][1] =  0.544331;
	res1[0][2] =  1.36083;
	res1[0][3] =  0;
	res1[0][4] = -1.08866;
	res1[1][0] = -0.706377;
	res1[1][1] =  0.899026;
	res1[1][2] =  1.22011;
	res1[1][3] = -0.385297;
	res1[1][4] = -1.02746;
	res1[2][0] = -0.485947;
	res1[2][1] =  1.24958;
	res1[2][2] =  0.902473;
	res1[2][3] = -0.833052;
	res1[2][4] = -0.833052;
	res1[3][0] = -0.196748;
	res1[3][1] =  1.44282;
	res1[3][2] =  0.459078;
	res1[3][3] = -1.18049;
	res1[3][4] = -0.524661;
	res1[4][0] =  0.849934;
	res1[4][1] = -1.08173;
	res1[4][2] =  0.849934;
	res1[4][3] = -1.08173;
	res1[4][4] =  0.4636;


    // Result for rowwise normalization
    MultiArray<float64,2>res2(size,size);
	res2[0][0] = -1.26491;
	res2[1][0] = -0.632456;
	res2[2][0] =  0;
	res2[3][0] =  0.632456;
	res2[4][0] =  1.26491;
	res2[0][1] =  0;
	res2[1][1] =  0.282843;
	res2[2][1] =  0.565685;
	res2[3][1] =  0.848528;
	res2[4][1] = -1.69706;
	res2[0][2] =  1.26491;
	res2[1][2] =  0.632456;
	res2[2][2] =  0;
	res2[3][2] = -0.632456;
	res2[4][2] = -1.26491;
	res2[0][3] =  1.26491;
	res2[1][3] =  0.632456;
	res2[2][3] =  0;
	res2[3][3] = -0.632456;
	res2[4][3] = -1.26491;
	res2[0][4] = -1.26491;
	res2[1][4] = -0.632456;
	res2[2][4] =  0;
	res2[3][4] =  0.632456;
	res2[4][4] =  1.26491;

    // std::cout << A << std::endl;
    
    MultiArray<float64,2> B;
    B = imageplus::math::numeric::mean_var_normalization< float64 >(A, COLUMNWISE_NORMALIZATION);

    // std::cout << B << std::endl;


    for (uint64 j = 0; j < A.dims(1); j++)
    for (uint64 i = 0; i < A.dims(0); i++)
    {
        BOOST_CHECK_SMALL (std::abs(B[i][j]-res1[i][j]), 1e-5);
    }

    MultiArray<float64,2> C;
    C = imageplus::math::numeric::mean_var_normalization< float64 >(A, ROWWISE_NORMALIZATION);


    for (uint64 j = 0; j < A.dims(1); j++)
    for (uint64 i = 0; i < A.dims(0); i++)
    {
        BOOST_CHECK_SMALL (std::abs(C[i][j]-res2[i][j]), 1e-5);
    }

   // Result for columnwise normalization
    MultiArray<float64,2>res3(size,size);
	res3[0][0] = -3;
	res3[0][1] =  2;
	res3[0][2] =  5;
	res3[0][3] =  0;
	res3[0][4] = -4;
	res3[1][0] = -2.2;
	res3[1][1] =  2.8;
	res3[1][2] =  3.8;
	res3[1][3] = -1.2;
	res3[1][4] = -3.2;
	res3[2][0] = -1.4;
	res3[2][1] =  3.6;
	res3[2][2] =  2.6;
	res3[2][3] = -2.4;
	res3[2][4] = -2.4;
	res3[3][0] = -0.6;
	res3[3][1] =  4.4;
	res3[3][2] =  1.4;
	res3[3][3] = -3.6;
	res3[3][4] = -1.6;
	res3[4][0] =  2.2;
	res3[4][1] = -2.8;
	res3[4][2] =  2.2;
	res3[4][3] = -2.8;
	res3[4][4] =  1.2;

   // Result for rowwise normalization
    MultiArray<float64,2>res4(size,size);
	res4[0][0] = -2;
	res4[1][0] = -1;
	res4[2][0] = 0;
	res4[3][0] = 1;
	res4[4][0] = 2;
	res4[0][1] = 0;
	res4[1][1] = 1;
	res4[2][1] = 2;
	res4[3][1] = 3;
	res4[4][1] = -6;
	res4[0][2] = 2;
	res4[1][2] = 1;
	res4[2][2] = 0;
	res4[3][2] = -1;
	res4[4][2] = -2;
	res4[0][3] = 2;
	res4[1][3] = 1;
	res4[2][3] = 0;
	res4[3][3] = -1;
	res4[4][3] = -2;
	res4[0][4] = -2;
	res4[1][4] = -1;
	res4[2][4] = 0;
	res4[3][4] = 1;
	res4[4][4] = 2;




    MultiArray<float64,2> D;
    D = imageplus::math::numeric::mean_normalization< float64 >(A, ROWWISE_NORMALIZATION);

    for (uint64 j = 0; j < A.dims(1); j++)
    for (uint64 i = 0; i < A.dims(0); i++)
    {
        BOOST_CHECK_SMALL (std::abs(D[i][j]-res4[i][j]), 1e-5);
    }

    MultiArray<float64,2> E;
    E = imageplus::math::numeric::mean_normalization< float64 >(A, COLUMNWISE_NORMALIZATION);

    for (uint64 j = 0; j < A.dims(1); j++)
    for (uint64 i = 0; i < A.dims(0); i++)
    {
        BOOST_CHECK_SMALL (std::abs(E[i][j]-res3[i][j]), 1e-5);
    }


    // mean_norm_normalization() : Result for columnwise normalization
    MultiArray<float64,2>res5(size,size);
	res5[0][0] = -0.408248;
	res5[0][1] =  0.272166;
	res5[0][2] =  0.680414;
	res5[0][3] =  0;
	res5[0][4] = -0.544331;
	res5[1][0] = -0.353189;
	res5[1][1] =  0.449513;
	res5[1][2] =  0.610053;
	res5[1][3] = -0.192648;
	res5[1][4] = -0.513729;
	res5[2][0] = -0.242974;
	res5[2][1] =  0.624789;
	res5[2][2] =  0.451237;
	res5[2][3] = -0.416526;
	res5[2][4] = -0.416526;
	res5[3][0] = -0.0983739;
	res5[3][1] =  0.721408;
	res5[3][2] =  0.229539;
	res5[3][3] = -0.590243;
	res5[3][4] = -0.26233;
	res5[4][0] =  0.424967;
	res5[4][1] = -0.540867;
	res5[4][2] =  0.424967;
	res5[4][3] = -0.540867;
	res5[4][4] =  0.2318;

    MultiArray<float64,2> F;
    F = imageplus::math::numeric::mean_norm_normalization< float64 >(A, COLUMNWISE_NORMALIZATION);

    for (uint64 j = 0; j < A.dims(1); j++)
    for (uint64 i = 0; i < A.dims(0); i++)
    {
        BOOST_CHECK_SMALL (std::abs(F[i][j]-res5[i][j]), 1e-5);
    }

    // mean_norm_normalization() : Result for rowwise normalization
    MultiArray<float64,2>res6(size,size);
	res6[0][0] = -0.632456;
	res6[1][0] = -0.316228;
	res6[2][0] =  0;
	res6[3][0] =  0.316228;
	res6[4][0] =  0.632456;
	res6[0][1] =  0;
	res6[1][1] =  0.141421;
	res6[2][1] =  0.282843;
	res6[3][1] =  0.424264;
	res6[4][1] = -0.848528;
	res6[0][2] =  0.632456;
	res6[1][2] =  0.316228;
	res6[2][2] =  0;
	res6[3][2] = -0.316228;
	res6[4][2] = -0.632456;
	res6[0][3] =  0.632456;
	res6[1][3] =  0.316228;
	res6[2][3] =  0;
	res6[3][3] = -0.316228;
	res6[4][3] = -0.632456;
	res6[0][4] = -0.632456;
	res6[1][4] = -0.316228;
	res6[2][4] =  0;
	res6[3][4] =  0.316228;
	res6[4][4] =  0.632456;

    MultiArray<float64,2> G;
    G = imageplus::math::numeric::mean_norm_normalization< float64 >(A, ROWWISE_NORMALIZATION);

    for (uint64 j = 0; j < A.dims(1); j++)
    for (uint64 i = 0; i < A.dims(0); i++)
    {
        BOOST_CHECK_SMALL (std::abs(G[i][j]-res6[i][j]), 1e-5);
    }


    MultiArray<float64,1> V1(size);

    V1[0] = 1;
    V1[1] = 2;
    V1[2] = 3;
    V1[3] = 4;
    V1[4] = 5;
    
    MultiArray<float64,1> H(size);
    H = imageplus::math::numeric::mean_norm_normalization< float64 >(V1);

    // mean_norm_normalization() : Result for rowwise normalization
    MultiArray<float64,1>res7(size);
	res7[0] = -0.632456;
	res7[1] = -0.316228;
	res7[2] =  0;
	res7[3] =  0.316228;
	res7[4] =  0.632456;

    for (uint64 j = 0; j < V1.dims(0); j++)
    {
        BOOST_CHECK_SMALL (std::abs(H[j]-res7[j]), 1e-5);
    }



}    
BOOST_AUTO_TEST_SUITE_END ();
