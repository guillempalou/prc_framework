// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file neighbors.hpp
//!
//!  Functions to get the neighbors' coordinates to a given point
//! 

#ifndef IMAGEPLUS_CORE_NEIGHBORS_HPP
#define IMAGEPLUS_CORE_NEIGHBORS_HPP

#include <vector>

#include <imageplus/core/exceptions.hpp>
#include <imageplus/core/imageplus_types.hpp>
#include <imageplus/core/multiarray.hpp>
#include <imageplus/core/coord2d.hpp>
#include <imageplus/core/point.hpp>

namespace imageplus
{
    //!
    //! \brief Find the multiarray neighbors coordinates to a given point
    //!
    //! Given a point lying into the limits of a multiarray, find the neighbors to this point taken from 
    //! the input multiarray.
    //! 4 or 8 connectivity can be used. Connectivity is only meaningful for points lying at integer
    //! positions\n
    //! For points lying at the multiarray border or beyond it, if flag respect_bounds=false 
    //! neighbors with coordinates out of the multiarray limits can be returned. Otherwise, only the neighbors
    //! inside the multiarray are returned.\n
    //!
    //! \tparam T : Type of the data
    //!
    //! \param[in] ori            : Multiarray (2D)
    //! \param[in] point          : Point 2D
    //! \param[in] distance       : Only neighbors at a distance <= than this parameter are returned
    //! \param[in] connectivity   : Connectivity (4 or 8)
    //! \param[in] respect_bounds : Flag to control whether to skip or not out-of-limits neighbors
    //!
    //! \return Vector with the neighbors' coordinates
    //!
    //! \headerfile include/imageplus/math/numeric/interpolation.hpp <math/numeric/interpolation.hpp>
    //!
    //! \author Ramon Morros <ramon.morros@upc.edu>
    //!
    //! \date 19-12-2008
    //!
    template<typename T>
    std::vector< Coord2D<> > neighbors (const MultiArray<T,2>& ori, Point2D point, float64 distance, uint64 connectivity=8, bool respect_bounds=true);

    //!
    //! \brief Find the multiarray neighbors coordinates to a given point
    //!
    //! Given a point lying into the limits of a multiarray, find the neighbors to this point taken from 
    //! the input multiarray.
    //! 4 or 8 connectivity can be used. Connectivity is only meaningful for points lying at integer
    //! positions\n
    //! For points lying at the multiarray border or beyond it, if flag respect_bounds=false 
    //! neighbors with coordinates out of the multiarray limits can be returned. Otherwise, only the neighbors
    //! inside the multiarray are returned.\n
    //!
    //! \tparam T : Type of the data
    //!
    //! \param[in] ori            : Multiarray (2D)
    //! \param[in] mask           : ROI mask. Only active mask points are returned
    //! \param[in] point          : Point 2D
    //! \param[in] distance       : Only neighbors at a distance <= than this parameter are returned
    //! \param[in] connectivity   : Connectivity (4 or 8)
    //! \param[in] respect_bounds : Flag to control whether to skip or not out-of-limits neighbors
    //!
    //! \return Vector with the neighbors' coordinates
    //!
    //! \headerfile include/imageplus/math/numeric/interpolation.hpp <math/numeric/interpolation.hpp>
    //!
    //! \author Ramon Morros <ramon.morros@upc.edu>
    //!
    //! \date 19-12-2008
    //!
    template<typename T>
    std::vector< Coord2D<> > neighbors (const MultiArray<T,2>& ori, const MultiArray<bool,2>& mask, Point2D point, float64 distance, uint64 connectivity=8, bool respect_bounds=true)  throw (ImagePlusError);


    //!
    //! \brief Find the multiarray neighbors values to a given point
    //!
    //! Given a point lying into the limits of a multiarray, find the neighbors to this point taken from 
    //! the input multiarray.
    //! 4 or 8 connectivity can be used. Connectivity is only meaningful for points lying at integer
    //! positions\n
    //! Only the neighbors inside the multiarray are returned.\n
    //!
    //! \tparam T : Type of the data
    //!
    //! \param[in] ori            : Multiarray (2D)
    //! \param[in] point          : Point 2D
    //! \param[in] distance       : Only neighbors at a distance <= than this parameter are returned
    //! \param[in] connectivity   : Connectivity (4 or 8)
    //!
    //! \return Vector with the neighbors' values
    //!
    //! \headerfile include/imageplus/math/numeric/interpolation.hpp <math/numeric/interpolation.hpp>
    //!
    //! \author Ramon Morros <ramon.morros@upc.edu>
    //!
    //! \date 19-12-2008
    //!
    template<typename T>
    std::vector<T> neighbors_values (const MultiArray<T,2>& ori, Point2D point, float64 distance, uint64 connectivity=8);

    //!
    //! \brief Find the multiarray neighbors values to a given point
    //!
    //! Given a point lying into the limits of a multiarray, find the neighbors to this point taken from 
    //! the input multiarray.
    //! 4 or 8 connectivity can be used. Connectivity is only meaningful for points lying at integer
    //! positions\n
    //! Only the neighbors inside the multiarray are returned.\n
    //!
    //! \tparam T : Type of the data
    //!
    //! \param[in] ori            : Multiarray (2D)
    //! \param[in] mask           : ROI mask. Only active mask points are returned
    //! \param[in] point          : Point 2D
    //! \param[in] distance       : Only neighbors at a distance <= than this parameter are returned
    //! \param[in] connectivity   : Connectivity (4 or 8)
    //!
    //! \return Vector with the neighbors' values
    //!
    //! \headerfile include/imageplus/math/numeric/interpolation.hpp <math/numeric/interpolation.hpp>
    //!
    //! \author Ramon Morros <ramon.morros@upc.edu>
    //!
    //! \date 19-12-2008
    //!
    template<typename T>
    std::vector<T> neighbors_values (const MultiArray<T,2>& ori, const MultiArray<bool,2>& mask, Point2D point, float64 distance, uint64 connectivity=8)  throw (ImagePlusError);

    //!
    //! \brief Find the nearest valid multiarray neighbors coordinates to a given point
    //!
    //! Given a point lying into the limits of a multiarray, find the 4 neighbors to this point taken from 
    //! the input multiarray. A neighbor is valid if the mask at this point is set to true. This function
    //! scans the adjacent coordinates in the four directions (left, right, up and down) respectively, starting
    //! from the current coordinate until a valid coordinate (mask = true) is found (at any distance). Up to
    //! four coordinates are returned.\n
    //! This function can be used to fill holes interpolating with the values at the hole border.
    //!
    //! \param[in] mask           : ROI mask. Only active mask points are returned
    //! \param[in] coord          : Multiarray coordinate where to find the neighbors from
    //!
    //! \return Vector with the neighbors' coordinates
    //!
    //! \headerfile include/imageplus/math/numeric/interpolation.hpp <math/numeric/interpolation.hpp>
    //!
    //! \author Ramon Morros <ramon.morros@upc.edu>
    //!
    //! \date 19-12-2008
    //!
    std::vector< Coord2D<> > nearest_valid_neighbors (const MultiArray<bool,2>& mask, Coord2D<> coord) throw (ImagePlusError);

    //!
    //! \brief Find the nearest valid multiarray neighbors values to a given point
    //!
    //! Given a point lying into the limits of a multiarray, find the values of the 4 neighbors to this point taken from 
    //! the input multiarray. A neighbor is valid if the mask at this point is set to true. This function
    //! scans the adjacent coordinates in the four directions (left, right, up and down) respectively, starting
    //! from the current coordinate until a valid point (mask = true) is found (at any distance). Up to
    //! four values are returned.\n
    //! This function can be used to fill holes interpolating with the values at the hole border.
    //!
    //! \tparam T : Type of the data
    //!
    //! \param[in] ori            : Multiarray (2D)
    //! \param[in] mask           : ROI mask. Only active mask points are returned
    //! \param[in] coord          : Multiarray coordinate where to find the neighbors from
    //!
    //! \return Vector with the neighbors' values
    //!
    //! \headerfile include/imageplus/math/numeric/interpolation.hpp <math/numeric/interpolation.hpp>
    //!
    //! \author Ramon Morros <ramon.morros@upc.edu>
    //!
    //! \date 19-12-2008
    //!
    template<typename T>
    std::vector<T> nearest_valid_neighbors_values (const MultiArray<T,2>& ori, const MultiArray<bool,2>& mask, Coord2D<> coord)  throw (ImagePlusError);
}

#endif

