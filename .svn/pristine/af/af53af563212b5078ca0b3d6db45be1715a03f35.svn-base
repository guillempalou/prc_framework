// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file modelpart.hpp
//!
//!  ModelPart
//!


#ifndef IMAGEPLUS_SEMANTIC_MODEL_PART_HPP
#define IMAGEPLUS_SEMANTIC_MODEL_PART_HPP

#include <iostream>
#include <map>
#include <string>

#include <imageplus/core.hpp>

namespace imageplus {
	namespace semantic {

		//!
		//! \brief Classifier models for a set of descriptors of a model part.
		//!
		//! This class is used as a container of classifier models of this
		//! model part for some visual descriptors. It is indexed by
		//! descriptor name to improve access time.
		//!
		//! \author Pau Haro Negre
		//!
		//! \date 10-6-2011
		//!
		template<class Classifier>
	    class ModelPart
		{
		public:

			//! Type of the model part classifiers container
			typedef std::map<std::string, Classifier> PartClassifiersType;

			//! Type of the model part classifiers container iterator
			typedef typename PartClassifiersType::iterator PartClassifiersIterator;

			//! Type of the model part classifiers container const iterator
			typedef typename PartClassifiersType::const_iterator PartClassifiersConstIterator;


            //! \brief Default constructor
			ModelPart() {}

            //! \brief Destructor
            ~ModelPart() {}


            //! Get the classifier for the given visual descriptor.
            //!
            //! \param[in] vd_name Visual descriptor name
            //!
            //! \return Classifier of this model part for the visual descriptor
            Classifier get_vd_classifier(std::string vd_name) throw (ImagePlusError)
            {
            	PartClassifiersConstIterator it = _classifiers.find(vd_name);
            	if (it == _classifiers.end())
            		throw ImagePlusError("Classifier for '" + vd_name + "' not found in this ModelPart.");
            	return it->second;
            }

			//! Check whether there is a classifier for the given visual descriptor in this ModelPart.
			//!
            //! \param[in] vd_name Visual descriptor name
            //!
            //! \return Whether there is a classifier for the given visual descriptor in this ModelPart
            bool includes_vd_classifier(std::string vd_name)
            {
            	return _classifiers.find(vd_name) != _classifiers.end();
            }

			//! Add a classifier for the given visual descriptor to this ModelPart.
			//!
			//! \param[in] vd_name	  Visual descriptor name
			//! \param[in] classifier Classifier of this model part for the given descriptor
            void add_vd_classifier(std::string vd_name, const Classifier& classifier)
            {
            	if (this->includes_vd_classifier(vd_name))
            		throw ImagePlusError("Classifier for '" + vd_name + "' already included in this model part.");

            	_classifiers.insert(make_pair(vd_name, classifier));
            }


    		//! Output a representation of the given ModelPart to an ostream.
            //!
            //! \param[in,out] os Output stream where the representation will be appended
            //! \param[in]     mp Instance of ModelPart class to write to the stream
    		//!
    		//! \return Description of the ModelPart is appended to the given ostream.
    		friend std::ostream& operator<<(std::ostream &os, const ModelPart& mp)
    		{
    			os << "model part with classifiers for visual descriptors:";

    			PartClassifiersConstIterator it = mp._classifiers.begin();
    			for (; it != mp._classifiers.end(); it++)
    				os << " " << it->first << ",";

    			return os;
    		}

		private:
    		//! Container of classifiers of this model part for each visual descriptor
    		PartClassifiersType _classifiers;
		};
	}
}

#endif //IMAGEPLUS_SEMANTIC_MODEL_PART_HPP
