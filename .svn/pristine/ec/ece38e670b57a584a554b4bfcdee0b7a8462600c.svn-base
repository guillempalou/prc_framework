// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

/*!
 * \file partition_measures.test
 */ 

#include <imageplus/segmentation/partition_measures.hpp>
#include <imageplus/io/readimage.hpp>

BOOST_AUTO_TEST_SUITE ( Segmentation_Partition_Measures_Suite );

using namespace imageplus;
using namespace segmentation;


BOOST_AUTO_TEST_CASE( measures_test )
{
    ImagePartition<> im_part2(4,4);
    im_part2[0][0] = 1;     im_part2[1][0] = 1;     im_part2[2][0] = 2;     im_part2[3][0] = 2;
    im_part2[0][1] = 1;     im_part2[1][1] = 1;     im_part2[2][1] = 2;     im_part2[3][1] = 2;
    im_part2[0][2] = 1;     im_part2[1][2] = 2;     im_part2[2][2] = 2;     im_part2[3][2] = 2;
    im_part2[0][3] = 1;     im_part2[1][3] = 2;     im_part2[2][3] = 2;     im_part2[3][3] = 2;

    ImageRGB<uint8> ima1(4,4);
    ima1(0)[0][0] = 1;     ima1(0)[1][0] = 5;     ima1(0)[2][0] = 9;     ima1(0)[3][0] = 2;
    ima1(0)[0][1] = 7;     ima1(0)[1][1] = 1;     ima1(0)[2][1] = 7;     ima1(0)[3][1] = 3;
    ima1(0)[0][2] = 1;     ima1(0)[1][2] = 2;     ima1(0)[2][2] = 1;     ima1(0)[3][2] = 7;
    ima1(0)[0][3] = 9;     ima1(0)[1][3] = 0;     ima1(0)[2][3] = 9;     ima1(0)[3][3] = 2;


    ima1(1)[0][0] = 1;     ima1(1)[1][0] = 5;     ima1(1)[2][0] = 9;     ima1(1)[3][0] = 2;
    ima1(1)[0][1] = 7;     ima1(1)[1][1] = 1;     ima1(1)[2][1] = 7;     ima1(1)[3][1] = 3;
    ima1(1)[0][2] = 1;     ima1(1)[1][2] = 2;     ima1(1)[2][2] = 1;     ima1(1)[3][2] = 7;
    ima1(1)[0][3] = 9;     ima1(1)[1][3] = 0;     ima1(1)[2][3] = 9;     ima1(1)[3][3] = 2;

    ima1(2)[0][0] = 1;     ima1(2)[1][0] = 5;     ima1(2)[2][0] = 9;     ima1(2)[3][0] = 2;
    ima1(2)[0][1] = 7;     ima1(2)[1][1] = 1;     ima1(2)[2][1] = 7;     ima1(2)[3][1] = 3;
    ima1(2)[0][2] = 1;     ima1(2)[1][2] = 2;     ima1(2)[2][2] = 1;     ima1(2)[3][2] = 7;
    ima1(2)[0][3] = 9;     ima1(2)[1][3] = 0;     ima1(2)[2][3] = 9;     ima1(2)[3][3] = 2;


    ImageYUV<uint8> ima2(4,4);
    ima2(0)[0][0] = 1;     ima2(0)[1][0] = 5;     ima2(0)[2][0] = 9;     ima2(0)[3][0] = 2;
    ima2(0)[0][1] = 7;     ima2(0)[1][1] = 1;     ima2(0)[2][1] = 7;     ima2(0)[3][1] = 3;
    ima2(0)[0][2] = 1;     ima2(0)[1][2] = 2;     ima2(0)[2][2] = 1;     ima2(0)[3][2] = 7;
    ima2(0)[0][3] = 9;     ima2(0)[1][3] = 0;     ima2(0)[2][3] = 9;     ima2(0)[3][3] = 2;


    ima2(1)[0][0] = 1;     ima2(1)[1][0] = 5;     ima2(1)[2][0] = 9;     ima2(1)[3][0] = 2;
    ima2(1)[0][1] = 7;     ima2(1)[1][1] = 1;     ima2(1)[2][1] = 7;     ima2(1)[3][1] = 3;
    ima2(1)[0][2] = 1;     ima2(1)[1][2] = 2;     ima2(1)[2][2] = 1;     ima2(1)[3][2] = 7;
    ima2(1)[0][3] = 9;     ima2(1)[1][3] = 0;     ima2(1)[2][3] = 9;     ima2(1)[3][3] = 2;

    ima2(2)[0][0] = 1;     ima2(2)[1][0] = 5;     ima2(2)[2][0] = 9;     ima2(2)[3][0] = 2;
    ima2(2)[0][1] = 7;     ima2(2)[1][1] = 1;     ima2(2)[2][1] = 7;     ima2(2)[3][1] = 3;
    ima2(2)[0][2] = 1;     ima2(2)[1][2] = 2;     ima2(2)[2][2] = 1;     ima2(2)[3][2] = 7;
    ima2(2)[0][3] = 9;     ima2(2)[1][3] = 0;     ima2(2)[2][3] = 9;     ima2(2)[3][3] = 2;




    float64 res;

    res = partition_metric_f (im_part2, ima1);
    BOOST_CHECK_CLOSE(res, 0.0051888420234095225, 1.e-5);

    res = intra_region_contrast (im_part2, ima2);
    BOOST_CHECK_CLOSE(res, 0.9748366, 1.e-5);

    res = inter_region_contrast (im_part2, ima2);
    BOOST_CHECK_CLOSE(res, 0.98039216, 1.e-5);

    res = texture_variance (im_part2, ima2);
    BOOST_CHECK_CLOSE(res, 0.999677816, 1.e-5);


    ImageYUV<uint8> ima3(4,4);
    ima3(0)[0][0] = 1;     ima3(0)[1][0] = 2;     ima3(0)[2][0] = 19;     ima3(0)[3][0] = 16;
    ima3(0)[0][1] = 2;     ima3(0)[1][1] = 1;     ima3(0)[2][1] = 17;     ima3(0)[3][1] = 17;
    ima3(0)[0][2] = 1;     ima3(0)[1][2] = 17;    ima3(0)[2][2] = 15;     ima3(0)[3][2] = 17;
    ima3(0)[0][3] = 0;     ima3(0)[1][3] = 19;    ima3(0)[2][3] = 19;     ima3(0)[3][3] = 16;


    ima3(1)[0][0] = 1;     ima3(1)[1][0] = 2;     ima3(1)[2][0] = 19;     ima3(1)[3][0] = 16;
    ima3(1)[0][1] = 2;     ima3(1)[1][1] = 1;     ima3(1)[2][1] = 17;     ima3(1)[3][1] = 17;
    ima3(1)[0][2] = 1;     ima3(1)[1][2] = 17;    ima3(1)[2][2] = 15;     ima3(1)[3][2] = 17;
    ima3(1)[0][3] = 0;     ima3(1)[1][3] = 19;    ima3(1)[2][3] = 19;     ima3(1)[3][3] = 16;

    ima3(2)[0][0] = 1;     ima3(2)[1][0] = 2;     ima3(2)[2][0] = 19;     ima3(2)[3][0] = 16;
    ima3(2)[0][1] = 2;     ima3(2)[1][1] = 1;     ima3(2)[2][1] = 17;     ima3(2)[3][1] = 17;
    ima3(2)[0][2] = 1;     ima3(2)[1][2] = 17;    ima3(2)[2][2] = 15;     ima3(2)[3][2] = 17;
    ima3(2)[0][3] = 0;     ima3(2)[1][3] = 19;    ima3(2)[2][3] = 19;     ima3(2)[3][3] = 16;

    res = zeboudj_contrast (im_part2, ima3);
    BOOST_CHECK_CLOSE(res, 0.882353, 1.e-5);


#if 0

    ImageGray<uint8> depth_15;
    io::ReadImage rde("/imatge/morros/workspace/bpt/modules/segmentation/test/depth-cam4-f015.bmp");
    rde >> depth_15;

    ImagePartition<> part_ini_15;
    io::ReadImage rpa;



    boost::array<float64,1> weights2 = {{1.0}};




    ImagePartition<> part_id_15;
    rpa.open("/imatge/morros/workspace/bpt/modules/segmentation/test/ideal_depth_4_015.prl");
    rpa >> part_id_15;

    res = texture_variance (part_id_15, depth_15, weights2);
    std::cout << "TV id depth = " << res << std::endl;

    rpa.open("/imatge/morros/workspace/bpt/modules/segmentation/test/combined_4_015.prl");
    rpa >> part_ini_15;

    res = texture_variance (part_ini_15, depth_15, weights2);
    std::cout << "TV com = " << res << std::endl;


    rpa.open("/imatge/morros/workspace/bpt/modules/segmentation/test/true_view_4_015.prl");
    rpa >> part_ini_15;

    res = texture_variance (part_ini_15, depth_15, weights2);
    std::cout << "TV true = " << res << std::endl;



    rpa.open("/imatge/morros/workspace/bpt/modules/segmentation/test/initial_4_015.prl");
    rpa >> part_ini_15;

    res = texture_variance (part_ini_15, depth_15, weights2);
    std::cout << "TV ini = " << res << std::endl;


    rpa.open ("/imatge/morros/workspace/bpt/modules/segmentation/test/initial_depth_4_015.prl");
    rpa >> part_ini_15;

    res = texture_variance (part_ini_15, depth_15, weights2);
    std::cout << "TV ini depth= " << res << std::endl;
#endif

}

BOOST_AUTO_TEST_SUITE_END ();

