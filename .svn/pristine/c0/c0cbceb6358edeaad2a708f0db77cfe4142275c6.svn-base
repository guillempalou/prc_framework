// --------------------------------------------------------------
// Copyright (C)
// Universitat Politecnica de Catalunya (UPC) - Barcelona - Spain
// --------------------------------------------------------------

//!
//!  \file volumegray.cpp
//!
//! \author Javier Ruiz Hidalgo <j.ruiz@upc.edu>
//! \author Josep Ramon Morros <morros@gps.tsc.upc.edu>
//!
//!  Implementation for VolumeGray class
//!

#include <imageplus/core/volumegray.hpp>

using namespace imageplus;

template<typename T>
VolumeGray<T>::VolumeGray()
        : Volume<T,1>()
{
}


template<typename T>
VolumeGray<T>::VolumeGray(uint64 sizeX, uint64 sizeY, uint64 sizeZ)
        : Volume<T,1> (sizeX,sizeY,sizeZ)
{
}


template<typename T>
VolumeGray<T>::VolumeGray(const ImaVol<T,1,3>& copy)
        : Volume<T,1>(copy)
{
}


template<typename T>
VolumeGray<T>::VolumeGray(const Volume<T,1>& copy)
        : Volume<T,1>(copy)
{
}


template<typename T>
VolumeGray<T>::VolumeGray(const VolumeGray<T>& copy)
        : Volume<T,1>(copy)
{
}

template<typename T>
VolumeGray<T>::VolumeGray(const std::vector< std::vector<uint64> >& dims)
        : Volume<T,1>(dims)
{
}


template<typename T>
VolumeGray<T>::~VolumeGray()
{
}

template<typename T>
const VolumeGray<T>& VolumeGray<T>::operator=(const ImaVol<T,1,3>& copy)
{
    (*this).Volume<T,1>::operator=( copy );

    return *this;
}

template<typename T>
const VolumeGray<T>& VolumeGray<T>::operator=(const Volume<T,1>& copy)
{
    (*this).Volume<T,1>::operator=( copy );

    return *this;
}

template<typename T>
const VolumeGray<T>& VolumeGray<T>::operator=(const VolumeGray<T>& copy)
{
    (*this).Volume<T,1>::operator=( copy );

    return *this;
}


template<typename T>
const T& VolumeGray<T>::operator=(const T& val)
{
    (*this).Volume<T,1>::operator=( val );

    return val;
}


// VolumeGray instantiations
namespace imageplus
{

    template class VolumeGray<uint8>;
    template class VolumeGray<int16>;
    template class VolumeGray<int64>;
    template class VolumeGray<float64>;

}
